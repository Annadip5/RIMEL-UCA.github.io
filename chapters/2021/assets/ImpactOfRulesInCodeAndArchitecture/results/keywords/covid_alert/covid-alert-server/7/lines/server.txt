/mnt/c/Users/conig/Desktop/test/covid-alert-server/.git/config:9:	url = https://github.com/cds-snc/covid-alert-server.git
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.git/hooks/post-update.sample:8:exec git update-server-info
Binary file /mnt/c/Users/conig/Desktop/test/covid-alert-server/.git/index matches
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.git/logs/HEAD:1:0000000000000000000000000000000000000000 7f9cfe159cb5797effdf89c6526713e42ad66096 Yan Conigliaro <yan.conigliaro@etu.univ-cotedazur.fr> 1613460815 +0100	clone: from https://github.com/cds-snc/covid-alert-server.git
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.git/logs/refs/heads/master:1:0000000000000000000000000000000000000000 7f9cfe159cb5797effdf89c6526713e42ad66096 Yan Conigliaro <yan.conigliaro@etu.univ-cotedazur.fr> 1613460815 +0100	clone: from https://github.com/cds-snc/covid-alert-server.git
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.git/logs/refs/remotes/origin/HEAD:1:0000000000000000000000000000000000000000 7f9cfe159cb5797effdf89c6526713e42ad66096 Yan Conigliaro <yan.conigliaro@etu.univ-cotedazur.fr> 1613460815 +0100	clone: from https://github.com/cds-snc/covid-alert-server.git
Binary file /mnt/c/Users/conig/Desktop/test/covid-alert-server/.git/objects/pack/pack-0114be98b3fe31909bf2065d859d0464b1507baa.pack matches
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:35:          ECR_REPOSITORY: covid-server/key-retrieval
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:51:          ECR_REPOSITORY: covid-server/key-submission
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:68:          docker push $STG_ECR_REGISTRY/covid-server/key-retrieval:$GITHUB_SHA
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:69:          docker push $STG_ECR_REGISTRY/covid-server/key-retrieval:latest
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:70:          docker push $STG_ECR_REGISTRY/covid-server/key-submission:$GITHUB_SHA
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:71:          docker push $STG_ECR_REGISTRY/covid-server/key-submission:latest
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:94:          docker push $DEMO_ECR_REGISTRY/covid-server/key-retrieval:$GITHUB_SHA
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:95:          docker push $DEMO_ECR_REGISTRY/covid-server/key-retrieval:latest
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:96:          docker push $DEMO_ECR_REGISTRY/covid-server/key-submission:$GITHUB_SHA
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:97:          docker push $DEMO_ECR_REGISTRY/covid-server/key-submission:latest
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:119:          docker push $PROD_ECR_REGISTRY/covid-server/key-retrieval:$GITHUB_SHA
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:120:          docker push $PROD_ECR_REGISTRY/covid-server/key-retrieval:latest
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:121:          docker push $PROD_ECR_REGISTRY/covid-server/key-submission:$GITHUB_SHA
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:122:          docker push $PROD_ECR_REGISTRY/covid-server/key-submission:latest
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-monolith.yml:38:          -t $DOCKER_SLUG/covid-alert-server-monolith:$GITHUB_SHA \
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-monolith.yml:39:          -t $DOCKER_SLUG/covid-alert-server-monolith:latest .
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-monolith.yml:43:          docker push $DOCKER_SLUG/covid-alert-server-monolith:$GITHUB_SHA
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-monolith.yml:44:          docker push $DOCKER_SLUG/covid-alert-server-monolith:latest
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/deploy-containers.yml:21:            IMAGE_NAME: covid-server/key-retrieval
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/deploy-containers.yml:27:            IMAGE_NAME: covid-server/key-submission
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/snyk.yml:14:          args: --file=go.mod --org=exposurenotification --project-name=covid-alert-server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/sync-labels.yml:7:      - uses: cds-snc/covid-alert-server-labels@v1
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.gitignore:9:/server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/clear-diagnosis-keys.sh:18:TRUNCATE TABLE server.diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/daily-reports.sh:14:SELECT * FROM server.events WHERE date = "$DATE"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:24:  serialized_pb=b'\n\x11\x63ovidshield.proto\x12\x0b\x63ovidshield\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\"@\n\x0fKeyClaimRequest\x12\x15\n\rone_time_code\x18\x01 \x02(\t\x12\x16\n\x0e\x61pp_public_key\x18\x02 \x02(\x0c\"\xae\x02\n\x10KeyClaimResponse\x12\x36\n\x05\x65rror\x18\x01 \x01(\x0e\x32\'.covidshield.KeyClaimResponse.ErrorCode\x12\x19\n\x11server_public_key\x18\x02 \x01(\x0c\x12\x17\n\x0ftries_remaining\x18\x03 \x01(\r\x12\x39\n\x16remaining_ban_duration\x18\x04 \x01(\x0b\x32\x19.google.protobuf.Duration\"s\n\tErrorCode\x12\x08\n\x04NONE\x10\x00\x12\x0b\n\x07UNKNOWN\x10\x01\x12\x19\n\x15INVALID_ONE_TIME_CODE\x10\x02\x12\x10\n\x0cSERVER_ERROR\x10\x03\x12\x0f\n\x0bINVALID_KEY\x10\x04\x12\x11\n\rTEMPORARY_BAN\x10\x05\"k\n\x16\x45ncryptedUploadRequest\x12\x19\n\x11server_public_key\x18\x01 \x02(\x0c\x12\x16\n\x0e\x61pp_public_key\x18\x02 \x02(\x0c\x12\r\n\x05nonce\x18\x03 \x02(\x0c\x12\x0f\n\x07payload\x18\x04 \x02(\x0c\"\xb3\x03\n\x17\x45ncryptedUploadResponse\x12=\n\x05\x65rror\x18\x01 \x02(\x0e\x32..covidshield.EncryptedUploadResponse.ErrorCode\"\xd8\x02\n\tErrorCode\x12\x08\n\x04NONE\x10\x00\x12\x0b\n\x07UNKNOWN\x10\x01\x12\x13\n\x0fINVALID_KEYPAIR\x10\x02\x12\x15\n\x11\x44\x45\x43RYPTION_FAILED\x10\x03\x12\x13\n\x0fINVALID_PAYLOAD\x10\x04\x12\x10\n\x0cSERVER_ERROR\x10\x05\x12\x1d\n\x19INVALID_CRYPTO_PARAMETERS\x10\x06\x12\x11\n\rTOO_MANY_KEYS\x10\x07\x12\x15\n\x11INVALID_TIMESTAMP\x10\x08\x12\x1a\n\x16INVALID_ROLLING_PERIOD\x10\n\x12\x14\n\x10INVALID_KEY_DATA\x10\x0b\x12)\n%INVALID_ROLLING_START_INTERVAL_NUMBER\x10\x0c\x12#\n\x1fINVALID_TRANSMISSION_RISK_LEVEL\x10\r\x12\x16\n\x12NO_KEYS_IN_PAYLOAD\x10\x0e\"h\n\x06Upload\x12-\n\ttimestamp\x18\x01 \x02(\x0b\x32\x1a.google.protobuf.Timestamp\x12/\n\x04keys\x18\x02 \x03(\x0b\x32!.covidshield.TemporaryExposureKey\"\xe9\x01\n\x1aTemporaryExposureKeyExport\x12\x17\n\x0fstart_timestamp\x18\x01 \x01(\x06\x12\x15\n\rend_timestamp\x18\x02 \x01(\x06\x12\x0e\n\x06region\x18\x03 \x01(\t\x12\x11\n\tbatch_num\x18\x04 \x01(\x05\x12\x12\n\nbatch_size\x18\x05 \x01(\x05\x12\x33\n\x0fsignature_infos\x18\x06 \x03(\x0b\x32\x1a.covidshield.SignatureInfo\x12/\n\x04keys\x18\x07 \x03(\x0b\x32!.covidshield.TemporaryExposureKey\"\x97\x01\n\rSignatureInfo\x12 \n\x18verification_key_version\x18\x03 \x01(\t\x12\x1b\n\x13verification_key_id\x18\x04 \x01(\t\x12\x1b\n\x13signature_algorithm\x18\x05 \x01(\tJ\x04\x08\x01\x10\x02J\x04\x08\x02\x10\x03R\rapp_bundle_idR\x0f\x61ndroid_package\"\x8d\x01\n\x14TemporaryExposureKey\x12\x10\n\x08key_data\x18\x01 \x01(\x0c\x12\x1f\n\x17transmission_risk_level\x18\x02 \x01(\x05\x12%\n\x1drolling_start_interval_number\x18\x03 \x01(\x05\x12\x1b\n\x0erolling_period\x18\x04 \x01(\x05:\x03\x31\x34\x34\"A\n\x10TEKSignatureList\x12-\n\nsignatures\x18\x01 \x03(\x0b\x32\x19.covidshield.TEKSignature\"|\n\x0cTEKSignature\x12\x32\n\x0esignature_info\x18\x01 \x01(\x0b\x32\x1a.covidshield.SignatureInfo\x12\x11\n\tbatch_num\x18\x02 \x01(\x05\x12\x12\n\nbatch_size\x18\x03 \x01(\x05\x12\x11\n\tsignature\x18\x04 \x01(\x0c\x42\x17Z\x15pkg/proto/covidshield'
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:53:      name='SERVER_ERROR', index=3, number=3,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:108:      name='SERVER_ERROR', index=5, number=5,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:216:      name='server_public_key', full_name='covidshield.KeyClaimResponse.server_public_key', index=1,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:263:      name='server_public_key', full_name='covidshield.EncryptedUploadRequest.server_public_key', index=0,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:45:# Submits a list of keys to the server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:56:    ep_req.server_public_key = srv_pub
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:117:    return kc_resp.server_public_key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/cmd/key-retrieval/main.go:4:	"github.com/cds-snc/covid-alert-server/pkg/app"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/cmd/key-retrieval/main.go:5:	"github.com/cds-snc/covid-alert-server/pkg/cmd"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/cmd/key-submission/main.go:4:	"github.com/cds-snc/covid-alert-server/pkg/app"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/cmd/key-submission/main.go:5:	"github.com/cds-snc/covid-alert-server/pkg/cmd"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/cmd/monolith/main.go:4:	"github.com/cds-snc/covid-alert-server/pkg/app"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/cmd/monolith/main.go:5:	"github.com/cds-snc/covid-alert-server/pkg/cmd"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/commit_msgs.md:2:Covid Alert Server uses the Angular commit convention for implementing human/machine readable commits.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config/infrastructure/aws/README.md:15:| Serverless compute | [Fargate](https://aws.amazon.com/fargate/) |
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config.yaml:1:defaultSubmissionServerPort: 8000
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config.yaml:2:defaultRetrievalServerPort: 8001
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config.yaml:3:defaultServerPort: 8010
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config.yaml:17:# When we assign an Application Public Key to a server keypair, we reset the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:35:1. Fork https://github.com/cds-snc/covid-alert-server to your account.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:36:2. Clone your fork of the **cds-snc/covid-alert-server** repo locally by running `git clone https://github.com/<username>/covid-alert-server.git`.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:37:3. Enter the repo directory `cd server`.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:57:Run `make` or `make release` to build a release version of the servers.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:134:1. Fourchez https://github.com/cds-snc/covid-alert-server à votre compte.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:135:2. Clonez localement votre fourche du dépôt **cds-snc/covid-alert-server** en exécutant localement un `git clone https://github.com/<username>/covid-alert-server.git`.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:136:3. Entrez le répertoire `cd server` du dépôt.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Dockerfile:13:ENV GOLDFLAGS="-X github.com/cds-snc/covid-alert-server/pkg/server.branch=${branch} -X github.com/cds-snc/covid-alert-server/pkg/server.revision=${revision}"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Dockerfile:15:WORKDIR /go/src/github.com/cds-snc/covid-alert-server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Dockerfile:28:RUN CGO_ENABLED=0 GOOS=linux go build -trimpath -ldflags="${GOLDFLAGS}" -o server ./cmd/${component}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Dockerfile:46:COPY --from=builder --chown=${USER}:${USER} /go/src/github.com/cds-snc/covid-alert-server/config.yaml /usr/local/bin/config.yaml
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Dockerfile:47:COPY --from=builder --chown=${USER}:${USER} /go/src/github.com/cds-snc/covid-alert-server/server /usr/local/bin/server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Dockerfile:52:ENTRYPOINT ["server", "--config_file_path", "./"]
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Dockerfile.heroku:13:ENV GOLDFLAGS="-X github.com/cds-snc/covid-alert-server/pkg/server.branch=${branch} -X github.com/cds-snc/covid-alert-server/pkg/server.revision=${revision}"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Dockerfile.heroku:15:WORKDIR /go/src/github.com/cds-snc/covid-alert-server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Dockerfile.heroku:28:RUN CGO_ENABLED=0 GOOS=linux go build -trimpath -ldflags="${GOLDFLAGS}" -o server ./cmd/monolith
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Dockerfile.heroku:48:COPY --from=builder /go/src/github.com/cds-snc/covid-alert-server/config.yaml /usr/local/bin/config.yaml
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Dockerfile.heroku:49:COPY --from=builder /go/src/github.com/cds-snc/covid-alert-server/server /usr/local/bin/server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Dockerfile.heroku:50:COPY --from=builder /go/src/github.com/cds-snc/covid-alert-server/scripts/heroku_run.sh /usr/local/bin/heroku_run.sh
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/new-key-claim/php.php:3:    $server_url = 'http://127.0.0.1:8000/new-key-claim';
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/new-key-claim/php.php:12:    $result = file_get_contents($server_url, false, $context);
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/new-key-claim/readme.md:3:Receiving a new key is a simple HTTP call to the server with an Authentication header. This should be straightforward to implement as part of any public health worker system. Please note to keep the authentication token secret and avoid exposing generated keys to people who have not have had COVID positive test results
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/new-key-claim/ruby.rb:5:  SERVER_URI = URI.parse('http://127.0.0.1:8000/new-key-claim')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/new-key-claim/ruby.rb:12:    Net::HTTP.start(SERVER_URI.host, SERVER_URI.port, use_ssl: SERVER_URI.scheme == 'https') do |http|
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/new-key-claim/ruby.rb:13:      request = Net::HTTP::Post.new(SERVER_URI.path, 'Authorization' => "Bearer #{TOKEN}")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.mod:1:module github.com/cds-snc/covid-alert-server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Makefile:1:MODULE := github.com/cds-snc/covid-alert-server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Makefile:30:GOLDFLAGS="-X $(MODULE)/pkg/server.branch=$(BRANCH) -X $(MODULE)/pkg/server.revision=$(REVISION)"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:8:	covidshield "github.com/cds-snc/covid-alert-server/pkg/proto/covidshield"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:11:	persistence "github.com/cds-snc/covid-alert-server/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:356:// GetServerEvents provides a mock function with given fields: startDate
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:357:func (_m *Conn) GetServerEvents(startDate string) ([]persistence.Events, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/server/Server.go:13:// Server is an autogenerated mock type for the Server type
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/server/Server.go:14:type Server struct {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/server/Server.go:19:func (_m *Server) Addr() *net.TCPAddr {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/server/Server.go:35:func (_m *Server) Run() error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/server/Server.go:49:func (_m *Server) Tomb() *tomb.Tomb {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:2:  "name": "covid-shield-server",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package.json:2:  "name": "covid-shield-server",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package.json:10:    "url": "git+https://github.com/cds-snc/covid-shield-server.git"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:12:	"github.com/cds-snc/covid-alert-server/pkg/config"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:13:	"github.com/cds-snc/covid-alert-server/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:14:	"github.com/cds-snc/covid-alert-server/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:15:	"github.com/cds-snc/covid-alert-server/pkg/retrieval"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:16:	"github.com/cds-snc/covid-alert-server/pkg/server"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:17:	"github.com/cds-snc/covid-alert-server/pkg/workers"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:30:	defaultServerPort uint32
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:43:		defaultServerPort: config.AppConstants.DefaultServerPort,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:46:	builder.servlets = append(builder.servlets, server.NewServicesServlet())
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:65:	a.defaultServerPort = config.AppConstants.DefaultSubmissionServerPort
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:67:	a.servlets = append(a.servlets, server.NewUploadServlet(a.database))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:68:	a.servlets = append(a.servlets, server.NewKeyClaimServlet(a.database, lookup))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:76:	a.defaultServerPort = config.AppConstants.DefaultRetrievalServerPort
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:80:	a.servlets = append(a.servlets, server.NewRetrieveServlet(a.database, retrieval.NewAuthenticator(), retrieval.NewSigner()))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:85:	a.servlets = append(a.servlets, server.NewMetricsServlet(a.database, lookup))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:91:	a.defaultServerPort = 8000
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:96:	a.components = append(a.components, server.New(bindAddr(a.defaultServerPort), a.servlets))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/test-tools.go:4:	"github.com/cds-snc/covid-alert-server/pkg/server"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/test-tools.go:17:	a.servlets = append(a.servlets, server.NewTestToolsServlet(a.database, lookup))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/test-tools_test.go:5:	"github.com/cds-snc/covid-alert-server/pkg/server"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/test-tools_test.go:6:	"github.com/cds-snc/covid-alert-server/pkg/testhelpers"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/test-tools_test.go:18:		defaultServerPort: 0,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/test-tools_test.go:36:		defaultServerPort: 0,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/test-tools_test.go:45:	expected := append([]srvutil.Servlet{server.NewTestToolsServlet(nil, nil)})
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/cmd/cmd.go:6:	"github.com/cds-snc/covid-alert-server/pkg/app"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/cmd/cmd.go:7:	"github.com/cds-snc/covid-alert-server/pkg/telemetry"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:13:	DefaultSubmissionServerPort        uint32
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:14:	DefaultRetrievalServerPort         uint32
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:15:	DefaultServerPort                  uint32
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:52:	viper.SetDefault("defaultSubmissionServerPort", 8000)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:53:	viper.SetDefault("defaultRetrievalServerPort", 8001)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:54:	viper.SetDefault("defaultServerPort", 8010)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator.go:7:	"github.com/cds-snc/covid-alert-server/pkg/config"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:9:	"github.com/cds-snc/covid-alert-server/pkg/config"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:16:	pb "github.com/cds-snc/covid-alert-server/pkg/proto/covidshield"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:31:	// Return keys that were SUBMITTED to the Diagnosis Server during the specified
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:57:	GetServerEvents(startDate string) ([]Events, error)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:106:				ServerName: match[1],
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:217:		DeviceType: Server,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:16:	"github.com/cds-snc/covid-alert-server/pkg/config"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:17:	pb "github.com/cds-snc/covid-alert-server/pkg/proto/covidshield"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:18:	"github.com/cds-snc/covid-alert-server/pkg/timemath"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:182:	rows = sqlmock.NewRows([]string{"server_public_key"}).AddRow(pub[:])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:183:	mock.ExpectPrepare(`SELECT server_public_key FROM encryption_keys WHERE app_public_key = ?`).ExpectQuery().WithArgs(pub[:]).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:220:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:233:		DeviceType: Server,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:271:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:314:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:326:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:340:			DeviceType: Server,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:382:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:429:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:447:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:461:		DeviceType: Server,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:503:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:535:	rows := sqlmock.NewRows([]string{"server_private_key"}).AddRow(pub[:])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:552:	rows = sqlmock.NewRows([]string{"server_private_key"})
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:561:	rows = sqlmock.NewRows([]string{"server_private_key"})
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/deviceType.go:8:// Android events generated by Server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/deviceType.go:10:// Server events generated by Server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/deviceType.go:14:	Server  DeviceType = "Server"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/deviceType.go:20:	case Android, IOS, Server:
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/deviceType_test.go:13:		Server,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events.go:11:	"github.com/cds-snc/covid-alert-server/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events.go:109:// GetServerEvents get all the events that occurred in a day
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events.go:110:func (c *conn) GetServerEvents(date string) ([]Events, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events.go:111:	return getServerEventsByType(c.db, date)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events.go:114:func getServerEventsByType(db *sql.DB, date string) ([]Events, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events.go:124:		Server, date)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:10:	"github.com/cds-snc/covid-alert-server/pkg/testhelpers"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:68:		DeviceType: Server,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:93:		DeviceType: Server,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:104:	assert.Equal(t, Server, hook.LastEntry().Data["DeviceType"])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:117:func TestConn_GetServerEventsByTypeNoStartDate(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:122:	_, err := getServerEventsByType(db, "")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:127:func TestConn_GetServerEventsByTypeStartDateOnly(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:139:		WithArgs(Server, "2020-01-01").
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:142:	events, err := getServerEventsByType(db, "2020-01-01")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/main_test.go:6:	"github.com/cds-snc/covid-alert-server/pkg/config"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/main_test.go:7:	"github.com/cds-snc/covid-alert-server/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:7:	"github.com/cds-snc/covid-alert-server/pkg/config"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:42:	server_private_key   BINARY(32) NOT NULL UNIQUE,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:43:	server_public_key    BINARY(32) NOT NULL UNIQUE,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:11:	"github.com/cds-snc/covid-alert-server/pkg/config"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:12:	pb "github.com/cds-snc/covid-alert-server/pkg/proto/covidshield"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:13:	"github.com/cds-snc/covid-alert-server/pkg/timemath"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:21:			DeviceType: Server,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:263:		`SELECT server_public_key FROM encryption_keys WHERE app_public_key = ?`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:275:	var serverPub []byte
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:276:	if err := row.Scan(&serverPub); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:288:	event := Event{Originator: originator, DeviceType: Server, Identifier: OTKClaimed, Count: 1, Date: time.Now()}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:296:	return serverPub, nil
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:302:			(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:312:			(region, originator, hash_id, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:339:		SELECT server_private_key FROM encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:340:			WHERE server_public_key = ?
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:349:// Return keys that were SUBMITTED to the Diagnosis Server during the specified
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:11:	"github.com/cds-snc/covid-alert-server/pkg/config"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:12:	pb "github.com/cds-snc/covid-alert-server/pkg/proto/covidshield"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:13:	"github.com/cds-snc/covid-alert-server/pkg/timemath"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:196:	mock.ExpectPrepare(`SELECT server_public_key FROM encryption_keys WHERE app_public_key = ?`).ExpectQuery().WithArgs(pub[:]).WillReturnError(fmt.Errorf("error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:206:	assert.Equal(t, expectedErr, receivedErr, "Expected error if server_public_key was not queried")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:208:	// Commits and returns a server key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:229:	rows = sqlmock.NewRows([]string{"server_public_key"}).AddRow(pub[:])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:230:	mock.ExpectPrepare(`SELECT server_public_key FROM encryption_keys WHERE app_public_key = ?`).ExpectQuery().WithArgs(pub[:]).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:234:	serverKey, _ := claimKey(db, oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:240:	assert.Equal(t, pub[:], serverKey, "should return server key")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:261:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:283:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:316:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:339:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:362:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:389:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:417:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:445:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:473:	SELECT server_private_key FROM encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:474:		WHERE server_public_key = ?
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:480:	rows := sqlmock.NewRows([]string{"server_private_key"}).AddRow(priv[:])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools_test.go:9:	"github.com/cds-snc/covid-alert-server/pkg/testhelpers"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:36:	KeyClaimResponse_SERVER_ERROR          KeyClaimResponse_ErrorCode = 3
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:48:		3: "SERVER_ERROR",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:56:		"SERVER_ERROR":          3,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:107:	EncryptedUploadResponse_SERVER_ERROR              EncryptedUploadResponse_ErrorCode = 5
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:128:		5:  "SERVER_ERROR",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:144:		"SERVER_ERROR":                          5,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:265:// corresponding private key) and the returned server_public_key will be kept in
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:328:// KeyClaimResponse is received from the server in response to a
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:330:// server_public_key will be set.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:337:	ServerPublicKey      []byte                      `protobuf:"bytes,2,opt,name=server_public_key,json=serverPublicKey" json:"server_public_key,omitempty"` // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:381:func (x *KeyClaimResponse) GetServerPublicKey() []byte {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:383:		return x.ServerPublicKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:417:	// server_public_key is provided by the Diagnosis Server to the App, and is
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:420:	ServerPublicKey []byte `protobuf:"bytes,1,opt,name=server_public_key,json=serverPublicKey" json:"server_public_key,omitempty"` // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:422:	// application and linked to the server_public_key. These are linked in the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:423:	// Diagnosis Server, so that only one app_public_key is authorized to upload
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:424:	// for a given server_public_key. If a new server_public_key is issued to an App
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:469:func (x *EncryptedUploadRequest) GetServerPublicKey() []byte {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:471:		return x.ServerPublicKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:497:// EncryptedUploadResponse is received from the server in response to a
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:610:	// at the server, in UTC seconds.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:723:	// Key version in case the EN server signing key is rotated.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:726:	// the EN server's signing key (for example, the EN server might serve the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:730:	// If a region has more than one MCC, the server can choose
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:947:	// with the EN server's signing key.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:36:	KeyClaimResponse_SERVER_ERROR          KeyClaimResponse_ErrorCode = 3
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:48:		3: "SERVER_ERROR",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:56:		"SERVER_ERROR":          3,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:107:	EncryptedUploadResponse_SERVER_ERROR              EncryptedUploadResponse_ErrorCode = 5
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:128:		5:  "SERVER_ERROR",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:144:		"SERVER_ERROR":                          5,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:196:// corresponding private key) and the returned server_public_key will be kept in
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:259:// KeyClaimResponse is received from the server in response to a
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:261:// server_public_key will be set.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:268:	ServerPublicKey      []byte                      `protobuf:"bytes,2,opt,name=server_public_key,json=serverPublicKey" json:"server_public_key,omitempty"` // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:312:func (x *KeyClaimResponse) GetServerPublicKey() []byte {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:314:		return x.ServerPublicKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:348:	// server_public_key is provided by the Diagnosis Server to the App, and is
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:351:	ServerPublicKey []byte `protobuf:"bytes,1,opt,name=server_public_key,json=serverPublicKey" json:"server_public_key,omitempty"` // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:353:	// application and linked to the server_public_key. These are linked in the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:354:	// Diagnosis Server, so that only one app_public_key is authorized to upload
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:355:	// for a given server_public_key. If a new server_public_key is issued to an App
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:400:func (x *EncryptedUploadRequest) GetServerPublicKey() []byte {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:402:		return x.ServerPublicKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:428:// EncryptedUploadResponse is received from the server in response to a
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:541:	// at the server, in UTC seconds.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:644:	// Key version in case the EN server signing key is rotated.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:647:	// the EN server's signing key (for example, the EN server might serve the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:651:	// If a region has more than one MCC, the server can choose
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:848:	// with the EN server's signing key.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator.go:11:	"github.com/cds-snc/covid-alert-server/pkg/config"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator.go:12:	"github.com/cds-snc/covid-alert-server/pkg/timemath"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:13:	"github.com/cds-snc/covid-alert-server/pkg/config"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:14:	"github.com/cds-snc/covid-alert-server/pkg/timemath"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/retrieval.go:9:	pb "github.com/cds-snc/covid-alert-server/pkg/proto/covidshield"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/retrieval_test.go:10:	mockSigner "github.com/cds-snc/covid-alert-server/mocks/pkg/retrieval"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/retrieval_test.go:11:	pb "github.com/cds-snc/covid-alert-server/pkg/proto/covidshield"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:1:package server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:4:	"github.com/cds-snc/covid-alert-server/pkg/config"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:5:	"github.com/cds-snc/covid-alert-server/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:6:	"github.com/cds-snc/covid-alert-server/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:7:	pb "github.com/cds-snc/covid-alert-server/pkg/proto/covidshield"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:83:		http.Error(w, "server error", http.StatusInternalServerError)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:112:		kcre := kcrError(pb.KeyClaimResponse_SERVER_ERROR, triesRemaining)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:113:		return requestError(ctx, w, err, "database error checking claim-key ban", http.StatusInternalServerError, kcre)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:147:	serverPub, err := s.db.ClaimKey(oneTimeCode, appPublicKey, ctx)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:161:			kcre := kcrError(pb.KeyClaimResponse_SERVER_ERROR, triesRemaining)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:163:			return requestError(ctx, w, err, msg, http.StatusInternalServerError, kcre)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:171:			http.StatusInternalServerError, kcrError(pb.KeyClaimResponse_SERVER_ERROR, triesRemaining),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:176:	resp := &pb.KeyClaimResponse{ServerPublicKey: serverPub, TriesRemaining: &maxTries}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:182:			http.StatusInternalServerError, kcrError(pb.KeyClaimResponse_SERVER_ERROR, triesRemaining),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:1:package server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:9:	"github.com/cds-snc/covid-alert-server/pkg/testhelpers"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:19:	keyclaim "github.com/cds-snc/covid-alert-server/mocks/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:20:	persistence "github.com/cds-snc/covid-alert-server/mocks/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:21:	"github.com/cds-snc/covid-alert-server/pkg/config"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:22:	err "github.com/cds-snc/covid-alert-server/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:23:	pb "github.com/cds-snc/covid-alert-server/pkg/proto/covidshield"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:200:	assert.Equal(t, 500, resp.Code, "Server error response is expected")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:201:	assert.Equal(t, "server error\n", string(resp.Body.Bytes()), "server error response is expected")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:309:	serverPub, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:312:	db.On("ClaimKey", "AAAAAAAAAA", appPub[:], mock.Anything).Return(serverPub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:349:	assert.Equal(t, 500, resp.Code, "Server error response is expected")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:350:	assert.True(t, checkClaimKeyResponseError(resp.Body.Bytes(), pb.KeyClaimResponse_SERVER_ERROR))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:458:	assert.Equal(t, 500, resp.Code, "internal server error response is expected")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:459:	assert.True(t, checkClaimKeyResponseError(resp.Body.Bytes(), pb.KeyClaimResponse_SERVER_ERROR))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:474:	assert.Equal(t, 500, resp.Code, "internal server error response is expected")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:475:	assert.True(t, checkClaimKeyResponseError(resp.Body.Bytes(), pb.KeyClaimResponse_SERVER_ERROR))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/main_test.go:1:package server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/main_test.go:4:	"github.com/cds-snc/covid-alert-server/pkg/config"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/main_test.go:31:	// We need to run init config before any of the server tests
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:1:package server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:11:	"github.com/cds-snc/covid-alert-server/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:12:	"github.com/cds-snc/covid-alert-server/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:88:	events, err := m.db.GetServerEvents(startDateVal)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:101:		http.Error(w, "error building json object", http.StatusInternalServerError)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:108:		http.Error(w, "error retrieving results", http.StatusInternalServerError)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:156:		http.Error(w, "error building json object", http.StatusInternalServerError)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:163:		http.Error(w, "error retrieving results", http.StatusInternalServerError)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:212:		http.Error(w, "error building json object", http.StatusInternalServerError)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:219:		http.Error(w, "error retrieving results", http.StatusInternalServerError)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:1:package server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:9:	keyclaim "github.com/cds-snc/covid-alert-server/mocks/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:10:	persistence "github.com/cds-snc/covid-alert-server/mocks/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:11:	persistence2 "github.com/cds-snc/covid-alert-server/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:136:	db.On("GetServerEvents", "2020-01-01").
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:178:	db.On("GetServerEvents", "2020-01-01").
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:1:package server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:8:	"github.com/cds-snc/covid-alert-server/pkg/config"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:9:	"github.com/cds-snc/covid-alert-server/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:10:	pb "github.com/cds-snc/covid-alert-server/pkg/proto/covidshield"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:11:	"github.com/cds-snc/covid-alert-server/pkg/retrieval"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:12:	"github.com/cds-snc/covid-alert-server/pkg/timemath"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:42:	if responseCode == http.StatusInternalServerError {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:63:	You can see the reason for this in pkg/server/keyclaim.go
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:124:		return s.fail(log(ctx, err), w, "database error", "", http.StatusInternalServerError)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:1:package server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:6:	"github.com/cds-snc/covid-alert-server/pkg/testhelpers"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:12:	persistence "github.com/cds-snc/covid-alert-server/mocks/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:13:	retrieval "github.com/cds-snc/covid-alert-server/mocks/pkg/retrieval"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:14:	pb "github.com/cds-snc/covid-alert-server/pkg/proto/covidshield"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:15:	"github.com/cds-snc/covid-alert-server/pkg/timemath"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/server.go:1:package server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/server.go:10:	"github.com/cds-snc/covid-alert-server/pkg/telemetry"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/server.go:19:var log = logger.New("server")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/server.go:21:type Server interface {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/server.go:26:func New(bind string, servlets []srvutil.Servlet) Server {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/server.go:36:	return srvutil.NewServer(&tomb.Tomb{}, bind, sl)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/server.go:43:	if code == http.StatusInternalServerError {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/server_test.go:1:package server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/server_test.go:5:	"github.com/cds-snc/covid-alert-server/pkg/testhelpers"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/server_test.go:14:	pb "github.com/cds-snc/covid-alert-server/pkg/proto/covidshield"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/server_test.go:15:	"github.com/cds-snc/covid-alert-server/pkg/telemetry"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/server_test.go:24:	// Returns a server struct
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/server_test.go:36:	expectedResult := srvutil.NewServer(&tomb.Tomb{}, bind, sl)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/server_test.go:38:	assert.Equal(t, reflect.TypeOf(expectedResult), reflect.TypeOf(receivedResult), "Expected a new server struct")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/server_test.go:63:	// Test StatusInternalServerError
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/services.go:1:package server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/services.go:7:	"github.com/cds-snc/covid-alert-server/pkg/config"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/services.go:66:		http.Error(w, err.Error(), http.StatusInternalServerError)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/services.go:88:		http.Error(w, err.Error(), http.StatusInternalServerError)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/services_test.go:1:package server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:1:package server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:8:	"github.com/cds-snc/covid-alert-server/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:9:	"github.com/cds-snc/covid-alert-server/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:58:		http.Error(w, "unable to clear diagnosis_keys", http.StatusInternalServerError)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:1:package server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:10:	keyclaim "github.com/cds-snc/covid-alert-server/mocks/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:11:	persistence "github.com/cds-snc/covid-alert-server/mocks/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:12:	"github.com/cds-snc/covid-alert-server/pkg/testhelpers"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:177:	assert.Equal(t, http.StatusInternalServerError, resp.Code, "Internal Server Error Expected")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:1:package server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:11:	"github.com/cds-snc/covid-alert-server/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:12:	pb "github.com/cds-snc/covid-alert-server/pkg/proto/covidshield"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:60:	serverPub := seu.ServerPublicKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:61:	if len(serverPub) != pb.KeyLength {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:63:			ctx, w, err, "server public key was not expected length",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:69:	serverPriv, err := s.db.PrivForPub(serverPub)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:96:	privKey, err := pb.IntoKey(serverPriv)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:99:			ctx, w, err, "server private key was not expected length",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:100:			http.StatusInternalServerError, uploadError(pb.EncryptedUploadResponse_SERVER_ERROR),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:170:			http.StatusInternalServerError, uploadError(pb.EncryptedUploadResponse_SERVER_ERROR),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:180:			http.StatusInternalServerError, uploadError(pb.EncryptedUploadResponse_SERVER_ERROR),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:1:package server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:8:	persistence "github.com/cds-snc/covid-alert-server/mocks/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:9:	persistenceErrors "github.com/cds-snc/covid-alert-server/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:10:	pb "github.com/cds-snc/covid-alert-server/pkg/proto/covidshield"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:11:	"github.com/cds-snc/covid-alert-server/pkg/testhelpers"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:89:	// Server Public cert too short
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:98:	testhelpers.AssertLog(t, hook, 1, logrus.WarnLevel, "server public key was not expected length")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:106:	badServerPub, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:107:	db.On("PrivForPub", badServerPub[:]).Return(nil, fmt.Errorf("No priv cert"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:110:	payload, _ := proto.Marshal(buildUploadRequest(badServerPub[:], nil, nil, nil))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:126:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:127:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:130:	payload, _ := proto.Marshal(buildUploadRequest(goodServerPub[:], make([]byte, 16), nil, nil))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:145:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:146:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:149:	payload, _ := proto.Marshal(buildUploadRequest(goodServerPub[:], make([]byte, 24), make([]byte, 16), nil))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:160:func TestUpload_ServerPrivateCertTooShort(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:164:	goodServerPubBadPriv, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:165:	db.On("PrivForPub", goodServerPubBadPriv[:]).Return(make([]byte, 16), nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:167:	// Server private cert too short
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:168:	payload, _ := proto.Marshal(buildUploadRequest(goodServerPubBadPriv[:], make([]byte, 24), make([]byte, 32), nil))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:174:	assert.True(t, checkUploadResponse(resp.Body.Bytes(), pb.EncryptedUploadResponse_SERVER_ERROR))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:176:	testhelpers.AssertLog(t, hook, 1, logrus.ErrorLevel, "server private key was not expected length")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:184:	badServerPub, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:185:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:187:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:188:	db.On("PrivForPub", badServerPub[:]).Return(nil, fmt.Errorf("No priv cert"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:196:	encrypted := box.Seal(msg[:], []byte("hello world"), &nonce, goodAppPub, badServerPub)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:198:	payload, _ := proto.Marshal(buildUploadRequest(goodServerPub[:], nonce[:], goodAppPub[:], encrypted))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:215:	badServerPub, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:216:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:218:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:219:	db.On("PrivForPub", badServerPub[:]).Return(nil, fmt.Errorf("No priv cert"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:228:	encrypted := box.Seal(msg[:], []byte("hello world"), &nonce, goodAppPub, goodServerPriv)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:230:	payload, _ := proto.Marshal(buildUploadRequest(goodServerPub[:], nonce[:], goodAppPub[:], encrypted))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:244:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:247:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:262:	encrypted := box.Seal(msg[:], marshalledUpload, &nonce, goodServerPub, goodAppPriv)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:264:	payload, _ := proto.Marshal(buildUploadRequest(goodServerPub[:], nonce[:], goodAppPub[:], encrypted))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:280:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:283:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:298:	encrypted := box.Seal(msg[:], marshalledUpload, &nonce, goodServerPub, goodAppPriv)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:300:	payload, _ := proto.Marshal(buildUploadRequest(goodServerPub[:], nonce[:], goodAppPub[:], encrypted))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:316:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:319:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:334:	encrypted := box.Seal(msg[:], marshalledUpload, &nonce, goodServerPub, goodAppPriv)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:336:	payload, _ := proto.Marshal(buildUploadRequest(goodServerPub[:], nonce[:], goodAppPub[:], encrypted))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:352:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:355:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:370:	encrypted := box.Seal(msg[:], marshalledUpload, &nonce, goodServerPub, goodAppPrivKeyUsed)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:372:	payload, _ := proto.Marshal(buildUploadRequest(goodServerPub[:], nonce[:], goodAppPubKeyUsed[:], encrypted))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:388:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:391:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:406:	encrypted := box.Seal(msg[:], marshalledUpload, &nonce, goodServerPub, goodAppPrivDBError)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:408:	payload, _ := proto.Marshal(buildUploadRequest(goodServerPub[:], nonce[:], goodAppPubDBError[:], encrypted))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:414:	assert.True(t, checkUploadResponse(resp.Body.Bytes(), pb.EncryptedUploadResponse_SERVER_ERROR))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:426:	goodServerPubNoKeysRemaining, goodServerPrivNoKeysRemaining, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:428:	db.On("PrivForPub", goodServerPubNoKeysRemaining[:]).Return(goodServerPrivNoKeysRemaining[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:443:	encrypted := box.Seal(msg[:], marshalledUpload, &nonce, goodServerPubNoKeysRemaining, goodAppPrivNoKeysRemaining)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:445:	payload, _ := proto.Marshal(buildUploadRequest(goodServerPubNoKeysRemaining[:], nonce[:], goodAppPubNoKeysRemaining[:], encrypted))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:465:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:468:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:483:	encrypted := box.Seal(msg[:], marshalledUpload, &nonce, goodServerPub, goodAppPriv)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:485:	payload, _ := proto.Marshal(buildUploadRequest(goodServerPub[:], nonce[:], goodAppPub[:], encrypted))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:727:func buildUploadRequest(serverPubKey []byte, nonce []byte, appPublicKey []byte, payload []byte) *pb.EncryptedUploadRequest {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:729:		ServerPublicKey: serverPubKey,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:6:	"github.com/cds-snc/covid-alert-server/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:15:func initSystemStatsObserver(db persistence.Conn) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:21:	var memTotal metric.Int64ValueObserver
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:22:	var memUsedPercent metric.Float64ValueObserver
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:23:	var memUsed metric.Int64ValueObserver
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:24:	var memAvailable metric.Int64ValueObserver
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:25:	var cpuPercent metric.Float64ValueObserver
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:26:	var claimedOneTimeCodesTotalMetric metric.Int64ValueObserver
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:27:	var diagnosisKeysTotalMetric metric.Int64ValueObserver
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:28:	var unclaimedOneTimeCodesTotalMetric metric.Int64ValueObserver
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:30:	cb := metric.Must(meter).NewBatchObserver(func(_ context.Context, result metric.BatchObserverResult) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:47:	memTotal = cb.NewInt64ValueObserver("covidshield.system.memory.total",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:51:	memUsedPercent = cb.NewFloat64ValueObserver("covidshield.system.memory.usedpercent",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:54:	memUsed = cb.NewInt64ValueObserver("covidshield.system.memory.used",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:58:	memAvailable = cb.NewInt64ValueObserver("covidshield.system.memory.free",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:62:	cpuPercent = cb.NewFloat64ValueObserver("covidshield.system.cpu.percent",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:65:	claimedOneTimeCodesTotalMetric = cb.NewInt64ValueObserver("covidshield.app.claimed_one_time_codes.total",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:68:	diagnosisKeysTotalMetric = cb.NewInt64ValueObserver("covidshield.app.diagnosis_keys.total",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:71:	unclaimedOneTimeCodesTotalMetric = cb.NewInt64ValueObserver("covidshield.app.unclaimed_one_time_codes.total",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/telemetry.go:7:	"github.com/cds-snc/covid-alert-server/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/telemetry.go:125:	initSystemStatsObserver(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/timemath/timemath.go:6:	pb "github.com/cds-snc/covid-alert-server/pkg/proto/covidshield"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/timemath/timemath_test.go:7:	pb "github.com/cds-snc/covid-alert-server/pkg/proto/covidshield"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/defs.go:7:	"github.com/cds-snc/covid-alert-server/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:7:	"github.com/cds-snc/covid-alert-server/pkg/config"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:8:	"github.com/cds-snc/covid-alert-server/pkg/persistence"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:11:// corresponding private key) and the returned server_public_key will be kept in
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:24:// KeyClaimResponse is received from the server in response to a
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:26:// server_public_key will be set.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:32:    SERVER_ERROR = 3;
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:38:  optional bytes server_public_key = 2; // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:54:  // server_public_key is provided by the Diagnosis Server to the App, and is
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:57:  optional bytes server_public_key = 1; // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:59:  // application and linked to the server_public_key. These are linked in the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:60:  // Diagnosis Server, so that only one app_public_key is authorized to upload
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:61:  // for a given server_public_key. If a new server_public_key is issued to an App
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:74:// EncryptedUploadResponse is received from the server in response to a
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:83:    SERVER_ERROR = 5;
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:107:// https://developer.apple.com/documentation/exposurenotification/setting_up_an_exposure_notification_server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:126:  // at the server, in UTC seconds.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:157:  // Key version in case the EN server signing key is rotated.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:161:  // the EN server's signing key (for example, the EN server might serve the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:165:  // If a region has more than one MCC, the server can choose
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:215:  // with the EN server's signing key.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:1:# CovidShield Diagnosis Server Protocol
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:9:Diagnosis Server](https://github.com/cds-snc/covid-alert-server) and the soon-to-be-open-sourced COVID
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:16:The Diagnosis Server implements four main endpoints:
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:43:[`examples/new-key-claim`](https://github.com/cds-snc/covid-alert-server/tree/master/examples/new-key-claim).
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:51:[KeyClaimRequest](covidshield.proto). The server responds with a
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:69:[EncryptedUploadRequest](covidshield.proto). The server responds with an
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:86:Duplicate keys will be filtered by the server. Some time on day T+14, the keypairs used for
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:101:number (timestamp / 3600; e.g. `441683`). `currentHour` must agree with the server to within +/- 1
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:120:Diagnosis Key was accepted by the Diagnosis Server, NOT the date for which the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:132:Note that, over time, historical packs will get smaller: the server will prune keys that, at the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:151:[examples/retrieval/app.rb](https://github.com/cds-snc/covid-alert-server/blob/master/examples/retrieval/app.rb).
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:3:# COVID Alert Diagnosis Server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:5:Adapted from <https://github.com/CovidShield/server>
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:7:This repository implements a diagnosis server to use as a server for Apple/Google's [Exposure
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:13:personally-identifiable information is ever stored, and nothing other than IP address is available to the server. No data at all is retained past 21 days. This server is designed to handle
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:38:* **Submitting diagnosis keys**: sharing keys returned from the EN framework with the server.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:40:These two operations are implemented as two separate servers (`key-submission` and `key-retrieval`)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:51:When diagnosis keys are uploaded, the `key-submission` server stores the data defined and required
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:53:server. This submission timestamp is rounded to the nearest hour for privacy preservation (to
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:66:used to determine the risk of a given exposure, is also retrieved from the `key-retrieval` server. A JSON
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:81:Application (once) to the diagnosis server. Encryption keypairs are exchanged by the Application
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:82:and the `key-submission` server to be stored for fourteen days, and the One Time Code is immediately
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:143:This depends on a separate service, holding credentials to talk to this (`key-submission`) server.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:147:languages](https://github.com/cds-snc/covid-alert-server/tree/master/examples/new-key-claim). Most
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:176:COVID Alert uses [OpenTelemetry](https://github.com/open-telemetry/opentelemetry-go) to configure the metrics and tracing for the server, both the key retrieval and key submission.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:198:You will need to edit the configuration file, `prometheus.yml` to add an additional target so it actually polls the metrics coming from the COVID Alert server:
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:225:COVID Alert was originally developed by [volunteers at Shopify](https://www.covidshield.app/). It was [released free of charge under a flexible open-source license](https://github.com/CovidShield/server).
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:233:Adapté à partir de <https://github.com/CovidShield/server> ([voir les modifications](https://github.com/cds-snc/covid-shield-server/blob/master/FORK.md))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:328:Nous avons une implémentation à titre d’exemple dont le code source sera bientôt ouvert. Cependant, nous nous attendons à ce que les autorités sanitaires préfèrent intégrer cette fonctionnalité dans leurs systèmes existants. L’intégration est extrêmement simple, et on dispose [d’exemples en plusieurs languages](https://github.com/cds-snc/covid-alert-server/tree/master/examples/new-key-claim). Au minimum :
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:399:COVID Alert a été développé à l’origine par [des bénévoles de Shopify](https://www.covidshield.app/). Il a été [diffusé gratuitement en vertu d’une licence ouverte flexible](https://github.com/CovidShield/server).
/mnt/c/Users/conig/Desktop/test/covid-alert-server/scripts/heroku_run.sh:23:DATABASE_URL=$db PORT=$PORT /usr/local/bin/server --config_file_path ./
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:15:    assert_fields(resp, error: :UNKNOWN, server_public_key: nil, tries_remaining: maxConsecutiveClaimKeyFailures)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:20:    assert_fields(resp, error: :UNKNOWN, server_public_key: nil, tries_remaining: maxConsecutiveClaimKeyFailures)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:29:    assert_fields(resp, error: :INVALID_ONE_TIME_CODE, server_public_key: nil, tries_remaining: maxConsecutiveClaimKeyFailures - 1, remaining_ban_duration: 0)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:39:    assert_fields(resp, error: :INVALID_KEY, server_public_key: nil, tries_remaining: maxConsecutiveClaimKeyFailures - 1)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:49:    assert_fields(resp, error: :INVALID_KEY, server_public_key: nil, tries_remaining: maxConsecutiveClaimKeyFailures - 1)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:59:    assert_fields(resp, error: :INVALID_KEY, server_public_key: nil, tries_remaining: maxConsecutiveClaimKeyFailures - 1)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:71:      assert_equal(32, kcr.server_public_key.each_byte.size)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:85:    assert_equal(32, kcr.server_public_key.each_byte.size)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:98:    assert_equal(32, kcr.server_public_key.each_byte.size)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:116:      assert_fields(resp, error: :INVALID_ONE_TIME_CODE, server_public_key: nil, tries_remaining: maxConsecutiveClaimKeyFailures - (1 + i), remaining_ban_duration: 0)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:151:    assert_equal(32, kcr.server_public_key.each_byte.size)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:70:    # this doesn't yield until the server returns ok, which doesn't happen
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:72:    Helper.with_server(KEY_RETRIEVAL_SERVER, RETRIEVAL_SERVER_ADDR) { }
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:94:    payload, keyset, server_public: keyset[:server_public], app_private: keyset[:app_private],
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:96:    server_public_to_send: server_public,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:97:    box: RbNaCl::Box.new(server_public, app_private),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:103:      server_public_key: server_public_to_send.to_s,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:16:KEY_SUBMISSION_SERVER = File.expand_path('../../build/debug/key-submission --config_file_path ./', __dir__)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:17:KEY_RETRIEVAL_SERVER = File.expand_path('../../build/debug/key-retrieval  --config_file_path ./', __dir__)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:30:SUBMISSION_SERVER_ADDR = "127.0.0.1:18481"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:31:RETRIEVAL_SERVER_ADDR = "127.0.0.1:18482"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:38:      Helper.with_server_with_pristine_database do |sub_conn, ret_conn|
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:118:      assert_equal(32, kcr.server_public_key.each_byte.size)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:123:        server_public: kcr.server_public_key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:197:    def with_server_with_pristine_database(&block)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:198:      with_pristine_database { with_servers(&block) }
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:201:    def with_servers(&block)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:202:      with_server(KEY_RETRIEVAL_SERVER, RETRIEVAL_SERVER_ADDR) do |ret_conn|
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:203:        with_server(KEY_SUBMISSION_SERVER, SUBMISSION_SERVER_ADDR) do |sub_conn|
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:209:    def with_server(bin, addr, &block)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:227:      sleep(0.1) # Allows the server to run the worker
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:16:      optional :server_public_key, :bytes, 2
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:24:      value :SERVER_ERROR, 3
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:29:      optional :server_public_key, :bytes, 1
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:43:      value :SERVER_ERROR, 5
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_hash_id_test.rb:49:    assert_equal(32, kcr.server_public_key.each_byte.size)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:131:    payload, keyset, server_public: keyset[:server_public], app_private: keyset[:app_private],
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:133:    server_public_to_send: server_public,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:134:    box: RbNaCl::Box.new(server_public, app_private),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:140:      server_public_key: server_public_to_send.to_s,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:44:    # server_public too short
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:45:    req = encrypted_request(dummy_payload, new_valid_keyset, server_public_to_send:("a"*4))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:49:    # server_public too long
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:50:    req = encrypted_request(dummy_payload, new_valid_keyset, server_public_to_send:("a"*50))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:54:    # server_public doesn't resolve to a server_private
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:55:    req = encrypted_request(dummy_payload, new_valid_keyset, server_public_to_send:("a"*32))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:59:    # server_public too short
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:60:    req = encrypted_request(dummy_payload, new_valid_keyset, server_public_to_send:("a"*4))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:64:    # server_public too long
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:65:    req = encrypted_request(dummy_payload, new_valid_keyset, server_public_to_send:("a"*50))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:254:    payload, keyset, server_public: keyset[:server_public], app_private: keyset[:app_private],
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:256:    server_public_to_send: server_public,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:257:    box: RbNaCl::Box.new(server_public, app_private),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:263:      server_public_key: server_public_to_send.to_s,
