/mnt/c/Users/conig/Desktop/test/covid-alert-server/.devcontainer/docker-compose.yml:23:      ECDSA_KEY: 30770201010420a6885a310b694b7bb4ba985459de1e79446dddcd1247c62ece925402b362a110a00a06082a8648ce3d030107a1440342000403eb64f714c4b4ed394331c26c31b7ce7156d00fb28982ad2679a87eaa1a3869802fbeb1d7ee28002762921929c3f7603672d535fcac3d24d57afbb4e2d97f5a
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.devcontainer/docker-compose.yml:24:      KEY_CLAIM_TOKEN: thisisaverylongtoken=TestProvince:12345678901234567890=foobar
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.devcontainer/docker-compose.yml:25:      RETRIEVE_HMAC_KEY: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Binary file /mnt/c/Users/conig/Desktop/test/covid-alert-server/.git/index matches
Binary file /mnt/c/Users/conig/Desktop/test/covid-alert-server/.git/objects/pack/pack-0114be98b3fe31909bf2065d859d0464b1507baa.pack matches
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:22:          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:23:          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:30:      - name: Build Key Retrieval
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:35:          ECR_REPOSITORY: covid-server/key-retrieval
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:36:          COMPONENT: key-retrieval
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:46:      - name: Build Key Submission
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:51:          ECR_REPOSITORY: covid-server/key-submission
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:54:          COMPONENT: key-submission
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:68:          docker push $STG_ECR_REGISTRY/covid-server/key-retrieval:$GITHUB_SHA
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:69:          docker push $STG_ECR_REGISTRY/covid-server/key-retrieval:latest
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:70:          docker push $STG_ECR_REGISTRY/covid-server/key-submission:$GITHUB_SHA
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:71:          docker push $STG_ECR_REGISTRY/covid-server/key-submission:latest
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:82:          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:83:          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:94:          docker push $DEMO_ECR_REGISTRY/covid-server/key-retrieval:$GITHUB_SHA
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:95:          docker push $DEMO_ECR_REGISTRY/covid-server/key-retrieval:latest
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:96:          docker push $DEMO_ECR_REGISTRY/covid-server/key-submission:$GITHUB_SHA
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:97:          docker push $DEMO_ECR_REGISTRY/covid-server/key-submission:latest
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:107:          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:108:          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:119:          docker push $PROD_ECR_REGISTRY/covid-server/key-retrieval:$GITHUB_SHA
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:120:          docker push $PROD_ECR_REGISTRY/covid-server/key-retrieval:latest
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:121:          docker push $PROD_ECR_REGISTRY/covid-server/key-submission:$GITHUB_SHA
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-containers.yml:122:          docker push $PROD_ECR_REGISTRY/covid-server/key-submission:latest
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-monolith.yml:28:          AWS_ACCESS_KEY_ID: ${{ secrets.aws_public_ecr_access_id }}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/build-push-monolith.yml:29:          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ECR_PUBLIC_SECRET_KEY }}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/deploy-containers.yml:18:            SERVICE_NAME: KeyRetrieval
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/deploy-containers.yml:21:            IMAGE_NAME: covid-server/key-retrieval
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/deploy-containers.yml:24:            SERVICE_NAME: KeySubmission
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/deploy-containers.yml:27:            IMAGE_NAME: covid-server/key-submission
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/deploy-containers.yml:51:          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/deploy-containers.yml:52:          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/pr-docker-ci.yml:4:  key-submission:
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/pr-docker-ci.yml:16:  key-retrieval:
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/pr-test-ruby-ci.yml:52:        ECDSA_KEY: 30770201010420a6885a310b694b7bb4ba985459de1e79446dddcd1247c62ece925402b362a110a00a06082a8648ce3d030107a1440342000403eb64f714c4b4ed394331c26c31b7ce7156d00fb28982ad2679a87eaa1a3869802fbeb1d7ee28002762921929c3f7603672d535fcac3d24d57afbb4e2d97f5a
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/pr-test-ruby-ci.yml:53:        KEY_CLAIM_TOKEN: thisisaverylongtoken=302
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/pr-test-ruby-ci.yml:54:        RETRIEVE_HMAC_KEY: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/s3-backup.yml:12:        aws-access-key-id: ${{ secrets.AWS_S3_BACKUP_ACCESS_KEY_ID }}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/s3-backup.yml:13:        aws-secret-access-key: ${{ secrets.AWS_S3_BACKUP_SECRET_ACCESS_KEY }}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.gitignore:1:/key-submission
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.gitignore:2:/key-retrieval
/mnt/c/Users/conig/Desktop/test/covid-alert-server/app.json:6:        "ECDSA_KEY": "30770201010420a6885a310b694b7bb4ba985459de1e79446dddcd1247c62ece925402b362a110a00a06082a8648ce3d030107a1440342000403eb64f714c4b4ed394331c26c31b7ce7156d00fb28982ad2679a87eaa1a3869802fbeb1d7ee28002762921929c3f7603672d535fcac3d24d57afbb4e2d97f5a",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/app.json:7:        "KEY_CLAIM_TOKEN": "thisisaverylongtoken=302",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/app.json:9:        "RETRIEVE_HMAC_KEY": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/clear-diagnosis-keys.sh:16:echo "CLEARING DIAGNOSIS KEYS"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/clear-diagnosis-keys.sh:18:TRUNCATE TABLE server.diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/report.sh:12:| filter @message like \"claim-key\"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/report.sh:31:  | filter @message like \"claim-key\"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:23:  create_key=_descriptor._internal_create_key,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:24:  serialized_pb=b'\n\x11\x63ovidshield.proto\x12\x0b\x63ovidshield\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\"@\n\x0fKeyClaimRequest\x12\x15\n\rone_time_code\x18\x01 \x02(\t\x12\x16\n\x0e\x61pp_public_key\x18\x02 \x02(\x0c\"\xae\x02\n\x10KeyClaimResponse\x12\x36\n\x05\x65rror\x18\x01 \x01(\x0e\x32\'.covidshield.KeyClaimResponse.ErrorCode\x12\x19\n\x11server_public_key\x18\x02 \x01(\x0c\x12\x17\n\x0ftries_remaining\x18\x03 \x01(\r\x12\x39\n\x16remaining_ban_duration\x18\x04 \x01(\x0b\x32\x19.google.protobuf.Duration\"s\n\tErrorCode\x12\x08\n\x04NONE\x10\x00\x12\x0b\n\x07UNKNOWN\x10\x01\x12\x19\n\x15INVALID_ONE_TIME_CODE\x10\x02\x12\x10\n\x0cSERVER_ERROR\x10\x03\x12\x0f\n\x0bINVALID_KEY\x10\x04\x12\x11\n\rTEMPORARY_BAN\x10\x05\"k\n\x16\x45ncryptedUploadRequest\x12\x19\n\x11server_public_key\x18\x01 \x02(\x0c\x12\x16\n\x0e\x61pp_public_key\x18\x02 \x02(\x0c\x12\r\n\x05nonce\x18\x03 \x02(\x0c\x12\x0f\n\x07payload\x18\x04 \x02(\x0c\"\xb3\x03\n\x17\x45ncryptedUploadResponse\x12=\n\x05\x65rror\x18\x01 \x02(\x0e\x32..covidshield.EncryptedUploadResponse.ErrorCode\"\xd8\x02\n\tErrorCode\x12\x08\n\x04NONE\x10\x00\x12\x0b\n\x07UNKNOWN\x10\x01\x12\x13\n\x0fINVALID_KEYPAIR\x10\x02\x12\x15\n\x11\x44\x45\x43RYPTION_FAILED\x10\x03\x12\x13\n\x0fINVALID_PAYLOAD\x10\x04\x12\x10\n\x0cSERVER_ERROR\x10\x05\x12\x1d\n\x19INVALID_CRYPTO_PARAMETERS\x10\x06\x12\x11\n\rTOO_MANY_KEYS\x10\x07\x12\x15\n\x11INVALID_TIMESTAMP\x10\x08\x12\x1a\n\x16INVALID_ROLLING_PERIOD\x10\n\x12\x14\n\x10INVALID_KEY_DATA\x10\x0b\x12)\n%INVALID_ROLLING_START_INTERVAL_NUMBER\x10\x0c\x12#\n\x1fINVALID_TRANSMISSION_RISK_LEVEL\x10\r\x12\x16\n\x12NO_KEYS_IN_PAYLOAD\x10\x0e\"h\n\x06Upload\x12-\n\ttimestamp\x18\x01 \x02(\x0b\x32\x1a.google.protobuf.Timestamp\x12/\n\x04keys\x18\x02 \x03(\x0b\x32!.covidshield.TemporaryExposureKey\"\xe9\x01\n\x1aTemporaryExposureKeyExport\x12\x17\n\x0fstart_timestamp\x18\x01 \x01(\x06\x12\x15\n\rend_timestamp\x18\x02 \x01(\x06\x12\x0e\n\x06region\x18\x03 \x01(\t\x12\x11\n\tbatch_num\x18\x04 \x01(\x05\x12\x12\n\nbatch_size\x18\x05 \x01(\x05\x12\x33\n\x0fsignature_infos\x18\x06 \x03(\x0b\x32\x1a.covidshield.SignatureInfo\x12/\n\x04keys\x18\x07 \x03(\x0b\x32!.covidshield.TemporaryExposureKey\"\x97\x01\n\rSignatureInfo\x12 \n\x18verification_key_version\x18\x03 \x01(\t\x12\x1b\n\x13verification_key_id\x18\x04 \x01(\t\x12\x1b\n\x13signature_algorithm\x18\x05 \x01(\tJ\x04\x08\x01\x10\x02J\x04\x08\x02\x10\x03R\rapp_bundle_idR\x0f\x61ndroid_package\"\x8d\x01\n\x14TemporaryExposureKey\x12\x10\n\x08key_data\x18\x01 \x01(\x0c\x12\x1f\n\x17transmission_risk_level\x18\x02 \x01(\x05\x12%\n\x1drolling_start_interval_number\x18\x03 \x01(\x05\x12\x1b\n\x0erolling_period\x18\x04 \x01(\x05:\x03\x31\x34\x34\"A\n\x10TEKSignatureList\x12-\n\nsignatures\x18\x01 \x03(\x0b\x32\x19.covidshield.TEKSignature\"|\n\x0cTEKSignature\x12\x32\n\x0esignature_info\x18\x01 \x01(\x0b\x32\x1a.covidshield.SignatureInfo\x12\x11\n\tbatch_num\x18\x02 \x01(\x05\x12\x12\n\nbatch_size\x18\x03 \x01(\x05\x12\x11\n\tsignature\x18\x04 \x01(\x0c\x42\x17Z\x15pkg/proto/covidshield'
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:30:_KEYCLAIMRESPONSE_ERRORCODE = _descriptor.EnumDescriptor(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:32:  full_name='covidshield.KeyClaimResponse.ErrorCode',
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:35:  create_key=_descriptor._internal_create_key,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:41:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:46:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:51:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:56:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:58:      name='INVALID_KEY', index=4, number=4,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:61:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:66:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:73:_sym_db.RegisterEnumDescriptor(_KEYCLAIMRESPONSE_ERRORCODE)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:80:  create_key=_descriptor._internal_create_key,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:86:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:91:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:93:      name='INVALID_KEYPAIR', index=2, number=2,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:96:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:101:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:106:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:111:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:116:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:118:      name='TOO_MANY_KEYS', index=7, number=7,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:121:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:126:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:131:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:133:      name='INVALID_KEY_DATA', index=10, number=11,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:136:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:141:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:146:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:148:      name='NO_KEYS_IN_PAYLOAD', index=13, number=14,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:151:      create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:161:_KEYCLAIMREQUEST = _descriptor.Descriptor(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:162:  name='KeyClaimRequest',
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:163:  full_name='covidshield.KeyClaimRequest',
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:167:  create_key=_descriptor._internal_create_key,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:170:      name='one_time_code', full_name='covidshield.KeyClaimRequest.one_time_code', index=0,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:175:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:177:      name='app_public_key', full_name='covidshield.KeyClaimRequest.app_public_key', index=1,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:182:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:200:_KEYCLAIMRESPONSE = _descriptor.Descriptor(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:201:  name='KeyClaimResponse',
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:202:  full_name='covidshield.KeyClaimResponse',
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:206:  create_key=_descriptor._internal_create_key,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:209:      name='error', full_name='covidshield.KeyClaimResponse.error', index=0,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:214:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:216:      name='server_public_key', full_name='covidshield.KeyClaimResponse.server_public_key', index=1,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:221:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:223:      name='tries_remaining', full_name='covidshield.KeyClaimResponse.tries_remaining', index=2,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:228:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:230:      name='remaining_ban_duration', full_name='covidshield.KeyClaimResponse.remaining_ban_duration', index=3,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:235:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:241:    _KEYCLAIMRESPONSE_ERRORCODE,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:260:  create_key=_descriptor._internal_create_key,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:263:      name='server_public_key', full_name='covidshield.EncryptedUploadRequest.server_public_key', index=0,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:268:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:270:      name='app_public_key', full_name='covidshield.EncryptedUploadRequest.app_public_key', index=1,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:275:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:282:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:289:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:313:  create_key=_descriptor._internal_create_key,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:321:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:346:  create_key=_descriptor._internal_create_key,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:354:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:356:      name='keys', full_name='covidshield.Upload.keys', index=1,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:361:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:379:_TEMPORARYEXPOSUREKEYEXPORT = _descriptor.Descriptor(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:380:  name='TemporaryExposureKeyExport',
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:381:  full_name='covidshield.TemporaryExposureKeyExport',
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:385:  create_key=_descriptor._internal_create_key,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:388:      name='start_timestamp', full_name='covidshield.TemporaryExposureKeyExport.start_timestamp', index=0,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:393:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:395:      name='end_timestamp', full_name='covidshield.TemporaryExposureKeyExport.end_timestamp', index=1,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:400:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:402:      name='region', full_name='covidshield.TemporaryExposureKeyExport.region', index=2,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:407:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:409:      name='batch_num', full_name='covidshield.TemporaryExposureKeyExport.batch_num', index=3,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:414:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:416:      name='batch_size', full_name='covidshield.TemporaryExposureKeyExport.batch_size', index=4,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:421:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:423:      name='signature_infos', full_name='covidshield.TemporaryExposureKeyExport.signature_infos', index=5,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:428:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:430:      name='keys', full_name='covidshield.TemporaryExposureKeyExport.keys', index=6,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:435:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:459:  create_key=_descriptor._internal_create_key,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:462:      name='verification_key_version', full_name='covidshield.SignatureInfo.verification_key_version', index=0,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:467:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:469:      name='verification_key_id', full_name='covidshield.SignatureInfo.verification_key_id', index=1,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:474:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:481:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:499:_TEMPORARYEXPOSUREKEY = _descriptor.Descriptor(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:500:  name='TemporaryExposureKey',
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:501:  full_name='covidshield.TemporaryExposureKey',
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:505:  create_key=_descriptor._internal_create_key,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:508:      name='key_data', full_name='covidshield.TemporaryExposureKey.key_data', index=0,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:513:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:515:      name='transmission_risk_level', full_name='covidshield.TemporaryExposureKey.transmission_risk_level', index=1,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:520:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:522:      name='rolling_start_interval_number', full_name='covidshield.TemporaryExposureKey.rolling_start_interval_number', index=2,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:527:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:529:      name='rolling_period', full_name='covidshield.TemporaryExposureKey.rolling_period', index=3,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:534:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:558:  create_key=_descriptor._internal_create_key,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:566:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:590:  create_key=_descriptor._internal_create_key,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:598:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:605:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:612:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:619:      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:636:_KEYCLAIMRESPONSE.fields_by_name['error'].enum_type = _KEYCLAIMRESPONSE_ERRORCODE
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:637:_KEYCLAIMRESPONSE.fields_by_name['remaining_ban_duration'].message_type = google_dot_protobuf_dot_duration__pb2._DURATION
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:638:_KEYCLAIMRESPONSE_ERRORCODE.containing_type = _KEYCLAIMRESPONSE
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:642:_UPLOAD.fields_by_name['keys'].message_type = _TEMPORARYEXPOSUREKEY
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:643:_TEMPORARYEXPOSUREKEYEXPORT.fields_by_name['signature_infos'].message_type = _SIGNATUREINFO
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:644:_TEMPORARYEXPOSUREKEYEXPORT.fields_by_name['keys'].message_type = _TEMPORARYEXPOSUREKEY
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:647:DESCRIPTOR.message_types_by_name['KeyClaimRequest'] = _KEYCLAIMREQUEST
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:648:DESCRIPTOR.message_types_by_name['KeyClaimResponse'] = _KEYCLAIMRESPONSE
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:652:DESCRIPTOR.message_types_by_name['TemporaryExposureKeyExport'] = _TEMPORARYEXPOSUREKEYEXPORT
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:654:DESCRIPTOR.message_types_by_name['TemporaryExposureKey'] = _TEMPORARYEXPOSUREKEY
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:659:KeyClaimRequest = _reflection.GeneratedProtocolMessageType('KeyClaimRequest', (_message.Message,), {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:660:  'DESCRIPTOR' : _KEYCLAIMREQUEST,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:662:  # @@protoc_insertion_point(class_scope:covidshield.KeyClaimRequest)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:664:_sym_db.RegisterMessage(KeyClaimRequest)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:666:KeyClaimResponse = _reflection.GeneratedProtocolMessageType('KeyClaimResponse', (_message.Message,), {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:667:  'DESCRIPTOR' : _KEYCLAIMRESPONSE,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:669:  # @@protoc_insertion_point(class_scope:covidshield.KeyClaimResponse)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:671:_sym_db.RegisterMessage(KeyClaimResponse)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:694:TemporaryExposureKeyExport = _reflection.GeneratedProtocolMessageType('TemporaryExposureKeyExport', (_message.Message,), {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:695:  'DESCRIPTOR' : _TEMPORARYEXPOSUREKEYEXPORT,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:697:  # @@protoc_insertion_point(class_scope:covidshield.TemporaryExposureKeyExport)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:699:_sym_db.RegisterMessage(TemporaryExposureKeyExport)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:708:TemporaryExposureKey = _reflection.GeneratedProtocolMessageType('TemporaryExposureKey', (_message.Message,), {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:709:  'DESCRIPTOR' : _TEMPORARYEXPOSUREKEY,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:711:  # @@protoc_insertion_point(class_scope:covidshield.TemporaryExposureKey)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:713:_sym_db.RegisterMessage(TemporaryExposureKey)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:9:from nacl.public import PrivateKey, Box, PublicKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:14:retrieve_hmac_key = os.environ['QA_HMAC']
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:15:ecdsa_key = os.environ['QA_ECDSA_KEY']
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:18:# retrieve_hmac_key = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:19:# ecdsa_key = '30770201010420a6885a310b694b7bb4ba985459de1e79446dddcd1247c62ece925402b362a110a00a06082a8648ce3d030107a1440342000403eb64f714c4b4ed394331c26c31b7ce7156d00fb28982ad2679a87eaa1a3869802fbeb1d7ee28002762921929c3f7603672d535fcac3d24d57afbb4e2d97f5a'
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:27:app_priv_key = PrivateKey.generate()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:28:app_key = bytes(app_priv_key.public_key)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:30:start_key_num = 1
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:34:    keys = []
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:37:        tek = TemporaryExposureKey()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:38:        tek.key_data = nacl.utils.random(16)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:42:        keys.append(tek) 
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:43:    return keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:45:# Submits a list of keys to the server
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:46:def submit(srv_pub, keys):
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:47:    global app_priv_key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:48:    global app_key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:56:    ep_req.server_public_key = srv_pub
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:57:    ep_req.app_public_key = app_key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:63:    for key in keys:
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:64:        k = upload.keys.add()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:65:        k.key_data = key.key_data
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:66:        k.transmission_risk_level = key.transmission_risk_level
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:67:        k.rolling_start_interval_number = key.rolling_start_interval_number
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:68:        k.rolling_period = key.rolling_period
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:71:    upload_box = Box(app_priv_key, PublicKey(srv_pub))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:83:# Generate a new key claim token
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:84:def gen_key_claim_token() -> str:
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:89:    # url = base_url + submit_port + '/new-key-claim'
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:90:    url = 'https://submission.wild-samphire.cdssandbox.xyz/new-key-claim'
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:99:def claim_key(otc) -> str:
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:100:    global app_key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:101:    global app_priv_key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:103:    url = 'https://submission.wild-samphire.cdssandbox.xyz/claim-key'
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:104:    # url = base_url + submit_port + '/claim-key'
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:106:    kc_req = KeyClaimRequest()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:108:    kc_req.app_public_key = app_key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:114:    kc_resp = KeyClaimResponse()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:117:    return kc_resp.server_public_key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:119:def stuff_key(): 
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:120:    otc = gen_key_claim_token()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:121:    srv_pub = claim_key(otc)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:123:    # # Submit 14 keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:128:        mp.Process(target=stuff_key).start()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/cmd/generate-ecdsa-private-key/main.go:13:	privateKey, err := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/cmd/generate-ecdsa-private-key/main.go:17:	data, err := x509.MarshalECPrivateKey(privateKey)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config/infrastructure/aws/README.md:5:This document describes how to deploy and operate a **reference implementation** of the Covid Shield web portal, along with the diagnosis key retrieval and submission services on [AWS](https://aws.amazon.com/).
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config/infrastructure/aws/README.md:9:At a glance, health care professionals (on the left) interact with a web portal, and mobile app users (on the right) interact with the diagnosis key retrieval and submission services.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config/infrastructure/aws/README.md:43:- `AWS_ACCESS_KEY_ID`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config/infrastructure/aws/README.md:44:- `AWS_SECRET_ACCESS_KEY_ID`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config/infrastructure/aws/README.md:56:- `TF_VAR_ecs_task_key_retrieval_env_ecdsa_key`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config/infrastructure/aws/README.md:57:- `TF_VAR_ecs_task_key_retrieval_env_hmac_key`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config/infrastructure/aws/README.md:58:- `TF_VAR_ecs_task_key_submission_env_key_claim_token`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config/infrastructure/aws/README.md:62:- `TF_VAR_new_key_claim_allow_list` (use ["0.0.0.0/1", "128.0.0.0/1"] for any)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config/infrastructure/aws/README.md:66:There is an optional Terraform variable that can be set to control which container to deploy. It should match a container tag that both Key Retrieval & Key Submission share. By default Terraform will deploy the latest commit on the master branch.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config/infrastructure/aws/README.md:73:> TF_VAR_ecs_task_key_retrieval_env_ecdsa_key="******" TF_VAR_ecs_task_key_retrieval_env_hmac_key="******" TF_VAR_ecs_task_key_submission_env_key_claim_token="******" TF_VAR_rds_backend_db_password="******" AWS_ACCESS_KEY_ID="******" AWS_SECRET_ACCESS_KEY="******" terraform [init|plan|apply]
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config.yaml:5:maxConsecutiveClaimKeyFailures: 50
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config.yaml:6:claimKeyBanDuration: 1
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config.yaml:10:maxDiagnosisKeyRetentionDays: 15
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config.yaml:12:# A generated keypair can upload up to 43 keys (15 on day 1, plus 2 for 14 subsequent days
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config.yaml:14:initialRemainingKeys: 43
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config.yaml:17:# When we assign an Application Public Key to a server keypair, we reset the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config.yaml:20:# From that timestamp, the Application may submit keys for up to 15 days,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config.yaml:21:# which really means they should submit keys for up to 14 days.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config.yaml:22:encryptionKeyValidityDays: 15
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config.yaml:27:hmacKeyLength: 32
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:64:export KEY_CLAIM_TOKEN=thisisatoken=302
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:66:./build/release/key-retrieval migrate-db
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:68:PORT=8000 ./build/release/key-submission
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:69:PORT=8001 ./build/release/key-retrieval
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:163:export KEY_CLAIM_TOKEN=thisisatoken=302
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:165:./build/release/key-retrieval migrate-db
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:167:PORT=8000 ./build/release/key-submission
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:168:PORT=8001 ./build/release/key-retrieval
/mnt/c/Users/conig/Desktop/test/covid-alert-server/docker-compose.yml:14:  key-retrieval:
/mnt/c/Users/conig/Desktop/test/covid-alert-server/docker-compose.yml:20:        component: key-retrieval
/mnt/c/Users/conig/Desktop/test/covid-alert-server/docker-compose.yml:29:      ECDSA_KEY: 30770201010420a6885a310b694b7bb4ba985459de1e79446dddcd1247c62ece925402b362a110a00a06082a8648ce3d030107a1440342000403eb64f714c4b4ed394331c26c31b7ce7156d00fb28982ad2679a87eaa1a3869802fbeb1d7ee28002762921929c3f7603672d535fcac3d24d57afbb4e2d97f5a
/mnt/c/Users/conig/Desktop/test/covid-alert-server/docker-compose.yml:31:      RETRIEVE_HMAC_KEY: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
/mnt/c/Users/conig/Desktop/test/covid-alert-server/docker-compose.yml:34:      KEY_CLAIM_TOKEN: thisisaverylongtoken=TestProvince
/mnt/c/Users/conig/Desktop/test/covid-alert-server/docker-compose.yml:35:  key-submission:
/mnt/c/Users/conig/Desktop/test/covid-alert-server/docker-compose.yml:41:        component: key-submission
/mnt/c/Users/conig/Desktop/test/covid-alert-server/docker-compose.yml:55:      KEY_CLAIM_TOKEN: thisisaverylongtoken=TestProvince
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Dockerfile:6:ARG component=${component:-key-retrieval}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Dockerfile.heroku:6:ARG component=${component:-key-retrieval}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/new-key-claim/curl.sh:12:curl -XPOST -H "Authorization: Bearer ${TOKEN}" "${URL_BASE}/new-key-claim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/new-key-claim/node.js:4:  const url = new URL("http://127.0.0.1:8000/new-key-claim");
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/new-key-claim/node.js:13:      Authorization: `Bearer ${process.env.KEY_CLAIM_TOKEN}`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/new-key-claim/php.php:3:    $server_url = 'http://127.0.0.1:8000/new-key-claim';
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/new-key-claim/php.php:6:        'header' => 'Authorization: Bearer ' . $_ENV['KEY_CLAIM_TOKEN'],
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/new-key-claim/readme.md:3:Receiving a new key is a simple HTTP call to the server with an Authentication header. This should be straightforward to implement as part of any public health worker system. Please note to keep the authentication token secret and avoid exposing generated keys to people who have not have had COVID positive test results
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/new-key-claim/readme.md:9:curl -XPOST -H "Authorization: Bearer ${TOKEN}" "${URL_BASE}/new-key-claim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/new-key-claim/ruby.rb:5:  SERVER_URI = URI.parse('http://127.0.0.1:8000/new-key-claim')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/new-key-claim/ruby.rb:6:  TOKEN = ENV.fetch('KEY_CLAIM_TOKEN')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/retrieval/app.rb:37:  KEY_RETRIEVAL_URL = "http://127.0.0.1:8001"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/retrieval/app.rb:45:    maybe_fetch_new_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/retrieval/app.rb:54:      maybe_fetch_new_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/retrieval/app.rb:60:  def maybe_fetch_new_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/retrieval/app.rb:61:    puts "maybe fetching new keys"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/retrieval/app.rb:65:    fetch_new_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/retrieval/app.rb:68:    # more sense than after every key fetch
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/retrieval/app.rb:80:  def fetch_new_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/retrieval/app.rb:81:    puts "fetching new keys"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/retrieval/app.rb:106:      keys = send_to_framework(resp)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/retrieval/app.rb:126:    "#{KEY_RETRIEVAL_URL}/exposure-configuration/#{region}.json"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/retrieval/app.rb:131:    key = [ENV.fetch("RETRIEVE_HMAC_KEY")].pack("H*")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/retrieval/app.rb:132:    hmac = OpenSSL::HMAC.hexdigest("SHA256", key, message)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/retrieval/app.rb:133:    "#{KEY_RETRIEVAL_URL}/retrieve/#{REGION}/#{date_number}/#{hmac}"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/retrieval/README.md:3:This is an example implementation of a client for the `key-retrieval` service, correctly implementing
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:11:cloud.google.com/go/datastore v1.0.0/go.mod h1:LXYbyblFSglQ5pkeyhO+Qmw7ukd3C+pD7TKLgZqpHYE=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:251:github.com/prometheus/common v0.9.1 h1:KOMtN28tlbam3/7ZKEYKHhKoJZYYj3gMH4uc62x7X7U=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/heroku.yml:9:    ECDSA_KEY: 30770201010420a6885a310b694b7bb4ba985459de1e79446dddcd1247c62ece925402b362a110a00a06082a8648ce3d030107a1440342000403eb64f714c4b4ed394331c26c31b7ce7156d00fb28982ad2679a87eaa1a3869802fbeb1d7ee28002762921929c3f7603672d535fcac3d24d57afbb4e2d97f5a
/mnt/c/Users/conig/Desktop/test/covid-alert-server/heroku.yml:10:    KEY_CLAIM_TOKEN: thisisaverylongtoken=302
/mnt/c/Users/conig/Desktop/test/covid-alert-server/heroku.yml:12:    RETRIEVE_HMAC_KEY: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Makefile:3:CMDS := key-submission key-retrieval monolith
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:21:// CheckClaimKeyBan provides a mock function with given fields: _a0
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:22:func (_m *Conn) CheckClaimKeyBan(_a0 string) (int, time.Duration, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:49:// ClaimKey provides a mock function with given fields: _a0, _a1, _a2
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:50:func (_m *Conn) ClaimKey(_a0 string, _a1 []byte, _a2 context.Context) ([]byte, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:72:// ClaimKeyFailure provides a mock function with given fields: _a0
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:73:func (_m *Conn) ClaimKeyFailure(_a0 string) (int, time.Duration, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:100:// ClaimKeySuccess provides a mock function with given fields: _a0
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:101:func (_m *Conn) ClaimKeySuccess(_a0 string) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:114:// ClearDiagnosisKeys provides a mock function with given fields: _a0
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:115:func (_m *Conn) ClearDiagnosisKeys(_a0 context.Context) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:163:// CountDiagnosisKeys provides a mock function with given fields:
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:164:func (_m *Conn) CountDiagnosisKeys() (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:205:// DeleteExhaustedKeys provides a mock function with given fields: _a0
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:206:func (_m *Conn) DeleteExhaustedKeys(_a0 context.Context) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:226:// DeleteExpiredKeys provides a mock function with given fields: _a0
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:227:func (_m *Conn) DeleteExpiredKeys(_a0 context.Context) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:247:// DeleteOldDiagnosisKeys provides a mock function with given fields:
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:248:func (_m *Conn) DeleteOldDiagnosisKeys() (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:268:// DeleteOldFailedClaimKeyAttempts provides a mock function with given fields:
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:269:func (_m *Conn) DeleteOldFailedClaimKeyAttempts() (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:289:// DeleteUnclaimedKeys provides a mock function with given fields: _a0
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:290:func (_m *Conn) DeleteUnclaimedKeys(_a0 context.Context) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:310:// FetchKeysForHours provides a mock function with given fields: _a0, _a1, _a2, _a3
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:311:func (_m *Conn) FetchKeysForHours(_a0 string, _a1 uint32, _a2 uint32, _a3 int32) ([]*covidshield.TemporaryExposureKey, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:314:	var r0 []*covidshield.TemporaryExposureKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:315:	if rf, ok := ret.Get(0).(func(string, uint32, uint32, int32) []*covidshield.TemporaryExposureKey); ok {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:319:			r0 = ret.Get(0).([]*covidshield.TemporaryExposureKey)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:402:// NewKeyClaim provides a mock function with given fields: _a0, _a1, _a2, _a3
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:403:func (_m *Conn) NewKeyClaim(_a0 context.Context, _a1 string, _a2 string, _a3 string) (string, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:446:// StoreKeys provides a mock function with given fields: _a0, _a1, _a2
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:447:func (_m *Conn) StoreKeys(_a0 *[32]byte, _a1 []*covidshield.TemporaryExposureKey, _a2 context.Context) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/mocks/pkg/persistence/Conn.go:451:	if rf, ok := ret.Get(0).(func(*[32]byte, []*covidshield.TemporaryExposureKey, context.Context) error); ok {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:369:    "camelcase-keys": {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:371:      "resolved": "https://registry.npmjs.org/camelcase-keys/-/camelcase-keys-6.2.2.tgz",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:499:    "decamelize-keys": {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:501:      "resolved": "https://registry.npmjs.org/decamelize-keys/-/decamelize-keys-1.1.0.tgz",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:839:        "camelcase-keys": "^6.2.2",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:840:        "decamelize-keys": "^1.1.0",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:13:	"github.com/cds-snc/covid-alert-server/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:22:	lookup keyclaim.Authenticator
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:39:	lookup = keyclaim.NewAuthenticator()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:50:func checkEnvironmentVariable(key string) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:52:	uname, ok := os.LookupEnv(key)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:55:		panic(fmt.Sprintf("%s was not set", key))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:59:		panic(fmt.Sprintf("%s is too short needs to be >= 10 characters", key))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:68:	a.servlets = append(a.servlets, server.NewKeyClaimServlet(a.database, lookup))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:17:	MaxConsecutiveClaimKeyFailures     int
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:18:	ClaimKeyBanDuration                uint32
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:19:	MaxDiagnosisKeyRetentionDays       uint32
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:20:	InitialRemainingKeys               uint32
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:21:	EncryptionKeyValidityDays          uint32
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:24:	HmacKeyLength                      int
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:56:	viper.SetDefault("maxConsecutiveClaimKeyFailures", 50)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:57:	viper.SetDefault("claimKeyBanDuration", 1)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:58:	viper.SetDefault("maxDiagnosisKeyRetentionDays", 15)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:59:	viper.SetDefault("initialRemainingKeys", 28)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:60:	viper.SetDefault("encryptionKeyValidityDays", 15)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:63:	viper.SetDefault("hmacKeyLength", 32)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator.go:1:package keyclaim
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator.go:20:// These are two keys with region IDs 1 and 2 respectively. Keys should be much
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator.go:24:	tokens := os.Getenv("KEY_CLAIM_TOKEN")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator.go:26:		panic("no KEY_CLAIM_TOKEN")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator.go:32:			panic("invalid KEY_CLAIM_TOKEN")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:1:package keyclaim
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:18:	os.Setenv("KEY_CLAIM_TOKEN", "")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:19:	assert.PanicsWithValue(t, "no KEY_CLAIM_TOKEN", func() { NewAuthenticator() }, "KEY_CLAIM_TOKEN needs to be defined")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:21:	os.Setenv("KEY_CLAIM_TOKEN", "foobaz")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:22:	assert.PanicsWithValue(t, "invalid KEY_CLAIM_TOKEN", func() { NewAuthenticator() }, "KEY_CLAIM_TOKEN must include a `=` and have "+fmt.Sprint(config.AppConstants.AssignmentParts)+"parts")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:24:	os.Setenv("KEY_CLAIM_TOKEN", strings.Repeat("a", 64)+"=302")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:25:	assert.PanicsWithValue(t, "token too long", func() { NewAuthenticator() }, "KEY_CLAIM_TOKEN must include secret that is at less than 64 characters long")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:27:	os.Setenv("KEY_CLAIM_TOKEN", strings.Repeat("a", 19)+"=302")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:28:	assert.PanicsWithValue(t, "token too short", func() { NewAuthenticator() }, "KEY_CLAIM_TOKEN must include secret that is at least 20 characters long")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:30:	os.Setenv("KEY_CLAIM_TOKEN", strings.Repeat("a", 20)+"="+strings.Repeat("a", 32))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:31:	assert.PanicsWithValue(t, "region too long", func() { NewAuthenticator() }, "KEY_CLAIM_TOKEN must include a region that is less than 32 characters long")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:38:	os.Setenv("KEY_CLAIM_TOKEN", strings.Repeat("a", 20)+"=302:"+strings.Repeat("b", 20)+"=302")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:45:	os.Setenv("KEY_CLAIM_TOKEN", strings.Repeat("a", 20)+"=302:"+strings.Repeat("b", 20)+"=302")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:23:// ErrTooManyKeys is returned when the client tries to insert one or more keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:24:// past their limit, assigned on keypair creation. The entire batch is rejected.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:25:var ErrTooManyKeys = errors.New("key limit for keypair exceeded")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:31:	// Return keys that were SUBMITTED to the Diagnosis Server during the specified
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:34:	// Only returns keys that correspond to a Key for a date
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:36:	FetchKeysForHours(string, uint32, uint32, int32) ([]*pb.TemporaryExposureKey, error)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:38:	StoreKeys(*[32]byte, []*pb.TemporaryExposureKey, context.Context) error
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:39:	NewKeyClaim(context.Context, string, string, string) (string, error)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:40:	ClaimKey(string, []byte, context.Context) ([]byte, error)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:43:	CheckClaimKeyBan(string) (triesRemaining int, banDuration time.Duration, err error)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:44:	ClaimKeySuccess(string) error
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:45:	ClaimKeyFailure(string) (triesRemaining int, banDuration time.Duration, err error)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:47:	DeleteOldDiagnosisKeys() (int64, error)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:48:	DeleteUnclaimedKeys(context.Context) (int64, error)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:49:	DeleteExhaustedKeys(context.Context) (int64, error)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:50:	DeleteExpiredKeys(context.Context) (int64, error)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:51:	DeleteOldFailedClaimKeyAttempts() (int64, error)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:54:	CountDiagnosisKeys() (int64, error)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:61:	ClearDiagnosisKeys(context.Context) error
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:123:func (c *conn) DeleteOldDiagnosisKeys() (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:124:	return deleteOldDiagnosisKeys(c.db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:127:func (c *conn) DeleteExpiredKeys(ctx context.Context) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:128:	return deleteExpiredKeys(ctx, c.db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:131:func (c *conn) DeleteExhaustedKeys(ctx context.Context) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:132:	return deleteExhaustedKeys(ctx, c.db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:135:func (c *conn) DeleteUnclaimedKeys(ctx context.Context) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:136:	return deleteUnclaimedKeys(ctx, c.db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:144:var ErrKeyConsumed = errors.New("keypair has uploaded maximum number of diagnosis keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:146:var ErrInvalidKeyFormat = errors.New("argument had wrong size")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:148:var ErrDuplicateKey = errors.New("key is already registered")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:152:func (c *conn) ClaimKey(oneTimeCode string, appPublicKey []byte, ctx context.Context) ([]byte, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:153:	if len(appPublicKey) != pb.KeyLength {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:154:		return nil, ErrInvalidKeyFormat
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:156:	return claimKey(c.db, oneTimeCode, appPublicKey, ctx)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:163:func (c *conn) NewKeyClaim(ctx context.Context, region, originator, hashID string) (string, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:166:	pub, priv, err := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:182:			err = persistEncryptionKeyWithHashID(c.db, region, originator, hashID, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:184:			err = persistEncryptionKey(c.db, region, originator, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:188:			c.saveNewKeyClaimEvent(ctx, originator, regenerated)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:206:func (c *conn) saveNewKeyClaimEvent(ctx context.Context, originator string, regenerated bool) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:278:	if len(pub) != pb.KeyLength {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:279:		return nil, ErrInvalidKeyFormat
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:293:func (c *conn) StoreKeys(appPubKey *[32]byte, keys []*pb.TemporaryExposureKey, ctx context.Context) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:294:	return registerDiagnosisKeys(c.db, appPubKey, keys, ctx)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:297:func (c *conn) FetchKeysForHours(region string, startHour uint32, endHour uint32, currentRSIN int32) ([]*pb.TemporaryExposureKey, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:298:	rows, err := diagnosisKeysForHours(c.db, region, startHour, endHour, currentRSIN)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:302:	return handleKeysRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:305:func handleKeysRows(rows *sql.Rows) ([]*pb.TemporaryExposureKey, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:306:	var keys []*pb.TemporaryExposureKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:309:		var key []byte
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:314:		err := rows.Scan(&region, &key, &rollingStartIntervalNumber, &rollingPeriod, &transmissionRiskLevel)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:321:		keys = append(keys, &pb.TemporaryExposureKey{
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:322:			KeyData:                    key,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:326:			ReportType:                 pb.TemporaryExposureKey_CONFIRMED_TEST.Enum(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:332:	return keys, nil
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:335:func (c *conn) CheckClaimKeyBan(identifier string) (triesRemaining int, banDuration time.Duration, err error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:336:	return checkClaimKeyBan(c.db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:339:func (c *conn) ClaimKeySuccess(identifier string) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:340:	return registerClaimKeySuccess(c.db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:343:func (c *conn) ClaimKeyFailure(identifier string) (int, time.Duration, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:344:	return registerClaimKeyFailure(c.db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:347:func (c *conn) DeleteOldFailedClaimKeyAttempts() (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:348:	return deleteOldFailedClaimKeyAttempts(c.db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:355:func (c *conn) CountDiagnosisKeys() (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:356:	return countDiagnosisKeys(c.db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:34:func TestDBDeleteOldDiagnosisKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:46:	receivedResult, receivedError := conn.DeleteOldDiagnosisKeys()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:52:func TestDBDeleteOldExpiredKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:63:	mock.ExpectQuery(fmt.Sprintf(`SELECT originator, COUNT(*) FROM encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:65:		GROUP BY encryption_keys.originator`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:66:		config.AppConstants.EncryptionKeyValidityDays),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:68:	mock.ExpectQuery(fmt.Sprintf(`SELECT originator, COUNT(*) FROM encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:69:		WHERE  (created < (NOW() - INTERVAL %d DAY)) AND remaining_keys = %d
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:70:		GROUP BY encryption_keys.originator`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:72:		config.AppConstants.InitialRemainingKeys),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:77:	receivedResult, receivedError := conn.DeleteExpiredKeys(context.Background())
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:84:func TestDBDeleteOldUnclaimedKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:97:		SELECT originator, count(*) FROM encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:98:		WHERE  ((created < (NOW() - INTERVAL %d MINUTE)) AND app_public_key IS NULL)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:99:		GROUP BY encryption_keys.originator `,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:105:	receivedResult, receivedError := conn.DeleteUnclaimedKeys(context.Background())
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:112:func TestDBDeleteOldExhaustedKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:124:		SELECT originator, COUNT(*) FROM encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:125:		WHERE  remaining_keys = 0
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:126:		GROUP BY encryption_keys.originator`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:131:	receivedResult, receivedError := conn.DeleteExhaustedKeys(context.Background())
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:137:func TestDBClaimKey(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:145:	pub, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:148:	// App key to short
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:149:	receivedResult, receivedError := conn.ClaimKey(oneTimeCode, make([]byte, 8), nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:150:	assert.Equal(t, receivedError, ErrInvalidKeyFormat)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:156:	mock.ExpectQuery(`SELECT COUNT(*) FROM encryption_keys WHERE app_public_key = ?`).WithArgs(pub[:]).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:161:	mock.ExpectQuery(`SELECT created, originator FROM encryption_keys WHERE one_time_code = ?`).WithArgs(oneTimeCode).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:165:	query := `UPDATE encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:167:			app_public_key = ?,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:182:	rows = sqlmock.NewRows([]string{"server_public_key"}).AddRow(pub[:])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:183:	mock.ExpectPrepare(`SELECT server_public_key FROM encryption_keys WHERE app_public_key = ?`).ExpectQuery().WithArgs(pub[:]).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:188:	receivedResult, receivedError = conn.ClaimKey(oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:219:		`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:220:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:227:		config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:240:	receivedResult, receivedError := conn.NewKeyClaim(context.TODO(), region, originator, "")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:270:		`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:271:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:278:		config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:281:	receivedResult, receivedError := conn.NewKeyClaim(context.TODO(), region, originator, "")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:313:		`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:314:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:321:		config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:325:		`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:326:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:333:		config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:347:	receivedResult, receivedError := conn.NewKeyClaim(context.TODO(), region, originator, "")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:381:			`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:382:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:389:			config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:393:	receivedResult, receivedError := conn.NewKeyClaim(context.TODO(), region, originator, "")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:428:		`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:429:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:437:		config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:438:	).WillReturnError(fmt.Errorf("for key 'hash_id"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:442:		`SELECT one_time_code FROM encryption_keys WHERE hash_id = ? FOR UPDATE`).WithArgs(hashID).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:443:	mock.ExpectExec(`DELETE FROM encryption_keys WHERE hash_id = ? AND one_time_code IS NOT NULL`).WithArgs(hashID).WillReturnResult(sqlmock.NewResult(1, 1))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:446:		`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:447:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:455:		config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:468:	receivedResult, receivedError := conn.NewKeyClaim(context.TODO(), region, originator, hashID)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:502:		`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:503:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:511:		config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:512:	).WillReturnError(fmt.Errorf("for key 'hash_id"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:516:		`SELECT one_time_code FROM encryption_keys WHERE hash_id = ? FOR UPDATE`).WithArgs(hashID).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:518:	receivedResult, receivedError := conn.NewKeyClaim(context.TODO(), region, originator, hashID)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:533:	pub, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:535:	rows := sqlmock.NewRows([]string{"server_private_key"}).AddRow(pub[:])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:549:	assert.Equal(t, ErrInvalidKeyFormat, receivedError)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:552:	rows = sqlmock.NewRows([]string{"server_private_key"})
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:561:	rows = sqlmock.NewRows([]string{"server_private_key"})
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:570:func TestDBStoreKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:578:	pub, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:582:	keyOne := randomTestKey()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:583:	keyTwo := randomTestKey()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:584:	keys := []*pb.TemporaryExposureKey{keyOne, keyTwo}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:589:	row := sqlmock.NewRows([]string{"region", "originator", "remaining_keys"}).AddRow("302", "randomOrigin", 3)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:590:	mock.ExpectQuery(`SELECT region, originator, remaining_keys FROM encryption_keys WHERE app_public_key = ? FOR UPDATE`).WillReturnRows(row)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:593:		`INSERT IGNORE INTO diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:594:		(region, originator, key_data, rolling_start_interval_number, rolling_period, transmission_risk_level, hour_of_submission)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:598:	for _, key := range keys {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:599:		mock.ExpectExec(`INSERT IGNORE INTO diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:600:		(region, originator, key_data, rolling_start_interval_number, rolling_period, transmission_risk_level, hour_of_submission)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:604:			key.GetKeyData(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:605:			key.GetRollingStartIntervalNumber(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:606:			key.GetRollingPeriod(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:607:			key.GetTransmissionRiskLevel(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:619:		len(keys),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:624:		`UPDATE encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:625:	SET remaining_keys = remaining_keys - ?
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:626:	WHERE remaining_keys >= ?
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:627:	AND app_public_key = ?`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:629:		len(keys),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:630:		len(keys),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:635:	receivedResult := conn.StoreKeys(pub, keys, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:641:	assert.Nil(t, receivedResult, "Expected nil when keys are commited")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:644:func TestDBFetchKeysForHours(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:660:	row := sqlmock.NewRows([]string{"region", "key_data", "rolling_start_interval_number", "rolling_period", "transmission_risk_level"}).AddRow("302", []byte{}, 2651450, 144, 4)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:664:	expectedResult := []*pb.TemporaryExposureKey{
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:665:		&pb.TemporaryExposureKey{
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:666:			KeyData:                    []byte{},
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:670:			ReportType:                 pb.TemporaryExposureKey_CONFIRMED_TEST.Enum(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:675:	receivedResult, _ := conn.FetchKeysForHours(region, startHour, endHour, currentRollingStartIntervalNumber)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:686:	_, receivedError := conn.FetchKeysForHours(region, startHour, endHour, currentRollingStartIntervalNumber)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:691:func TestDBCheckClaimKeyBan(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:703:	mock.ExpectQuery(`SELECT failures, last_failure FROM failed_key_claim_attempts WHERE identifier = ?`).WithArgs(identifier).WillReturnRows(row)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:705:	expectedTriesRemaining := config.AppConstants.MaxConsecutiveClaimKeyFailures
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:708:	receivedTriesRemaining, receivedBanDuration, _ := conn.CheckClaimKeyBan(identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:714:	assert.Equal(t, expectedTriesRemaining, receivedTriesRemaining, "Expected config.AppConstants.MaxConsecutiveClaimKeyFailures as tries remaining")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:718:func TestDBClaimKeySuccess(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:728:	receivedError := conn.ClaimKeySuccess("127.0.0.1")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:733:func TestDBClaimKeyFailure(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:745:		`INSERT INTO failed_key_claim_attempts (identifier) VALUES (?)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:746:		ON DUPLICATE KEY UPDATE
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:752:	//--> Called in checkClaimKeyBan
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:754:	mock.ExpectQuery(`SELECT failures, last_failure FROM failed_key_claim_attempts WHERE identifier = ?`).WithArgs(identifier).WillReturnRows(row)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:758:	expectedTriesRemaining := config.AppConstants.MaxConsecutiveClaimKeyFailures - 1
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:761:	receivedTriesRemaining, receivedBanDuration, receivedErr := conn.ClaimKeyFailure(identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:767:	assert.Equal(t, expectedTriesRemaining, receivedTriesRemaining, "Expected maxConsecutiveClaimKeyFailures - 1 as tries remaining")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:772:func TestDBDeleteOldFailedClaimKeyAttempts(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:783:	receivedResult, receivedError := conn.DeleteOldFailedClaimKeyAttempts()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:807:func TestDBCountDiagnosisKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:819:	receivedResult, receivedError := conn.CountDiagnosisKeys()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events.go:11:	"github.com/cds-snc/covid-alert-server/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events.go:28:var originatorLookup keyclaim.Authenticator
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events.go:31:func SetupLookup(lookup keyclaim.Authenticator) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events.go:88:		VALUES (?, ?, ?, ?, ?) ON DUPLICATE KEY UPDATE count = count + ?`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events.go:155:// Count the number of keys uploaded
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:49:		VALUES (?, ?, ?, ?, ?) ON DUPLICATE KEY UPDATE count = count + ?`).WithArgs(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/eventType.go:8:// OTKClaimed One Time Key Claimed
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/eventType.go:9:// OTKGenerated One Time Key Generated
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/eventType.go:10:// OTKRegenerated One Time Key Regenerated
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/eventType.go:11:// OTKExpired One Time Key Expired
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/eventType.go:12:// OTKExpiredNoUploads One Time Key Expired with no TEK uploads (not exclusive but subset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/eventType.go:13:// OTKExhausted One Time Key exhausted all it's TEKs
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/main_test.go:7:	"github.com/cds-snc/covid-alert-server/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/main_test.go:24:	os.Setenv("KEY_CLAIM_TOKEN", token1 +"=" + onApi + ":"+ token2 +"=302")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/main_test.go:27:	SetupLookup(keyclaim.NewAuthenticator())
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:10:func countUnclaimedEncryptionKeysByOriginator(tx *sql.Tx) ([]CountByOriginator, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:12:			SELECT originator, count(*) FROM encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:13:			WHERE  ((created < (NOW() - INTERVAL %d MINUTE)) AND app_public_key IS NULL)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:14:			GROUP BY encryption_keys.originator `, config.AppConstants.OneTimeCodeExpiryInMinutes))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:17:func countExpiredClaimedEncryptionKeysByOriginator(tx *sql.Tx) ([]CountByOriginator, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:19:			SELECT originator, COUNT(*) FROM encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:21:			GROUP BY encryption_keys.originator
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:22:		`, config.AppConstants.EncryptionKeyValidityDays))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:25:func countExpiredClaimedEncryptionKeysWithNoUploadsByOriginator(tx *sql.Tx) ([]CountByOriginator, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:27:			SELECT originator, COUNT(*) FROM encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:28:			WHERE  (created < (NOW() - INTERVAL %d DAY)) AND remaining_keys = %d
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:29:			GROUP BY encryption_keys.originator
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:30:		`, config.AppConstants.EncryptionKeyValidityDays, config.AppConstants.InitialRemainingKeys))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:33:func countExhaustedEncryptionKeysByOriginator(tx *sql.Tx) ([]CountByOriginator, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:35:			SELECT originator, COUNT(*) FROM encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:36:			WHERE  remaining_keys = 0
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries.go:37:			GROUP BY encryption_keys.originator
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:15:		UNIQUE KEY unique_schema_migrations (version)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:27:CREATE TABLE IF NOT EXISTS diagnosis_keys (
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:28:	key_data                      BINARY(16) NOT NULL UNIQUE,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:35:	UNIQUE INDEX (key_data, region),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:36:	INDEX (key_data),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:41:CREATE TABLE IF NOT EXISTS encryption_keys (
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:42:	server_private_key   BINARY(32) NOT NULL UNIQUE,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:43:	server_public_key    BINARY(32) NOT NULL UNIQUE,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:44:	app_public_key       BINARY(32)          UNIQUE,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:46:	remaining_keys       SMALLINT UNSIGNED NOT NULL,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:51:	INDEX (app_public_key, region),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:59:CREATE TABLE IF NOT EXISTS failed_key_claim_attempts (
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:71:			`ALTER TABLE diagnosis_keys  ADD COLUMN originator VARCHAR(64)`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:72:			`ALTER TABLE encryption_keys ADD COLUMN originator VARCHAR(64)`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:73:			`ALTER TABLE diagnosis_keys  ADD INDEX (originator)`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:74:			`ALTER TABLE encryption_keys ADD INDEX (originator)`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:79:			`ALTER TABLE encryption_keys ADD COLUMN hash_id VARCHAR(128)`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:80:			`ALTER TABLE encryption_keys ADD INDEX (hash_id)`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:85:			`ALTER TABLE encryption_keys MODIFY one_time_code VARCHAR(10)`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:90:			`UPDATE encryption_keys SET hash_id = NULL WHERE hash_id = ''`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:91:			`ALTER TABLE encryption_keys ADD UNIQUE (hash_id)`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:107:	UNIQUE KEY identifier_type_date (source, identifier,device_type,date)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:134:	UNIQUE KEY originator_date(originator, date)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:149:	UNIQUE KEY originator_hours(originator, hours)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/otk_duration.go:31:		VALUES(?, ?, ?, 1) ON DUPLICATE KEY UPDATE count = count + 1`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/otk_duration_test.go:14:		VALUES(?, ?, ?, 1) ON DUPLICATE KEY UPDATE count = count + 1`).
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:32:func deleteOldDiagnosisKeys(db *sql.DB) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:34:	oldestDateNumber := timemath.DateNumber(time.Now()) - config.AppConstants.MaxDiagnosisKeyRetentionDays
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:37:	res, err := db.Exec(`DELETE FROM diagnosis_keys WHERE hour_of_submission < ?`, oldestHour)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:45:func deleteExpiredKeys(ctx context.Context, db *sql.DB) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:58:	if expiredCounts, countErr = countExpiredClaimedEncryptionKeysByOriginator(tx); countErr != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:59:		log(ctx, countErr).Info("Unable to count expired encryption keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:62:	if expiredCountsNoUploads, countErr = countExpiredClaimedEncryptionKeysWithNoUploadsByOriginator(tx); countErr != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:63:		log(ctx, countErr).Info("Unable to count expired encryption keys with no uploads")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:67:		DELETE FROM encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:69:		config.AppConstants.EncryptionKeyValidityDays,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:92:func deleteUnclaimedKeys(ctx context.Context, db *sql.DB) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:100:	// Count the keys we are going to delete
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:106:	if unclaimedCounts, countErr = countUnclaimedEncryptionKeysByOriginator(tx); countErr != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:107:		log(ctx, countErr).Info("Unable to count unclaimed encryption keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:111:		DELETE FROM encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:113:		AND app_public_key IS NULL`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:137:func deleteExhaustedKeys(ctx context.Context, db *sql.DB) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:144:	// Count the keys we are going to delete
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:150:	if exhaustedCounts, countErr = countExhaustedEncryptionKeysByOriginator(tx); countErr != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:151:		log(ctx, countErr).Info("Unable to count exhausted encryption keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:155:		DELETE FROM encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:156:		WHERE    remaining_keys = 0`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:179:func claimKey(db *sql.DB, oneTimeCode string, appPublicKey []byte, ctx context.Context) ([]byte, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:186:	if err := tx.QueryRow("SELECT COUNT(*) FROM encryption_keys WHERE app_public_key = ?", appPublicKey).Scan(&exists); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:196:		return nil, ErrDuplicateKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:204:	row := tx.QueryRow("SELECT created, originator FROM encryption_keys WHERE one_time_code = ?", oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:224:		UPDATE encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:226:			app_public_key = ?,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:239:	res, err := s.Exec(appPublicKey, created, oneTimeCode, config.AppConstants.OneTimeCodeExpiryInMinutes)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:263:		`SELECT server_public_key FROM encryption_keys WHERE app_public_key = ?`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:273:	row = s.QueryRow(appPublicKey)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:299:func persistEncryptionKey(db *sql.DB, region, originator string, pub *[32]byte, priv *[32]byte, oneTimeCode string) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:301:		`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:302:			(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:304:		region, originator, priv[:], pub[:], oneTimeCode, config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:309:func persistEncryptionKeyWithHashID(db *sql.DB, region, originator, hashID string, pub *[32]byte, priv *[32]byte, oneTimeCode string) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:311:		`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:312:			(region, originator, hash_id, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:314:		region, originator, hashID, priv[:], pub[:], oneTimeCode, config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:318:	} else if strings.Contains(err.Error(), "for key 'one_time_code") { // OTC duplicate, re-run
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:320:	} else if strings.Contains(err.Error(), "for key 'hash_id") { // HashID duplicate
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:322:		row := db.QueryRow("SELECT one_time_code FROM encryption_keys WHERE hash_id = ?", hashID)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:326:			_, err = db.Exec(`DELETE FROM encryption_keys WHERE hash_id = ? AND one_time_code IS NOT NULL`, hashID)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:339:		SELECT server_private_key FROM encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:340:			WHERE server_public_key = ?
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:343:		config.AppConstants.EncryptionKeyValidityDays,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:349:// Return keys that were SUBMITTED to the Diagnosis Server during the specified
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:352:// Only return keys that correspond to a Key valid for a date less than 14 days ago.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:353:func diagnosisKeysForHours(db *sql.DB, region string, startHour uint32, endHour uint32, currentRollingStartIntervalNumber int32) (*sql.Rows, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:357:		`SELECT region, key_data, rolling_start_interval_number, rolling_period, transmission_risk_level FROM diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:362:		ORDER BY key_data
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:368:func registerDiagnosisKeys(db *sql.DB, appPubKey *[32]byte, keys []*pb.TemporaryExposureKey, ctx context.Context) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:376:	var remainingKeys int64
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:377:	if err := tx.QueryRow("SELECT region, originator, remaining_keys FROM encryption_keys WHERE app_public_key = ? FOR UPDATE", appPubKey[:]).Scan(&region, &originator, &remainingKeys); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:384:	if remainingKeys == 0 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:388:		return ErrKeyConsumed
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:392:		INSERT IGNORE INTO diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:393:		(region, originator, key_data, rolling_start_interval_number, rolling_period, transmission_risk_level, hour_of_submission)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:405:	var keysInserted int64
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:407:	for _, key := range keys {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:408:		result, err := s.Exec(region, originator, key.GetKeyData(), key.GetRollingStartIntervalNumber(), key.GetRollingPeriod(), key.GetTransmissionRiskLevel(), hourOfSubmission)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:423:		keysInserted += n
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:426:	if remainingKeys < keysInserted {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:430:		return ErrTooManyKeys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:439:		keysInserted,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:440:		remainingKeys == int64(config.AppConstants.InitialRemainingKeys),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:451:		UPDATE encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:452:		SET remaining_keys = remaining_keys - ?
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:453:		WHERE remaining_keys >= ?
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:454:		AND app_public_key = ?`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:455:		keysInserted,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:456:		keysInserted,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:457:		appPubKey[:],
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:464:		return ErrTooManyKeys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:478:func checkClaimKeyBan(db queryRower, identifier string) (triesRemaining int, banDuration time.Duration, err error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:481:	var maxConsecutiveClaimKeyFailures = config.AppConstants.MaxConsecutiveClaimKeyFailures
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:482:	q := db.QueryRow(`SELECT failures, last_failure FROM failed_key_claim_attempts WHERE identifier = ?`, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:485:			return maxConsecutiveClaimKeyFailures, 0, nil
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:490:	triesRemaining = maxConsecutiveClaimKeyFailures - int(failures)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:497:		banDuration = (time.Duration(config.AppConstants.ClaimKeyBanDuration) * time.Hour) - elapsed
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:501:		return maxConsecutiveClaimKeyFailures, 0, nil
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:507:func registerClaimKeySuccess(db *sql.DB, identifier string) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:508:	_, err := db.Exec(`DELETE FROM failed_key_claim_attempts WHERE identifier = ?`, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:512:func registerClaimKeyFailure(db *sql.DB, identifier string) (triesRemaining int, banDuration time.Duration, err error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:519:		INSERT INTO failed_key_claim_attempts (identifier) VALUES (?)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:520:		ON DUPLICATE KEY UPDATE
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:530:	triesRemaining, banDuration, err = checkClaimKeyBan(tx, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:544:func deleteOldFailedClaimKeyAttempts(db *sql.DB) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:545:	threshold := time.Now().Add(-(time.Duration(config.AppConstants.ClaimKeyBanDuration) * time.Hour))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:547:	res, err := db.Exec(`DELETE FROM failed_key_claim_attempts WHERE last_failure < ?`, threshold)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:557:	row := db.QueryRow("SELECT COUNT(*) FROM encryption_keys WHERE one_time_code IS NULL")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:567:func countDiagnosisKeys(db *sql.DB) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:570:	row := db.QueryRow("SELECT COUNT(*) FROM diagnosis_keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:583:	row := db.QueryRow("SELECT COUNT(*) FROM encryption_keys WHERE one_time_code IS NOT NULL")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:18:func TestDeleteOldDiagnosisKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:22:	oldestDateNumber := timemath.DateNumber(time.Now()) - config.AppConstants.MaxDiagnosisKeyRetentionDays
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:25:	mock.ExpectExec(`DELETE FROM diagnosis_keys WHERE hour_of_submission < ?`).WithArgs(oldestHour).WillReturnResult(sqlmock.NewResult(1, 1))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:26:	deleteOldDiagnosisKeys(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:35:func TestClaimKey(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:37:	pub, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:45:	mock.ExpectQuery(`SELECT COUNT(*) FROM encryption_keys WHERE app_public_key = ?`).WithArgs(pub[:]).WillReturnError(fmt.Errorf("error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:47:	_, receivedErr := claimKey(db, oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:54:	assert.Equal(t, expectedErr, receivedErr, "Expected error if could not query for key")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:56:	// If app key exists
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:59:	mock.ExpectQuery(`SELECT COUNT(*) FROM encryption_keys WHERE app_public_key = ?`).WithArgs(pub[:]).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:61:	_, receivedErr = claimKey(db, oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:67:	expectedErr = ErrDuplicateKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:68:	assert.Equal(t, expectedErr, receivedErr, "Expected ErrDuplicateKey if there are duplicate keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:70:	// App key does not exist, but created is not correct
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:73:	mock.ExpectQuery(`SELECT COUNT(*) FROM encryption_keys WHERE app_public_key = ?`).WithArgs(pub[:]).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:78:	_, receivedErr = claimKey(db, oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:90:	mock.ExpectQuery(`SELECT COUNT(*) FROM encryption_keys WHERE app_public_key = ?`).WithArgs(pub[:]).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:94:	query := `UPDATE encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:96:			app_public_key = ?,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:104:	_, receivedErr = claimKey(db, oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:116:	mock.ExpectQuery(`SELECT COUNT(*) FROM encryption_keys WHERE app_public_key = ?`).WithArgs(pub[:]).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:135:	_, receivedErr = claimKey(db, oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:147:	mock.ExpectQuery(`SELECT COUNT(*) FROM encryption_keys WHERE app_public_key = ?`).WithArgs(pub[:]).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:166:	_, receivedErr = claimKey(db, oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:175:	// Getting public key throws an error
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:178:	mock.ExpectQuery(`SELECT COUNT(*) FROM encryption_keys WHERE app_public_key = ?`).WithArgs(pub[:]).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:196:	mock.ExpectPrepare(`SELECT server_public_key FROM encryption_keys WHERE app_public_key = ?`).ExpectQuery().WithArgs(pub[:]).WillReturnError(fmt.Errorf("error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:199:	_, receivedErr = claimKey(db, oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:206:	assert.Equal(t, expectedErr, receivedErr, "Expected error if server_public_key was not queried")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:208:	// Commits and returns a server key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:211:	mock.ExpectQuery(`SELECT COUNT(*) FROM encryption_keys WHERE app_public_key = ?`).WithArgs(pub[:]).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:229:	rows = sqlmock.NewRows([]string{"server_public_key"}).AddRow(pub[:])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:230:	mock.ExpectPrepare(`SELECT server_public_key FROM encryption_keys WHERE app_public_key = ?`).ExpectQuery().WithArgs(pub[:]).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:234:	serverKey, _ := claimKey(db, oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:240:	assert.Equal(t, pub[:], serverKey, "should return server key")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:246:	mock.ExpectQuery(`SELECT created, originator FROM encryption_keys WHERE one_time_code = ?`).WithArgs(oneTimeCode).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:249:func TestPersistEncryptionKey(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:255:	pub, priv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:260:		`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:261:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:268:		config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:271:	receivedErr := persistEncryptionKey(db, region, originator, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:282:		`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:283:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:290:		config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:293:	receivedResult := persistEncryptionKey(db, region, originator, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:303:func testPersistEncryptionKeyWithHashID(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:309:	pub, priv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:315:		`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:316:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:324:		config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:327:	receivedErr := persistEncryptionKeyWithHashID(db, region, originator, hashID, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:338:		`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:339:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:347:		config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:348:	).WillReturnError(fmt.Errorf("for key 'one_time_code"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:350:	receivedErr = persistEncryptionKeyWithHashID(db, region, originator, hashID, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:356:	expectedErr = fmt.Errorf("for key 'one_time_code")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:361:		`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:362:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:370:		config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:371:	).WillReturnError(fmt.Errorf("for key 'hash_id"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:375:		`SELECT one_time_code FROM encryption_keys WHERE hash_id = ? FOR UPDATE`).WithArgs(hashID).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:377:	receivedErr = persistEncryptionKeyWithHashID(db, region, originator, hashID, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:388:		`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:389:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:397:		config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:398:	).WillReturnError(fmt.Errorf("for key 'for key 'hash_id"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:402:		`SELECT one_time_code FROM encryption_keys WHERE hash_id = ? FOR UPDATE`).WithArgs(hashID).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:403:	mock.ExpectExec(`DELETE FROM encryption_keys WHERE hash_id = ? AND one_time_code IS NOT NULL`).WithArgs(hashID).WillReturnError(fmt.Errorf("error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:405:	receivedErr = persistEncryptionKeyWithHashID(db, region, originator, hashID, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:416:		`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:417:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:425:		config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:426:	).WillReturnError(fmt.Errorf("for key 'for key 'hash_id"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:430:		`SELECT one_time_code FROM encryption_keys WHERE hash_id = ? FOR UPDATE`).WithArgs(hashID).WillReturnRows(rows)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:431:	mock.ExpectExec(`DELETE FROM encryption_keys WHERE hash_id = ? AND one_time_code IS NOT NULL`).WithArgs(hashID).WillReturnResult(sqlmock.NewResult(1, 1))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:433:	receivedErr = persistEncryptionKeyWithHashID(db, region, originator, hashID, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:444:		`INSERT INTO encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:445:		(region, originator, server_private_key, server_public_key, one_time_code, remaining_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:453:		config.AppConstants.InitialRemainingKeys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:456:	receivedResult := persistEncryptionKeyWithHashID(db, region, originator, hashID, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:470:	pub, priv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:473:	SELECT server_private_key FROM encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:474:		WHERE server_public_key = ?
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:477:		config.AppConstants.EncryptionKeyValidityDays,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:480:	rows := sqlmock.NewRows([]string{"server_private_key"}).AddRow(priv[:])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:487:	assert.Equal(t, expectedResult, receivedResult, "Expected private key for public key")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:494:func TestDiagnosisKeysForHours(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:505:	SELECT region, key_data, rolling_start_interval_number, rolling_period, transmission_risk_level FROM diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:510:		ORDER BY key_data`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:512:	row := sqlmock.NewRows([]string{"region", "key_data", "rolling_start_interval_number", "rolling_period", "transmission_risk_level"}).AddRow("302", []byte{}, 2651450, 144, 4)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:520:	rows, _ := diagnosisKeysForHours(db, region, startHour, endHour, currentRollingStartIntervalNumber)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:533:func TestRegisterDiagnosisKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:537:	pub, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:538:	keys := []*pb.TemporaryExposureKey{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:544:	mock.ExpectQuery(`SELECT region, originator, remaining_keys FROM encryption_keys WHERE app_public_key = ? FOR UPDATE`).WithArgs(pub[:]).WillReturnError(fmt.Errorf("error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:546:	receivedErr := registerDiagnosisKeys(db, pub, keys, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:555:	// Roll back if 0 keys are left and return error
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:557:	row := sqlmock.NewRows([]string{"region", "originator", "remaining_keys"}).AddRow(region, originator, 0)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:558:	mock.ExpectQuery(`SELECT region, originator, remaining_keys FROM encryption_keys WHERE app_public_key = ? FOR UPDATE`).WillReturnRows(row)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:560:	receivedErr = registerDiagnosisKeys(db, pub, keys, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:566:	expectedErr = ErrKeyConsumed
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:567:	assert.Equal(t, expectedErr, receivedErr, "Expected ErrKeyConsumed if 0 keys are left")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:571:	row = sqlmock.NewRows([]string{"region", "originator", "remaining_keys"}).AddRow("302", "randomOrigin", 1)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:572:	mock.ExpectQuery(`SELECT region, originator, remaining_keys FROM encryption_keys WHERE app_public_key = ? FOR UPDATE`).WillReturnRows(row)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:574:		`INSERT IGNORE INTO diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:575:		(region, originator, key_data, rolling_start_interval_number, rolling_period, transmission_risk_level, hour_of_submission)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:580:	receivedErr = registerDiagnosisKeys(db, pub, keys, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:589:	// Rolls back if it fails to execute insertion of keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:590:	key := randomTestKey()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:591:	keys = []*pb.TemporaryExposureKey{key}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:596:	row = sqlmock.NewRows([]string{"region", "originator", "remaining_keys"}).AddRow("302", "randomOrigin", 1)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:597:	mock.ExpectQuery(`SELECT region, originator, remaining_keys FROM encryption_keys WHERE app_public_key = ? FOR UPDATE`).WillReturnRows(row)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:599:		`INSERT IGNORE INTO diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:600:		(region, originator, key_data, rolling_start_interval_number, rolling_period, transmission_risk_level, hour_of_submission)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:605:		key.GetKeyData(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:606:		key.GetRollingStartIntervalNumber(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:607:		key.GetRollingPeriod(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:608:		key.GetTransmissionRiskLevel(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:613:	receivedErr = registerDiagnosisKeys(db, pub, keys, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:622:	// Rolls back if more keys are inserted that are allowed
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:623:	keyOne := randomTestKey()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:624:	keyTwo := randomTestKey()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:625:	keys = []*pb.TemporaryExposureKey{keyOne, keyTwo}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:630:	row = sqlmock.NewRows([]string{"region", "originator", "remaining_keys"}).AddRow("302", "randomOrigin", 1)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:631:	mock.ExpectQuery(`SELECT region, originator, remaining_keys FROM encryption_keys WHERE app_public_key = ? FOR UPDATE`).WillReturnRows(row)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:634:		`INSERT IGNORE INTO diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:635:		(region, originator, key_data, rolling_start_interval_number, rolling_period, transmission_risk_level, hour_of_submission)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:639:	for _, key := range keys {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:640:		mock.ExpectExec(`INSERT IGNORE INTO diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:641:		(region, originator, key_data, rolling_start_interval_number, rolling_period, transmission_risk_level, hour_of_submission)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:645:			key.GetKeyData(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:646:			key.GetRollingStartIntervalNumber(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:647:			key.GetRollingPeriod(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:648:			key.GetTransmissionRiskLevel(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:654:	receivedErr = registerDiagnosisKeys(db, pub, keys, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:660:	expectedErr = ErrTooManyKeys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:661:	assert.Equal(t, expectedErr, receivedErr, "Expected error more keys than allowed are inserted")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:664:	keyOne = randomTestKey()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:665:	keyTwo = randomTestKey()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:666:	keys = []*pb.TemporaryExposureKey{keyOne, keyTwo}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:671:	row = sqlmock.NewRows([]string{"region", "originator", "remaining_keys"}).AddRow("302", "randomOrigin", 3)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:672:	mock.ExpectQuery(`SELECT region, originator, remaining_keys FROM encryption_keys WHERE app_public_key = ? FOR UPDATE`).WillReturnRows(row)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:675:		`INSERT IGNORE INTO diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:676:		(region, originator, key_data, rolling_start_interval_number, rolling_period, transmission_risk_level, hour_of_submission)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:680:	for _, key := range keys {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:681:		mock.ExpectExec(`INSERT IGNORE INTO diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:682:		(region, originator, key_data, rolling_start_interval_number, rolling_period, transmission_risk_level, hour_of_submission)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:686:			key.GetKeyData(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:687:			key.GetRollingStartIntervalNumber(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:688:			key.GetRollingPeriod(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:689:			key.GetTransmissionRiskLevel(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:701:		len(keys),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:706:		`UPDATE encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:707:	SET remaining_keys = remaining_keys - ?
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:708:	WHERE remaining_keys >= ?
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:709:	AND app_public_key = ?`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:711:		len(keys),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:712:		len(keys),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:717:	receivedErr = registerDiagnosisKeys(db, pub, keys, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:723:	expectedErr = ErrTooManyKeys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:724:	assert.Equal(t, expectedErr, receivedErr, "Expected error more keys than allowed are inserted")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:726:	// Commits and logs how many keys were inserted
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:727:	keyOne = randomTestKey()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:728:	keyTwo = randomTestKey()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:729:	keys = []*pb.TemporaryExposureKey{keyOne, keyTwo}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:734:	row = sqlmock.NewRows([]string{"region", "originator", "remaining_keys"}).AddRow("302", "randomOrigin", config.AppConstants.InitialRemainingKeys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:735:	mock.ExpectQuery(`SELECT region, originator, remaining_keys FROM encryption_keys WHERE app_public_key = ? FOR UPDATE`).WillReturnRows(row)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:738:		`INSERT IGNORE INTO diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:739:		(region, originator, key_data, rolling_start_interval_number, rolling_period, transmission_risk_level, hour_of_submission)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:743:	for _, key := range keys {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:744:		mock.ExpectExec(`INSERT IGNORE INTO diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:745:		(region, originator, key_data, rolling_start_interval_number, rolling_period, transmission_risk_level, hour_of_submission)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:749:			key.GetKeyData(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:750:			key.GetRollingStartIntervalNumber(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:751:			key.GetRollingPeriod(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:752:			key.GetTransmissionRiskLevel(),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:764:		len(keys),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:769:		`UPDATE encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:770:	SET remaining_keys = remaining_keys - ?
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:771:	WHERE remaining_keys >= ?
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:772:	AND app_public_key = ?`,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:774:		len(keys),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:775:		len(keys),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:780:	receivedResult := registerDiagnosisKeys(db, pub, keys, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:786:	assert.Nil(t, receivedResult, "Expected nil when keys are commited")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:789:func TestCheckClaimKeyBan(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:793:	var maxConsecutiveClaimKeyFailures = config.AppConstants.MaxConsecutiveClaimKeyFailures
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:799:	mock.ExpectQuery(`SELECT failures, last_failure FROM failed_key_claim_attempts WHERE identifier = ?`).WithArgs(identifier).WillReturnRows(row)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:801:	expectedTriesRemaining := maxConsecutiveClaimKeyFailures
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:804:	receivedTriesRemaining, receivedBanDuration, _ := checkClaimKeyBan(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:810:	assert.Equal(t, expectedTriesRemaining, receivedTriesRemaining, "Expected maxConsecutiveClaimKeyFailures as tries remaining")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:814:	mock.ExpectQuery(`SELECT failures, last_failure FROM failed_key_claim_attempts WHERE identifier = ?`).WithArgs(identifier).WillReturnError(fmt.Errorf("error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:820:	receivedTriesRemaining, receivedBanDuration, receivedErr := checkClaimKeyBan(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:826:	assert.Equal(t, expectedTriesRemaining, receivedTriesRemaining, "Expected maxConsecutiveClaimKeyFailures as tries remaining")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:833:	mock.ExpectQuery(`SELECT failures, last_failure FROM failed_key_claim_attempts WHERE identifier = ?`).WithArgs(identifier).WillReturnRows(row)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:835:	expectedTriesRemaining = maxConsecutiveClaimKeyFailures - attempts
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:838:	receivedTriesRemaining, receivedBanDuration, _ = checkClaimKeyBan(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:844:	assert.Equal(t, expectedTriesRemaining, receivedTriesRemaining, "Expected maxConsecutiveClaimKeyFailures - attempts as tries remaining")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:848:	attempts = maxConsecutiveClaimKeyFailures
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:850:	mock.ExpectQuery(`SELECT failures, last_failure FROM failed_key_claim_attempts WHERE identifier = ?`).WithArgs(identifier).WillReturnRows(row)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:852:	expectedTriesRemaining = maxConsecutiveClaimKeyFailures - attempts
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:855:	receivedTriesRemaining, receivedBanDuration, _ = checkClaimKeyBan(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:865:	attempts = maxConsecutiveClaimKeyFailures
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:867:	mock.ExpectQuery(`SELECT failures, last_failure FROM failed_key_claim_attempts WHERE identifier = ?`).WithArgs(identifier).WillReturnRows(row)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:869:	expectedTriesRemaining = maxConsecutiveClaimKeyFailures
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:872:	receivedTriesRemaining, receivedBanDuration, _ = checkClaimKeyBan(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:878:	assert.Equal(t, expectedTriesRemaining, receivedTriesRemaining, "Expected maxConsecutiveClaimKeyFailures as tries remaining")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:882:func TestRegisterClaimKeySuccess(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:888:	mock.ExpectExec(`DELETE FROM failed_key_claim_attempts WHERE identifier = ?`).WithArgs(identifier).WillReturnResult(sqlmock.NewResult(1, 1))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:889:	receivedResult := registerClaimKeySuccess(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:898:func TestRegisterClaimKeyFailure(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:903:	var maxConsecutiveClaimKeyFailures = config.AppConstants.MaxConsecutiveClaimKeyFailures
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:908:		`INSERT INTO failed_key_claim_attempts (identifier) VALUES (?)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:909:		ON DUPLICATE KEY UPDATE
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:920:	receivedTriesRemaining, receivedBanDuration, receivedErr := registerClaimKeyFailure(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:926:	assert.Equal(t, expectedTriesRemaining, receivedTriesRemaining, "Expected maxConsecutiveClaimKeyFailures as tries remaining")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:930:	// Rolls back if checkClaimKeyBan returns an error
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:933:		`INSERT INTO failed_key_claim_attempts (identifier) VALUES (?)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:934:		ON DUPLICATE KEY UPDATE
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:940:	//--> Called in checkClaimKeyBan
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:941:	mock.ExpectQuery(`SELECT failures, last_failure FROM failed_key_claim_attempts WHERE identifier = ?`).WithArgs(identifier).WillReturnError(fmt.Errorf("error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:949:	receivedTriesRemaining, receivedBanDuration, receivedErr = registerClaimKeyFailure(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:955:	assert.Equal(t, expectedTriesRemaining, receivedTriesRemaining, "Expected maxConsecutiveClaimKeyFailures as tries remaining")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:959:	// Commits and returns the correct data from checkClaimKeyBan
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:963:		`INSERT INTO failed_key_claim_attempts (identifier) VALUES (?)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:964:		ON DUPLICATE KEY UPDATE
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:970:	//--> Called in checkClaimKeyBan
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:972:	mock.ExpectQuery(`SELECT failures, last_failure FROM failed_key_claim_attempts WHERE identifier = ?`).WithArgs(identifier).WillReturnRows(row)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:976:	expectedTriesRemaining = maxConsecutiveClaimKeyFailures - 1
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:979:	receivedTriesRemaining, receivedBanDuration, receivedErr = registerClaimKeyFailure(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:985:	assert.Equal(t, expectedTriesRemaining, receivedTriesRemaining, "Expected maxConsecutiveClaimKeyFailures - 1 as tries remaining")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:990:func TestDeleteOldFailedClaimKeyAttempts(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:994:	mock.ExpectExec(`DELETE FROM failed_key_claim_attempts WHERE last_failure < ?`).WillReturnResult(sqlmock.NewResult(1, 1))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:997:	receivedResult, receivedError := deleteOldFailedClaimKeyAttempts(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1012:	mock.ExpectQuery(`SELECT COUNT(*) FROM encryption_keys WHERE one_time_code IS NULL`).WillReturnRows(row)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1026:func TestCountDiagnosisKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1031:	mock.ExpectQuery(`SELECT COUNT(*) FROM diagnosis_keys`).WillReturnRows(row)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1035:	receivedResult, receivedErr := countDiagnosisKeys(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1050:	mock.ExpectQuery(`SELECT COUNT(*) FROM encryption_keys WHERE one_time_code IS NOT NULL`).WillReturnRows(row)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1064:func randomTestKey() *pb.TemporaryExposureKey {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1070:	key := &pb.TemporaryExposureKey{
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1071:		KeyData:                    token,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1076:	return key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools.go:9:// ClearDiagnosisKeys Truncates the diagnosis_keys table to support testing
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools.go:10:func (c *conn) ClearDiagnosisKeys(ctx context.Context) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools.go:11:	return clearDiagnosisKeys(ctx, c.db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools.go:14:func clearDiagnosisKeys(ctx context.Context, db *sql.DB) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools.go:17:		panic("un-allowed attempt to call clearDiagnosis keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools.go:20:	if _, err := db.Exec(`TRUNCATE TABLE diagnosis_keys`); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools.go:23:	log(ctx,nil).Info("diagnosis_keys was truncated")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools_test.go:15:	assert.Panics(t, func() { clearDiagnosisKeys(nil,nil) }, "Should panic if ENABLE_TEST_TOOLS is not enabled")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools_test.go:20:	assert.Panics(t, func() { clearDiagnosisKeys(nil,nil) }, "Should panic if ENABLE_TEST_TOOLS is set to false")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools_test.go:25:	assert.Panics(t, func() { clearDiagnosisKeys(nil,nil) }, "Should panic if ENABLE_TEST_TOOLS is not true")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools_test.go:37:	mock.ExpectExec(`TRUNCATE TABLE diagnosis_keys`).WillReturnResult(sqlmock.NewResult(0,0))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools_test.go:39:	assert.NotPanics(t, func() {_ = clearDiagnosisKeys(nil, db) }, "expect to not panic if ENABLE_TEST_TOOLS is true")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools_test.go:45:	assertLog(t, hook, 1, logrus.InfoLevel, "diagnosis_keys was truncated")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools_test.go:54:	mock.ExpectExec(`TRUNCATE TABLE diagnosis_keys`).WillReturnError(fmt.Errorf("oh no"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools_test.go:56:	err := clearDiagnosisKeys(nil, db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/defs.go:11:	// KeyLength is the length of a NaCl Box Public or Private Key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/defs.go:12:	KeyLength = 32
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/defs.go:13:	// KeyDataLength is the length of an Exposure Notification Temporary Exposure Key (Data)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/defs.go:14:	KeyDataLength = 16
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/defs.go:16:	// which the Key is rolled.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/defs.go:19:	MaxKeysInUpload     = 28
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/defs.go:22:func IntoKey(bytes []byte) (*[KeyLength]byte, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/defs.go:23:	var arr [KeyLength]byte
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/defs.go:24:	if len(bytes) != KeyLength {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/defs.go:27:	for i := 0; i < KeyLength; i++ {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/defs_test.go:12:func TestIntoKey(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/defs_test.go:15:	_, err := IntoKey([]byte{})
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/defs_test.go:19:	returned, _ := IntoKey([]byte(strings.Repeat("a", 32)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:30:type KeyClaimResponse_ErrorCode int32
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:33:	KeyClaimResponse_NONE                  KeyClaimResponse_ErrorCode = 0
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:34:	KeyClaimResponse_UNKNOWN               KeyClaimResponse_ErrorCode = 1
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:35:	KeyClaimResponse_INVALID_ONE_TIME_CODE KeyClaimResponse_ErrorCode = 2
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:36:	KeyClaimResponse_SERVER_ERROR          KeyClaimResponse_ErrorCode = 3
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:37:	// Indicates the key is invalid, or already registered.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:38:	KeyClaimResponse_INVALID_KEY   KeyClaimResponse_ErrorCode = 4
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:39:	KeyClaimResponse_TEMPORARY_BAN KeyClaimResponse_ErrorCode = 5
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:42:// Enum value maps for KeyClaimResponse_ErrorCode.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:44:	KeyClaimResponse_ErrorCode_name = map[int32]string{
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:49:		4: "INVALID_KEY",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:52:	KeyClaimResponse_ErrorCode_value = map[string]int32{
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:57:		"INVALID_KEY":           4,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:62:func (x KeyClaimResponse_ErrorCode) Enum() *KeyClaimResponse_ErrorCode {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:63:	p := new(KeyClaimResponse_ErrorCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:68:func (x KeyClaimResponse_ErrorCode) String() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:72:func (KeyClaimResponse_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:76:func (KeyClaimResponse_ErrorCode) Type() protoreflect.EnumType {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:80:func (x KeyClaimResponse_ErrorCode) Number() protoreflect.EnumNumber {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:85:func (x *KeyClaimResponse_ErrorCode) UnmarshalJSON(b []byte) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:90:	*x = KeyClaimResponse_ErrorCode(num)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:94:// Deprecated: Use KeyClaimResponse_ErrorCode.Descriptor instead.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:95:func (KeyClaimResponse_ErrorCode) EnumDescriptor() ([]byte, []int) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:104:	EncryptedUploadResponse_INVALID_KEYPAIR           EncryptedUploadResponse_ErrorCode = 2
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:109:	EncryptedUploadResponse_TOO_MANY_KEYS             EncryptedUploadResponse_ErrorCode = 7
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:114:	EncryptedUploadResponse_INVALID_KEY_DATA                      EncryptedUploadResponse_ErrorCode = 11
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:117:	EncryptedUploadResponse_NO_KEYS_IN_PAYLOAD                    EncryptedUploadResponse_ErrorCode = 14
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:125:		2:  "INVALID_KEYPAIR",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:130:		7:  "TOO_MANY_KEYS",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:133:		11: "INVALID_KEY_DATA",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:136:		14: "NO_KEYS_IN_PAYLOAD",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:141:		"INVALID_KEYPAIR":                       2,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:146:		"TOO_MANY_KEYS":                         7,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:149:		"INVALID_KEY_DATA":                      11,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:152:		"NO_KEYS_IN_PAYLOAD":                    14,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:193:// Data type that represents why this key was published.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:194:type TemporaryExposureKey_ReportType int32
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:197:	TemporaryExposureKey_UNKNOWN                      TemporaryExposureKey_ReportType = 0 // Never returned by the client API.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:198:	TemporaryExposureKey_CONFIRMED_TEST               TemporaryExposureKey_ReportType = 1
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:199:	TemporaryExposureKey_CONFIRMED_CLINICAL_DIAGNOSIS TemporaryExposureKey_ReportType = 2
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:200:	TemporaryExposureKey_SELF_REPORT                  TemporaryExposureKey_ReportType = 3
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:201:	TemporaryExposureKey_RECURSIVE                    TemporaryExposureKey_ReportType = 4 // Reserved for future use.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:202:	TemporaryExposureKey_REVOKED                      TemporaryExposureKey_ReportType = 5 // Used to revoke a key, never returned by client API.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:205:// Enum value maps for TemporaryExposureKey_ReportType.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:207:	TemporaryExposureKey_ReportType_name = map[int32]string{
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:215:	TemporaryExposureKey_ReportType_value = map[string]int32{
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:225:func (x TemporaryExposureKey_ReportType) Enum() *TemporaryExposureKey_ReportType {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:226:	p := new(TemporaryExposureKey_ReportType)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:231:func (x TemporaryExposureKey_ReportType) String() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:235:func (TemporaryExposureKey_ReportType) Descriptor() protoreflect.EnumDescriptor {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:239:func (TemporaryExposureKey_ReportType) Type() protoreflect.EnumType {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:243:func (x TemporaryExposureKey_ReportType) Number() protoreflect.EnumNumber {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:248:func (x *TemporaryExposureKey_ReportType) UnmarshalJSON(b []byte) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:253:	*x = TemporaryExposureKey_ReportType(num)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:257:// Deprecated: Use TemporaryExposureKey_ReportType.Descriptor instead.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:258:func (TemporaryExposureKey_ReportType) EnumDescriptor() ([]byte, []int) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:263:// verbal). Then, upon issuing THIS request, they will generate a new keypair.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:264:// If the response comes back successful, the app_public_key (and the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:265:// corresponding private key) and the returned server_public_key will be kept in
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:268:// app_public_keys must not be re-used for new KeyClaimRequests, or the requests
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:270:type KeyClaimRequest struct {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:277:	// app_public_key is generated locally and saved upon successful request
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:279:	AppPublicKey []byte `protobuf:"bytes,2,opt,name=app_public_key,json=appPublicKey" json:"app_public_key,omitempty"` // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:282:func (x *KeyClaimRequest) Reset() {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:283:	*x = KeyClaimRequest{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:291:func (x *KeyClaimRequest) String() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:295:func (*KeyClaimRequest) ProtoMessage() {}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:297:func (x *KeyClaimRequest) ProtoReflect() protoreflect.Message {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:309:// Deprecated: Use KeyClaimRequest.ProtoReflect.Descriptor instead.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:310:func (*KeyClaimRequest) Descriptor() ([]byte, []int) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:314:func (x *KeyClaimRequest) GetOneTimeCode() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:321:func (x *KeyClaimRequest) GetAppPublicKey() []byte {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:323:		return x.AppPublicKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:328:// KeyClaimResponse is received from the server in response to a
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:329:// KeyClaimRequest. If the request was successful, error will be NONE and
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:330:// server_public_key will be set.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:331:type KeyClaimResponse struct {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:336:	Error                *KeyClaimResponse_ErrorCode `protobuf:"varint,1,opt,name=error,enum=covidshield.KeyClaimResponse_ErrorCode" json:"error,omitempty"`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:337:	ServerPublicKey      []byte                      `protobuf:"bytes,2,opt,name=server_public_key,json=serverPublicKey" json:"server_public_key,omitempty"` // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:342:func (x *KeyClaimResponse) Reset() {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:343:	*x = KeyClaimResponse{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:351:func (x *KeyClaimResponse) String() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:355:func (*KeyClaimResponse) ProtoMessage() {}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:357:func (x *KeyClaimResponse) ProtoReflect() protoreflect.Message {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:369:// Deprecated: Use KeyClaimResponse.ProtoReflect.Descriptor instead.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:370:func (*KeyClaimResponse) Descriptor() ([]byte, []int) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:374:func (x *KeyClaimResponse) GetError() KeyClaimResponse_ErrorCode {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:378:	return KeyClaimResponse_NONE
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:381:func (x *KeyClaimResponse) GetServerPublicKey() []byte {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:383:		return x.ServerPublicKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:388:func (x *KeyClaimResponse) GetTriesRemaining() uint32 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:395:func (x *KeyClaimResponse) GetRemainingBanDuration() *duration.Duration {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:417:	// server_public_key is provided by the Diagnosis Server to the App, and is
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:418:	// used to encrypt the payload. This key should be stored locally for 14
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:419:	// days, and used to submit the follow-up Diagnosis Key.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:420:	ServerPublicKey []byte `protobuf:"bytes,1,opt,name=server_public_key,json=serverPublicKey" json:"server_public_key,omitempty"` // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:421:	// app_public_key is the public side of a keypair generated once by the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:422:	// application and linked to the server_public_key. These are linked in the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:423:	// Diagnosis Server, so that only one app_public_key is authorized to upload
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:424:	// for a given server_public_key. If a new server_public_key is issued to an App
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:425:	// (e.g. months later), a new app_public_key should be generated.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:426:	AppPublicKey []byte `protobuf:"bytes,2,opt,name=app_public_key,json=appPublicKey" json:"app_public_key,omitempty"` // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:428:	// subsequent submissions of Diagnosis Keys. This nonce is passed to the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:469:func (x *EncryptedUploadRequest) GetServerPublicKey() []byte {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:471:		return x.ServerPublicKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:476:func (x *EncryptedUploadRequest) GetAppPublicKey() []byte {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:478:		return x.AppPublicKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:554:	// keys returns from the ExposureNotification API.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:555:	Keys []*TemporaryExposureKey `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:597:func (x *Upload) GetKeys() []*TemporaryExposureKey {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:599:		return x.Keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:604:type TemporaryExposureKeyExport struct {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:609:	// Time window of keys in the file, based on arrival
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:613:	// Region from which these keys came (for example, MCC, however, some schemes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:623:	// The temporary exposure keys themselves.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:624:	Keys []*TemporaryExposureKey `protobuf:"bytes,7,rep,name=keys" json:"keys,omitempty"`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:625:	// Keys that have changed status from previous key archives,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:626:	// including keys that are being revoked.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:627:	RevisedKeys []*TemporaryExposureKey `protobuf:"bytes,8,rep,name=revised_keys,json=revisedKeys" json:"revised_keys,omitempty"`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:630:func (x *TemporaryExposureKeyExport) Reset() {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:631:	*x = TemporaryExposureKeyExport{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:639:func (x *TemporaryExposureKeyExport) String() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:643:func (*TemporaryExposureKeyExport) ProtoMessage() {}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:645:func (x *TemporaryExposureKeyExport) ProtoReflect() protoreflect.Message {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:657:// Deprecated: Use TemporaryExposureKeyExport.ProtoReflect.Descriptor instead.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:658:func (*TemporaryExposureKeyExport) Descriptor() ([]byte, []int) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:662:func (x *TemporaryExposureKeyExport) GetStartTimestamp() uint64 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:669:func (x *TemporaryExposureKeyExport) GetEndTimestamp() uint64 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:676:func (x *TemporaryExposureKeyExport) GetRegion() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:683:func (x *TemporaryExposureKeyExport) GetBatchNum() int32 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:690:func (x *TemporaryExposureKeyExport) GetBatchSize() int32 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:697:func (x *TemporaryExposureKeyExport) GetSignatureInfos() []*SignatureInfo {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:704:func (x *TemporaryExposureKeyExport) GetKeys() []*TemporaryExposureKey {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:706:		return x.Keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:711:func (x *TemporaryExposureKeyExport) GetRevisedKeys() []*TemporaryExposureKey {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:713:		return x.RevisedKeys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:723:	// Key version in case the EN server signing key is rotated.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:724:	VerificationKeyVersion *string `protobuf:"bytes,3,opt,name=verification_key_version,json=verificationKeyVersion" json:"verification_key_version,omitempty"`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:725:	// Additional information to uniquely identify the public key associated with
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:726:	// the EN server's signing key (for example, the EN server might serve the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:727:	// app from different countries with different keys).
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:729:	// Three-digit mobile country code (MCC) for validating the key file.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:733:	VerificationKeyId *string `protobuf:"bytes,4,opt,name=verification_key_id,json=verificationKeyId" json:"verification_key_id,omitempty"`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:734:	// All keys must be signed using the SHA-256 with ECDSA algorithm.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:771:func (x *SignatureInfo) GetVerificationKeyVersion() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:772:	if x != nil && x.VerificationKeyVersion != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:773:		return *x.VerificationKeyVersion
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:778:func (x *SignatureInfo) GetVerificationKeyId() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:779:	if x != nil && x.VerificationKeyId != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:780:		return *x.VerificationKeyId
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:792:type TemporaryExposureKey struct {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:797:	// Temporary exposure key.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:798:	KeyData []byte `protobuf:"bytes,1,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:799:	// Varying risk associated with a key depending on the diagnosis method.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:802:	// key validity (ENIntervalNumber).
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:806:	// Type of diagnosis associated with a key.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:807:	ReportType *TemporaryExposureKey_ReportType `protobuf:"varint,5,opt,name=report_type,json=reportType,enum=covidshield.TemporaryExposureKey_ReportType" json:"report_type,omitempty"`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:814:// Default values for TemporaryExposureKey fields.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:816:	Default_TemporaryExposureKey_RollingPeriod = int32(144)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:819:func (x *TemporaryExposureKey) Reset() {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:820:	*x = TemporaryExposureKey{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:828:func (x *TemporaryExposureKey) String() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:832:func (*TemporaryExposureKey) ProtoMessage() {}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:834:func (x *TemporaryExposureKey) ProtoReflect() protoreflect.Message {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:846:// Deprecated: Use TemporaryExposureKey.ProtoReflect.Descriptor instead.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:847:func (*TemporaryExposureKey) Descriptor() ([]byte, []int) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:851:func (x *TemporaryExposureKey) GetKeyData() []byte {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:853:		return x.KeyData
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:858:func (x *TemporaryExposureKey) GetTransmissionRiskLevel() int32 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:865:func (x *TemporaryExposureKey) GetRollingStartIntervalNumber() int32 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:872:func (x *TemporaryExposureKey) GetRollingPeriod() int32 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:876:	return Default_TemporaryExposureKey_RollingPeriod
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:879:func (x *TemporaryExposureKey) GetReportType() TemporaryExposureKey_ReportType {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:883:	return TemporaryExposureKey_UNKNOWN
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:886:func (x *TemporaryExposureKey) GetDaysSinceOnsetOfSymptoms() int32 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:946:	// Information to uniquely identify the public key associated
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:947:	// with the EN server's signing key.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:1204:	(KeyClaimResponse_ErrorCode)(0),        // 0: covidshield.KeyClaimResponse.ErrorCode
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:1206:	(TemporaryExposureKey_ReportType)(0),   // 2: covidshield.TemporaryExposureKey.ReportType
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:1207:	(*KeyClaimRequest)(nil),                // 3: covidshield.KeyClaimRequest
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:1208:	(*KeyClaimResponse)(nil),               // 4: covidshield.KeyClaimResponse
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:1212:	(*TemporaryExposureKeyExport)(nil),     // 8: covidshield.TemporaryExposureKeyExport
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:1214:	(*TemporaryExposureKey)(nil),           // 10: covidshield.TemporaryExposureKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:1221:	0,  // 0: covidshield.KeyClaimResponse.error:type_name -> covidshield.KeyClaimResponse.ErrorCode
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:1222:	13, // 1: covidshield.KeyClaimResponse.remaining_ban_duration:type_name -> google.protobuf.Duration
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:1225:	10, // 4: covidshield.Upload.keys:type_name -> covidshield.TemporaryExposureKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:1226:	9,  // 5: covidshield.TemporaryExposureKeyExport.signature_infos:type_name -> covidshield.SignatureInfo
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:1227:	10, // 6: covidshield.TemporaryExposureKeyExport.keys:type_name -> covidshield.TemporaryExposureKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:1228:	10, // 7: covidshield.TemporaryExposureKeyExport.revised_keys:type_name -> covidshield.TemporaryExposureKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:1229:	2,  // 8: covidshield.TemporaryExposureKey.report_type:type_name -> covidshield.TemporaryExposureKey.ReportType
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:1246:			switch v := v.(*KeyClaimRequest); i {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:1258:			switch v := v.(*KeyClaimResponse); i {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:1306:			switch v := v.(*TemporaryExposureKeyExport); i {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshield/proto.pb.go:1330:			switch v := v.(*TemporaryExposureKey); i {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:30:type KeyClaimResponse_ErrorCode int32
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:33:	KeyClaimResponse_NONE                  KeyClaimResponse_ErrorCode = 0
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:34:	KeyClaimResponse_UNKNOWN               KeyClaimResponse_ErrorCode = 1
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:35:	KeyClaimResponse_INVALID_ONE_TIME_CODE KeyClaimResponse_ErrorCode = 2
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:36:	KeyClaimResponse_SERVER_ERROR          KeyClaimResponse_ErrorCode = 3
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:37:	// Indicates the key is invalid, or already registered.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:38:	KeyClaimResponse_INVALID_KEY   KeyClaimResponse_ErrorCode = 4
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:39:	KeyClaimResponse_TEMPORARY_BAN KeyClaimResponse_ErrorCode = 5
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:42:// Enum value maps for KeyClaimResponse_ErrorCode.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:44:	KeyClaimResponse_ErrorCode_name = map[int32]string{
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:49:		4: "INVALID_KEY",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:52:	KeyClaimResponse_ErrorCode_value = map[string]int32{
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:57:		"INVALID_KEY":           4,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:62:func (x KeyClaimResponse_ErrorCode) Enum() *KeyClaimResponse_ErrorCode {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:63:	p := new(KeyClaimResponse_ErrorCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:68:func (x KeyClaimResponse_ErrorCode) String() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:72:func (KeyClaimResponse_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:76:func (KeyClaimResponse_ErrorCode) Type() protoreflect.EnumType {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:80:func (x KeyClaimResponse_ErrorCode) Number() protoreflect.EnumNumber {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:85:func (x *KeyClaimResponse_ErrorCode) UnmarshalJSON(b []byte) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:90:	*x = KeyClaimResponse_ErrorCode(num)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:94:// Deprecated: Use KeyClaimResponse_ErrorCode.Descriptor instead.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:95:func (KeyClaimResponse_ErrorCode) EnumDescriptor() ([]byte, []int) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:104:	EncryptedUploadResponse_INVALID_KEYPAIR           EncryptedUploadResponse_ErrorCode = 2
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:109:	EncryptedUploadResponse_TOO_MANY_KEYS             EncryptedUploadResponse_ErrorCode = 7
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:114:	EncryptedUploadResponse_INVALID_KEY_DATA                      EncryptedUploadResponse_ErrorCode = 11
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:117:	EncryptedUploadResponse_NO_KEYS_IN_PAYLOAD                    EncryptedUploadResponse_ErrorCode = 14
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:125:		2:  "INVALID_KEYPAIR",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:130:		7:  "TOO_MANY_KEYS",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:133:		11: "INVALID_KEY_DATA",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:136:		14: "NO_KEYS_IN_PAYLOAD",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:141:		"INVALID_KEYPAIR":                       2,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:146:		"TOO_MANY_KEYS":                         7,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:149:		"INVALID_KEY_DATA":                      11,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:152:		"NO_KEYS_IN_PAYLOAD":                    14,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:194:// verbal). Then, upon issuing THIS request, they will generate a new keypair.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:195:// If the response comes back successful, the app_public_key (and the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:196:// corresponding private key) and the returned server_public_key will be kept in
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:199:// app_public_keys must not be re-used for new KeyClaimRequests, or the requests
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:201:type KeyClaimRequest struct {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:208:	// app_public_key is generated locally and saved upon successful request
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:210:	AppPublicKey []byte `protobuf:"bytes,2,opt,name=app_public_key,json=appPublicKey" json:"app_public_key,omitempty"` // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:213:func (x *KeyClaimRequest) Reset() {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:214:	*x = KeyClaimRequest{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:222:func (x *KeyClaimRequest) String() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:226:func (*KeyClaimRequest) ProtoMessage() {}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:228:func (x *KeyClaimRequest) ProtoReflect() protoreflect.Message {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:240:// Deprecated: Use KeyClaimRequest.ProtoReflect.Descriptor instead.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:241:func (*KeyClaimRequest) Descriptor() ([]byte, []int) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:245:func (x *KeyClaimRequest) GetOneTimeCode() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:252:func (x *KeyClaimRequest) GetAppPublicKey() []byte {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:254:		return x.AppPublicKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:259:// KeyClaimResponse is received from the server in response to a
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:260:// KeyClaimRequest. If the request was successful, error will be NONE and
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:261:// server_public_key will be set.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:262:type KeyClaimResponse struct {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:267:	Error                *KeyClaimResponse_ErrorCode `protobuf:"varint,1,opt,name=error,enum=covidshieldv1.KeyClaimResponse_ErrorCode" json:"error,omitempty"`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:268:	ServerPublicKey      []byte                      `protobuf:"bytes,2,opt,name=server_public_key,json=serverPublicKey" json:"server_public_key,omitempty"` // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:273:func (x *KeyClaimResponse) Reset() {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:274:	*x = KeyClaimResponse{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:282:func (x *KeyClaimResponse) String() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:286:func (*KeyClaimResponse) ProtoMessage() {}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:288:func (x *KeyClaimResponse) ProtoReflect() protoreflect.Message {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:300:// Deprecated: Use KeyClaimResponse.ProtoReflect.Descriptor instead.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:301:func (*KeyClaimResponse) Descriptor() ([]byte, []int) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:305:func (x *KeyClaimResponse) GetError() KeyClaimResponse_ErrorCode {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:309:	return KeyClaimResponse_NONE
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:312:func (x *KeyClaimResponse) GetServerPublicKey() []byte {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:314:		return x.ServerPublicKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:319:func (x *KeyClaimResponse) GetTriesRemaining() uint32 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:326:func (x *KeyClaimResponse) GetRemainingBanDuration() *duration.Duration {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:348:	// server_public_key is provided by the Diagnosis Server to the App, and is
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:349:	// used to encrypt the payload. This key should be stored locally for 14
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:350:	// days, and used to submit the follow-up Diagnosis Key.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:351:	ServerPublicKey []byte `protobuf:"bytes,1,opt,name=server_public_key,json=serverPublicKey" json:"server_public_key,omitempty"` // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:352:	// app_public_key is the public side of a keypair generated once by the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:353:	// application and linked to the server_public_key. These are linked in the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:354:	// Diagnosis Server, so that only one app_public_key is authorized to upload
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:355:	// for a given server_public_key. If a new server_public_key is issued to an App
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:356:	// (e.g. months later), a new app_public_key should be generated.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:357:	AppPublicKey []byte `protobuf:"bytes,2,opt,name=app_public_key,json=appPublicKey" json:"app_public_key,omitempty"` // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:359:	// subsequent submissions of Diagnosis Keys. This nonce is passed to the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:400:func (x *EncryptedUploadRequest) GetServerPublicKey() []byte {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:402:		return x.ServerPublicKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:407:func (x *EncryptedUploadRequest) GetAppPublicKey() []byte {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:409:		return x.AppPublicKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:485:	// keys returns from the ExposureNotification API.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:486:	Keys []*TemporaryExposureKey `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:528:func (x *Upload) GetKeys() []*TemporaryExposureKey {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:530:		return x.Keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:535:type TemporaryExposureKeyExport struct {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:540:	// Time window of keys in the file, based on arrival
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:544:	// Region from which these keys came (for example, MCC, however, some schemes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:554:	// The temporary exposure keys themselves.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:555:	Keys []*TemporaryExposureKey `protobuf:"bytes,7,rep,name=keys" json:"keys,omitempty"`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:558:func (x *TemporaryExposureKeyExport) Reset() {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:559:	*x = TemporaryExposureKeyExport{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:567:func (x *TemporaryExposureKeyExport) String() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:571:func (*TemporaryExposureKeyExport) ProtoMessage() {}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:573:func (x *TemporaryExposureKeyExport) ProtoReflect() protoreflect.Message {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:585:// Deprecated: Use TemporaryExposureKeyExport.ProtoReflect.Descriptor instead.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:586:func (*TemporaryExposureKeyExport) Descriptor() ([]byte, []int) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:590:func (x *TemporaryExposureKeyExport) GetStartTimestamp() uint64 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:597:func (x *TemporaryExposureKeyExport) GetEndTimestamp() uint64 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:604:func (x *TemporaryExposureKeyExport) GetRegion() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:611:func (x *TemporaryExposureKeyExport) GetBatchNum() int32 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:618:func (x *TemporaryExposureKeyExport) GetBatchSize() int32 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:625:func (x *TemporaryExposureKeyExport) GetSignatureInfos() []*SignatureInfo {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:632:func (x *TemporaryExposureKeyExport) GetKeys() []*TemporaryExposureKey {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:634:		return x.Keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:644:	// Key version in case the EN server signing key is rotated.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:645:	VerificationKeyVersion *string `protobuf:"bytes,3,opt,name=verification_key_version,json=verificationKeyVersion" json:"verification_key_version,omitempty"`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:646:	// Additional information to uniquely identify the public key associated with
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:647:	// the EN server's signing key (for example, the EN server might serve the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:648:	// app from different countries with different keys).
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:650:	// Three-digit mobile country code (MCC) for validating the key file.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:654:	VerificationKeyId *string `protobuf:"bytes,4,opt,name=verification_key_id,json=verificationKeyId" json:"verification_key_id,omitempty"`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:655:	// All keys must be signed using the SHA-256 with ECDSA algorithm.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:692:func (x *SignatureInfo) GetVerificationKeyVersion() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:693:	if x != nil && x.VerificationKeyVersion != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:694:		return *x.VerificationKeyVersion
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:699:func (x *SignatureInfo) GetVerificationKeyId() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:700:	if x != nil && x.VerificationKeyId != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:701:		return *x.VerificationKeyId
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:713:type TemporaryExposureKey struct {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:718:	// Temporary exposure key.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:719:	KeyData []byte `protobuf:"bytes,1,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:720:	// Varying risk associated with a key depending on the diagnosis method.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:723:	// key validity (ENIntervalNumber).
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:729:// Default values for TemporaryExposureKey fields.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:731:	Default_TemporaryExposureKey_RollingPeriod = int32(144)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:734:func (x *TemporaryExposureKey) Reset() {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:735:	*x = TemporaryExposureKey{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:743:func (x *TemporaryExposureKey) String() string {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:747:func (*TemporaryExposureKey) ProtoMessage() {}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:749:func (x *TemporaryExposureKey) ProtoReflect() protoreflect.Message {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:761:// Deprecated: Use TemporaryExposureKey.ProtoReflect.Descriptor instead.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:762:func (*TemporaryExposureKey) Descriptor() ([]byte, []int) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:766:func (x *TemporaryExposureKey) GetKeyData() []byte {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:768:		return x.KeyData
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:773:func (x *TemporaryExposureKey) GetTransmissionRiskLevel() int32 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:780:func (x *TemporaryExposureKey) GetRollingStartIntervalNumber() int32 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:787:func (x *TemporaryExposureKey) GetRollingPeriod() int32 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:791:	return Default_TemporaryExposureKey_RollingPeriod
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:847:	// Information to uniquely identify the public key associated
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:848:	// with the EN server's signing key.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:1085:	(KeyClaimResponse_ErrorCode)(0),        // 0: covidshieldv1.KeyClaimResponse.ErrorCode
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:1087:	(*KeyClaimRequest)(nil),                // 2: covidshieldv1.KeyClaimRequest
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:1088:	(*KeyClaimResponse)(nil),               // 3: covidshieldv1.KeyClaimResponse
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:1092:	(*TemporaryExposureKeyExport)(nil),     // 7: covidshieldv1.TemporaryExposureKeyExport
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:1094:	(*TemporaryExposureKey)(nil),           // 9: covidshieldv1.TemporaryExposureKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:1101:	0,  // 0: covidshieldv1.KeyClaimResponse.error:type_name -> covidshieldv1.KeyClaimResponse.ErrorCode
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:1102:	12, // 1: covidshieldv1.KeyClaimResponse.remaining_ban_duration:type_name -> google.protobuf.Duration
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:1105:	9,  // 4: covidshieldv1.Upload.keys:type_name -> covidshieldv1.TemporaryExposureKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:1106:	8,  // 5: covidshieldv1.TemporaryExposureKeyExport.signature_infos:type_name -> covidshieldv1.SignatureInfo
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:1107:	9,  // 6: covidshieldv1.TemporaryExposureKeyExport.keys:type_name -> covidshieldv1.TemporaryExposureKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:1124:			switch v := v.(*KeyClaimRequest); i {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:1136:			switch v := v.(*KeyClaimResponse); i {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:1184:			switch v := v.(*TemporaryExposureKeyExport); i {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/proto/covidshieldv1/proto.pb.go:1208:			switch v := v.(*TemporaryExposureKey); i {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator.go:20:	hmacKey []byte
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator.go:24:	retrieveHmacKey := os.Getenv("RETRIEVE_HMAC_KEY")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator.go:25:	if len(retrieveHmacKey) < hex.EncodedLen(config.AppConstants.HmacKeyLength) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator.go:26:		log(nil, nil).Fatal("RETRIEVE_HMAC_KEY missing or too short")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator.go:29:	hmacKey := make([]byte, hex.DecodedLen(len(retrieveHmacKey)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator.go:30:	_, err := hex.Decode(hmacKey, []byte(retrieveHmacKey))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator.go:32:		log(nil, err).Fatal("RETRIEVE_HMAC_KEY hex decode failed")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator.go:35:	return &authenticator{hmacKey: hmacKey}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator.go:48:	if n != config.AppConstants.HmacKeyLength {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator.go:56:	if validMAC([]byte(base+strconv.Itoa(currentHour)), dst, a.hmacKey) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator.go:59:	if validMAC([]byte(base+strconv.Itoa(currentHour-1)), dst, a.hmacKey) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator.go:62:	if validMAC([]byte(base+strconv.Itoa(currentHour+1)), dst, a.hmacKey) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator.go:68:func validMAC(message, messageMAC, key []byte) bool {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator.go:69:	mac := hmac.New(sha256.New, key)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:37:	os.Setenv("RETRIEVE_HMAC_KEY", "")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:40:	assertLog(t, hook, 1, logrus.FatalLevel, "RETRIEVE_HMAC_KEY missing or too short")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:43:	os.Setenv("RETRIEVE_HMAC_KEY", strings.Repeat("a", (config.AppConstants.HmacKeyLength*2)-2))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:46:	assertLog(t, hook, 1, logrus.FatalLevel, "RETRIEVE_HMAC_KEY missing or too short")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:49:	os.Setenv("RETRIEVE_HMAC_KEY", strings.Repeat("z", config.AppConstants.HmacKeyLength*2))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:52:	assertLog(t, hook, 1, logrus.FatalLevel, "RETRIEVE_HMAC_KEY hex decode failed")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:54:	hmac := strings.Repeat("a", config.AppConstants.HmacKeyLength*2)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:55:	os.Setenv("RETRIEVE_HMAC_KEY", hmac)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:56:	hmacKey := make([]byte, hex.DecodedLen(len(hmac)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:57:	hex.Decode(hmacKey, []byte(hmac))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:58:	expected := &authenticator{hmacKey: hmacKey}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:63:	validHmacKey := strings.Repeat("a", config.AppConstants.HmacKeyLength*2)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:65:	os.Setenv("RETRIEVE_HMAC_KEY", validHmacKey)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:79:	hmacKey := make([]byte, hex.DecodedLen(len(validHmacKey)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:80:	hex.Decode(hmacKey, []byte(validHmacKey))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:84:	mac := hmac.New(sha256.New, []byte(hmacKey))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:91:	mac = hmac.New(sha256.New, []byte(hmacKey))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:98:	mac = hmac.New(sha256.New, []byte(hmacKey))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:105:	mac = hmac.New(sha256.New, []byte(hmacKey))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:112:	mac = hmac.New(sha256.New, []byte(hmacKey))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:122:	validKey := []byte(strings.Repeat("a", config.AppConstants.HmacKeyLength*2))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:123:	mac := hmac.New(sha256.New, validKey)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:127:	assert.True(t, validMAC(validMessage, validMac, validKey), "should return true on match")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/authenticator_test.go:131:	assert.False(t, validMAC(invalidMessage, validMac, validKey), "should return false on no match")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/retrieval.go:18:	maxKeysPerFile = 750000
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/retrieval.go:23:	verificationKeyVersion = "v1"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/retrieval.go:24:	verificationKeyID      = "302"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/retrieval.go:48:	keys []*pb.TemporaryExposureKey,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/retrieval.go:61:		VerificationKeyVersion: &verificationKeyVersion,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/retrieval.go:62:		VerificationKeyId:      &verificationKeyID,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/retrieval.go:68:	tekExport := &pb.TemporaryExposureKeyExport{
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/retrieval.go:75:		Keys:           keys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/retrieval_test.go:57:	keys := []*pb.TemporaryExposureKey{randomTestKey(), randomTestKey()}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/retrieval_test.go:68:	receivedTotal, receivedZip := SerializeTo(ctx, resp, keys, region, startTimestamp, endTimestamp, signer)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/retrieval_test.go:74:func randomTestKey() *pb.TemporaryExposureKey {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/retrieval_test.go:80:	key := &pb.TemporaryExposureKey{
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/retrieval_test.go:81:		KeyData:                    token,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/retrieval_test.go:86:	return key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer.go:18:	privateKey *ecdsa.PrivateKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer.go:22:	ecdsaKeyHex := os.Getenv("ECDSA_KEY")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer.go:23:	if ecdsaKeyHex == "" {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer.go:24:		panic("no ECDSA_KEY")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer.go:26:	ecdsaKey, err := hex.DecodeString(ecdsaKeyHex)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer.go:31:	priv, err := x509.ParseECPrivateKey(ecdsaKey)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer.go:36:	return &signer{privateKey: priv}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer.go:41:	sig, err := s.privateKey.Sign(rand.Reader, digest[:], crypto.SHA256)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer_test.go:21:	os.Setenv("ECDSA_KEY", "")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer_test.go:22:	assert.PanicsWithValue(t, "no ECDSA_KEY", func() { NewSigner() }, "ECDSA_KEY needs to be defined")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer_test.go:24:	os.Setenv("ECDSA_KEY", strings.Repeat("z", 242))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer_test.go:25:	assert.PanicsWithError(t, "encoding/hex: invalid byte: U+007A 'z'", func() { NewSigner() }, "ECDSA_KEY needs to be a valid hex sting")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer_test.go:27:	os.Setenv("ECDSA_KEY", strings.Repeat("a", 242))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer_test.go:28:	assert.PanicsWithError(t, "x509: failed to parse EC private key: asn1: structure error: length too large", func() { NewSigner() }, "ECDSA_KEY needs to be a x509 cert")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer_test.go:30:	privateKey, _ := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer_test.go:31:	data, _ := x509.MarshalECPrivateKey(privateKey)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer_test.go:32:	os.Setenv("ECDSA_KEY", hex.EncodeToString(data))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer_test.go:34:	expected := &signer{privateKey: privateKey}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer_test.go:35:	assert.Equal(t, NewSigner(), expected, "should return a signer struct with a private key")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer_test.go:41:	privateKey, _ := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer_test.go:42:	publicKey := privateKey.PublicKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer_test.go:43:	data, _ := x509.MarshalECPrivateKey(privateKey)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer_test.go:44:	os.Setenv("ECDSA_KEY", hex.EncodeToString(data))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/retrieval/signer_test.go:58:	receivedValidation := ecdsa.Verify(&publicKey, digest[:], esig.R, esig.S)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:5:	"github.com/cds-snc/covid-alert-server/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:19:func NewKeyClaimServlet(db persistence.Conn, keyClaimAuth keyclaim.Authenticator) srvutil.Servlet {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:20:	return &keyClaimServlet{db: db, auth: keyClaimAuth}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:23:type keyClaimServlet struct {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:25:	auth keyclaim.Authenticator
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:28:// POST /new-key-claim
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:30:func (s *keyClaimServlet) RegisterRouting(r *mux.Router) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:31:	r.HandleFunc("/new-key-claim", s.newKeyClaim)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:32:	r.HandleFunc("/new-key-claim/{hashID:[0-9,a-z]{128}}", s.newKeyClaim)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:33:	r.HandleFunc("/claim-key", s.claimKeyWrapper)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:36:func (s *keyClaimServlet) newKeyClaim(w http.ResponseWriter, r *http.Request) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:76:	keyClaim, err := s.db.NewKeyClaim(ctx, region, originator, hashID)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:82:		log(ctx, err).Error("error constructing new key claim")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:89:	if _, err := w.Write([]byte(keyClaim + "\n")); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:94:func kcrError(errCode pb.KeyClaimResponse_ErrorCode, triesRemaining int) *pb.KeyClaimResponse {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:96:	return &pb.KeyClaimResponse{Error: &errCode, TriesRemaining: &tr}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:99:func (s *keyClaimServlet) claimKeyWrapper(w http.ResponseWriter, r *http.Request) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:100:	_ = s.claimKey(w, r)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:103:func (s *keyClaimServlet) claimKey(w http.ResponseWriter, r *http.Request) result {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:110:	triesRemaining, banDuration, err := s.db.CheckClaimKeyBan(ip)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:112:		kcre := kcrError(pb.KeyClaimResponse_SERVER_ERROR, triesRemaining)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:113:		return requestError(ctx, w, err, "database error checking claim-key ban", http.StatusInternalServerError, kcre)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:115:		kcre := kcrError(pb.KeyClaimResponse_TEMPORARY_BAN, triesRemaining)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:127:			http.StatusBadRequest, kcrError(pb.KeyClaimResponse_UNKNOWN, triesRemaining),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:131:	var req pb.KeyClaimRequest
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:135:			http.StatusBadRequest, kcrError(pb.KeyClaimResponse_UNKNOWN, triesRemaining),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:145:	appPublicKey := req.GetAppPublicKey()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:147:	serverPub, err := s.db.ClaimKey(oneTimeCode, appPublicKey, ctx)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:148:	if err == persistence.ErrInvalidKeyFormat {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:150:			ctx, w, err, "invalid key format",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:151:			http.StatusBadRequest, kcrError(pb.KeyClaimResponse_INVALID_KEY, triesRemaining),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:153:	} else if err == persistence.ErrDuplicateKey {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:155:			ctx, w, err, "duplicate key",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:156:			http.StatusUnauthorized, kcrError(pb.KeyClaimResponse_INVALID_KEY, triesRemaining),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:159:		triesRemaining, banDuration, err := s.db.ClaimKeyFailure(ip)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:161:			kcre := kcrError(pb.KeyClaimResponse_SERVER_ERROR, triesRemaining)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:162:			msg := "database error recording claim-key failure"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:165:		kcre := kcrError(pb.KeyClaimResponse_INVALID_ONE_TIME_CODE, triesRemaining)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:170:			ctx, w, err, "failure to claim key using OneTimeCode",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:171:			http.StatusInternalServerError, kcrError(pb.KeyClaimResponse_SERVER_ERROR, triesRemaining),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:175:	maxTries := uint32(config.AppConstants.MaxConsecutiveClaimKeyFailures)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:176:	resp := &pb.KeyClaimResponse{ServerPublicKey: serverPub, TriesRemaining: &maxTries}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:182:			http.StatusInternalServerError, kcrError(pb.KeyClaimResponse_SERVER_ERROR, triesRemaining),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:190:	if err := s.db.ClaimKeySuccess(ip); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:191:		log(ctx, err).Warn("error recording claim-key success")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:19:	keyclaim "github.com/cds-snc/covid-alert-server/mocks/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:33:func TestNewKeyClaimServlet(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:35:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:37:	expected := &keyClaimServlet{
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:41:	assert.Equal(t, expected, NewKeyClaimServlet(db, auth), "should return a new keyClaimServlet struct")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:44:func TestRegisterRoutingKeyClaim(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:45:	servlet := NewKeyClaimServlet(&persistence.Conn{}, &keyclaim.Authenticator{})
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:50:	assert.Contains(t, expectedPaths, "/new-key-claim", "should include a /new-key-claim path")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:51:	assert.Contains(t, expectedPaths, "/new-key-claim/{hashID:[0-9,a-z]{128}}", "should include a /new-key-claim/{hashID:[0-9,a-z]{128}} path")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:52:	assert.Contains(t, expectedPaths, "/claim-key", "should include a claim-key path")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:58:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:60:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:65:	req, _ := http.NewRequest("OPTIONS", "/new-key-claim", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:78:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:80:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:91:	req, _ = http.NewRequest("POST", "/new-key-claim", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:104:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:110:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:115:	req, _ := http.NewRequest("POST", "/new-key-claim", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:129:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:136:	db.On("NewKeyClaim", mock.Anything, "302", "goodtoken", "").Return("AAABBBCCCC", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:138:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:143:	req, _ := http.NewRequest("POST", "/new-key-claim", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:155:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:163:	db.On("NewKeyClaim", mock.Anything, "302", "goodtoken", hashID).Return("AAABBBCCCC", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:165:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:169:	req, _ := http.NewRequest("POST", "/new-key-claim/"+hashID, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:182:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:187:	db.On("NewKeyClaim", mock.Anything, "302", "errortoken", "").Return("", fmt.Errorf("Random error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:189:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:195:	req, _ := http.NewRequest("POST", "/new-key-claim", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:203:	testhelpers.AssertLog(t, hook, 1, logrus.ErrorLevel, "error constructing new key claim")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:207:func TestNewKeyClaimErrorSavingDuplicateHashID(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:209:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:215:	db.On("NewKeyClaim", mock.Anything, "302", "errortoken", hashID).Return("", err.ErrHashIDClaimed)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:217:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:222:	req, _ := http.NewRequest("POST", "/new-key-claim/"+hashID, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:236:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:241:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:245:	req, _ := http.NewRequest("POST", "/new-key-claim", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:258:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:262:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:266:	req, _ := http.NewRequest("POST", "/new-key-claim", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:278:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:280:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:284:	req, _ := http.NewRequest("GET", "/new-key-claim", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:294:func TestClaimKey(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:296:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:298:	banDuration := (time.Duration(config.AppConstants.ClaimKeyBanDuration) * time.Hour)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:299:	triesRemaining := config.AppConstants.MaxConsecutiveClaimKeyFailures
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:302:	db.On("CheckClaimKeyBan", "1.1.1.1").Return(0, time.Duration(0), fmt.Errorf("Random error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:303:	db.On("CheckClaimKeyBan", "2.2.2.2").Return(0, banDuration, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:304:	db.On("CheckClaimKeyBan", "3.3.3.3").Return(triesRemaining, time.Duration(0), nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:305:	db.On("CheckClaimKeyBan", "4.4.4.4").Return(triesRemaining, time.Duration(0), nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:306:	db.On("CheckClaimKeyBan", "5.5.5.5").Return(triesRemaining, time.Duration(0), nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:308:	appPub, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:309:	serverPub, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:312:	db.On("ClaimKey", "AAAAAAAAAA", appPub[:], mock.Anything).Return(serverPub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:315:	db.On("ClaimKey", "BBBBBBBBBB", appPub[:], mock.Anything).Return(nil, err.ErrInvalidKeyFormat)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:316:	db.On("ClaimKey", "CCCCCCCCCC", appPub[:], mock.Anything).Return(nil, err.ErrDuplicateKey)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:317:	db.On("ClaimKey", "DDDDDDDDDD", appPub[:], mock.Anything).Return(nil, err.ErrInvalidOneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:318:	db.On("ClaimKey", "EEEEEEEEEE", appPub[:], mock.Anything).Return(nil, fmt.Errorf("Generic Error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:321:	db.On("ClaimKeyFailure", "3.3.3.3").Return(triesRemaining-1, banDuration, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:322:	db.On("ClaimKeyFailure", "4.4.4.4").Return(triesRemaining, time.Duration(0), fmt.Errorf("Random error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:325:	db.On("ClaimKeySuccess", "3.3.3.3").Return(nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:326:	db.On("ClaimKeySuccess", "5.5.5.5").Return(fmt.Errorf("Generic Error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:328:	servlet := NewKeyClaimServlet(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:343:	// Error finding keyclaim ban
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:344:	req, _ := http.NewRequest("POST", "/claim-key", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:350:	assert.True(t, checkClaimKeyResponseError(resp.Body.Bytes(), pb.KeyClaimResponse_SERVER_ERROR))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:352:	testhelpers.AssertLog(t, hook, 1, logrus.ErrorLevel, "database error checking claim-key ban")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:355:	req, _ = http.NewRequest("POST", "/claim-key", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:361:	assert.True(t, checkClaimKeyResponseDuration(resp.Body.Bytes(), ptypes.DurationProto(banDuration)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:366:	req, _ = http.NewRequest("POST", "/claim-key", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:372:	assert.True(t, checkClaimKeyResponseDuration(resp.Body.Bytes(), ptypes.DurationProto(banDuration)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:377:	req, _ = http.NewRequest("POST", "/claim-key", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:383:	assert.True(t, checkClaimKeyResponseDuration(resp.Body.Bytes(), ptypes.DurationProto(banDuration)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:388:	req, _ = http.NewRequest("POST", "/claim-key", strings.NewReader("sd"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:394:	assert.True(t, checkClaimKeyResponseError(resp.Body.Bytes(), pb.KeyClaimResponse_UNKNOWN))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:395:	assert.True(t, checkClaimKeyResponseTriesRemaining(resp.Body.Bytes(), uint32(triesRemaining)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:399:	// Invalid app key format
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:401:	upload := buildKeyClaimRequest(&code, appPub[:])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:404:	req, _ = http.NewRequest("POST", "/claim-key", bytes.NewReader(marshalledUpload))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:410:	assert.True(t, checkClaimKeyResponseError(resp.Body.Bytes(), pb.KeyClaimResponse_INVALID_KEY))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:411:	assert.True(t, checkClaimKeyResponseTriesRemaining(resp.Body.Bytes(), uint32(triesRemaining)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:413:	testhelpers.AssertLog(t, hook, 1, logrus.WarnLevel, "invalid key format")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:415:	// Duplicate app key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:417:	upload = buildKeyClaimRequest(&code, appPub[:])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:420:	req, _ = http.NewRequest("POST", "/claim-key", bytes.NewReader(marshalledUpload))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:426:	assert.True(t, checkClaimKeyResponseError(resp.Body.Bytes(), pb.KeyClaimResponse_INVALID_KEY))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:427:	assert.True(t, checkClaimKeyResponseTriesRemaining(resp.Body.Bytes(), uint32(triesRemaining)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:429:	testhelpers.AssertLog(t, hook, 1, logrus.WarnLevel, "duplicate key")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:433:	upload = buildKeyClaimRequest(&code, appPub[:])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:436:	req, _ = http.NewRequest("POST", "/claim-key", bytes.NewReader(marshalledUpload))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:442:	assert.True(t, checkClaimKeyResponseError(resp.Body.Bytes(), pb.KeyClaimResponse_INVALID_ONE_TIME_CODE))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:443:	assert.True(t, checkClaimKeyResponseTriesRemaining(resp.Body.Bytes(), uint32(triesRemaining)-1))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:444:	assert.True(t, checkClaimKeyResponseDuration(resp.Body.Bytes(), ptypes.DurationProto(banDuration)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:450:	upload = buildKeyClaimRequest(&code, appPub[:])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:453:	req, _ = http.NewRequest("POST", "/claim-key", bytes.NewReader(marshalledUpload))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:459:	assert.True(t, checkClaimKeyResponseError(resp.Body.Bytes(), pb.KeyClaimResponse_SERVER_ERROR))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:460:	assert.True(t, checkClaimKeyResponseTriesRemaining(resp.Body.Bytes(), uint32(triesRemaining)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:462:	testhelpers.AssertLog(t, hook, 1, logrus.ErrorLevel, "database error recording claim-key failure")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:466:	upload = buildKeyClaimRequest(&code, appPub[:])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:469:	req, _ = http.NewRequest("POST", "/claim-key", bytes.NewReader(marshalledUpload))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:475:	assert.True(t, checkClaimKeyResponseError(resp.Body.Bytes(), pb.KeyClaimResponse_SERVER_ERROR))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:476:	assert.True(t, checkClaimKeyResponseTriesRemaining(resp.Body.Bytes(), uint32(triesRemaining)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:478:	testhelpers.AssertLog(t, hook, 1, logrus.ErrorLevel, "failure to claim key using OneTimeCode")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:482:	upload = buildKeyClaimRequest(&code, appPub[:])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:485:	req, _ = http.NewRequest("POST", "/claim-key", bytes.NewReader(marshalledUpload))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:491:	assert.True(t, checkClaimKeyResponseError(resp.Body.Bytes(), pb.KeyClaimResponse_NONE))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:492:	assert.True(t, checkClaimKeyResponseTriesRemaining(resp.Body.Bytes(), uint32(triesRemaining)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:496:	upload = buildKeyClaimRequest(&code, appPub[:])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:499:	req, _ = http.NewRequest("POST", "/claim-key", bytes.NewReader(marshalledUpload))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:505:	assert.True(t, checkClaimKeyResponseError(resp.Body.Bytes(), pb.KeyClaimResponse_NONE))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:506:	assert.True(t, checkClaimKeyResponseTriesRemaining(resp.Body.Bytes(), uint32(triesRemaining)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:510:	upload = buildKeyClaimRequest(&code, appPub[:])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:513:	req, _ = http.NewRequest("POST", "/claim-key", bytes.NewReader(marshalledUpload))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:519:	assert.True(t, checkClaimKeyResponseError(resp.Body.Bytes(), pb.KeyClaimResponse_NONE))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:520:	assert.True(t, checkClaimKeyResponseTriesRemaining(resp.Body.Bytes(), uint32(triesRemaining)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:524:	upload = buildKeyClaimRequest(&code, appPub[:])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:527:	req, _ = http.NewRequest("POST", "/claim-key", bytes.NewReader(marshalledUpload))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:533:	assert.True(t, checkClaimKeyResponseError(resp.Body.Bytes(), pb.KeyClaimResponse_NONE))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:534:	assert.True(t, checkClaimKeyResponseTriesRemaining(resp.Body.Bytes(), uint32(triesRemaining)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:536:	testhelpers.AssertLog(t, hook, 1, logrus.WarnLevel, "error recording claim-key success")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:539:func buildKeyClaimRequest(oneTimeCode *string, appPublicKey []byte) *pb.KeyClaimRequest {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:540:	return &pb.KeyClaimRequest{
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:542:		AppPublicKey: appPublicKey,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:546:func buildNewKeyClaimServletRouter(db *persistence.Conn, auth *keyclaim.Authenticator) *mux.Router {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:547:	servlet := NewKeyClaimServlet(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:553:func checkClaimKeyResponseDuration(data []byte, duration *durationpb.Duration) bool {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:554:	var response pb.KeyClaimResponse
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:559:func checkClaimKeyResponseError(data []byte, expectedCode pb.KeyClaimResponse_ErrorCode) bool {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:560:	var response pb.KeyClaimResponse
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:565:func checkClaimKeyResponseTriesRemaining(data []byte, triesRemaining uint32) bool {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:566:	var response pb.KeyClaimResponse
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:11:	"github.com/cds-snc/covid-alert-server/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:20:func NewMetricsServlet(db persistence.Conn, auth keyclaim.Authenticator) srvutil.Servlet {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:28:	auth keyclaim.Authenticator
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:9:	keyclaim "github.com/cds-snc/covid-alert-server/mocks/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:16:func createRouter(db *persistence.Conn, auth *keyclaim.Authenticator) *mux.Router {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:26:func createMocks() (*persistence.Conn, *keyclaim.Authenticator) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:27:	return &persistence.Conn{}, &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:126:	assert.Contains(t, expectedPaths, fmt.Sprintf("/events/{startDate:%s}", DATEFORMAT), "Should contain claimed-keys endpoint")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:173:func TestMetricsServlet_ClaimedKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:63:	You can see the reason for this in pkg/server/keyclaim.go
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:122:	keys, err := s.db.FetchKeysForHours(region, startHour, endHour, currentRSIN)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:130:	size, err := retrieval.SerializeTo(ctx, w, keys, region, startTimestamp, endTimestamp, s.signer)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:134:	log(ctx, nil).WithField("unzipped-size", size).WithField("keys", len(keys)).Info("Wrote retrieval")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:98:func TestRetrieve_AllKeysDownload(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:109:	// All keys download Mock
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:114:	db.On("FetchKeysForHours", region, startHour, endHour, currentRSIN).Return([]*pb.TemporaryExposureKey{randomTestKey(), randomTestKey()}, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:118:	// Get all keys for past 14 days
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:145:	// Get future keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:170:	// Get too old keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:198:	db.On("FetchKeysForHours", region, startHour, endHour, currentRSIN).Return([]*pb.TemporaryExposureKey{}, fmt.Errorf("error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:229:func randomTestKey() *pb.TemporaryExposureKey {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:235:	key := &pb.TemporaryExposureKey{
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:236:		KeyData:                    token,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:241:	return key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/server_test.go:60:	pbError := pb.KeyClaimResponse_UNKNOWN
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/server_test.go:61:	msg := &pb.KeyClaimResponse{Error: &pbError}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:8:	"github.com/cds-snc/covid-alert-server/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:13:func NewTestToolsServlet(db persistence.Conn, auth keyclaim.Authenticator) srvutil.Servlet {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:30:	r.HandleFunc("/clear-diagnosis-keys", t.clearDiagnosisKeys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:36:	auth keyclaim.Authenticator
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:39:func (t *testToolsServlet) clearDiagnosisKeys(w http.ResponseWriter, r *http.Request) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:56:	if err := t.db.ClearDiagnosisKeys(ctx); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:57:		log(ctx, err).Error("unable to clear diagnosis_keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:58:		http.Error(w, "unable to clear diagnosis_keys", http.StatusInternalServerError)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:62:	log(ctx, nil).Info("cleared diagnosis_keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:64:	w.Write([]byte("cleared diagnosis_keys"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:10:	keyclaim "github.com/cds-snc/covid-alert-server/mocks/pkg/keyclaim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:19:func buildAdminToolsServletRouter(db *persistence.Conn, auth *keyclaim.Authenticator) *mux.Router {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:29:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:41:	servlet := NewTestToolsServlet(&persistence.Conn{}, &keyclaim.Authenticator{})
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:47:	assert.Contains(t, expectedPaths, "/clear-diagnosis-keys", "should include a /clear-diagnosis-keys path")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:52:	servlet := NewTestToolsServlet(&persistence.Conn{}, &keyclaim.Authenticator{})
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:62:	servlet := NewTestToolsServlet(&persistence.Conn{}, &keyclaim.Authenticator{})
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:70:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:80:	req, _ := http.NewRequest("POST", "/clear-diagnosis-keys", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:97:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:104:	req, _ := http.NewRequest("POST", "/clear-diagnosis-keys", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:118:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:124:	req, _ := http.NewRequest("GET", "/clear-diagnosis-keys", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:134:func TestTestToolsServlet_ClearDiagnosisKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:138:	db.On("ClearDiagnosisKeys", mock.Anything).Return(nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:140:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:147:	req, _ := http.NewRequest("POST", "/clear-diagnosis-keys", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:153:	assert.Equal(t, "cleared diagnosis_keys", string(resp.Body.Bytes()), "Correct response is expected")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:155:	testhelpers.AssertLog(t, hook, 1, logrus.InfoLevel, "cleared diagnosis_keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:159:func TestTestToolsServlet_ClearDiagnosisKeysFailed(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:163:	db.On("ClearDiagnosisKeys", mock.Anything).Return(fmt.Errorf("oh no"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:165:	auth := &keyclaim.Authenticator{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:172:	req, _ := http.NewRequest("POST", "/clear-diagnosis-keys", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:178:	assert.Equal(t, "unable to clear diagnosis_keys\n", string(resp.Body.Bytes()), "Correct response is expected")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:180:	testhelpers.AssertLog(t, hook, 1, logrus.ErrorLevel, "unable to clear diagnosis_keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:60:	serverPub := seu.ServerPublicKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:61:	if len(serverPub) != pb.KeyLength {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:63:			ctx, w, err, "server public key was not expected length",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:72:			ctx, w, err, "failure to resolve client keypair",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:73:			http.StatusUnauthorized, uploadError(pb.EncryptedUploadResponse_INVALID_KEYPAIR),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:87:	appPubKey, err := pb.IntoKey(seu.AppPublicKey)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:90:			ctx, w, err, "app public key key was not expected length",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:96:	privKey, err := pb.IntoKey(serverPriv)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:99:			ctx, w, err, "server private key was not expected length",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:106:	plaintext, ok := box.Open(nil, seu.Payload, nonce, appPubKey, privKey)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:125:	if len(upload.GetKeys()) == 0 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:127:			ctx, w, err, "no keys provided",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:128:			http.StatusBadRequest, uploadError(pb.EncryptedUploadResponse_NO_KEYS_IN_PAYLOAD),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:133:	if len(upload.GetKeys()) > pb.MaxKeysInUpload {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:135:			ctx, w, err, "too many keys provided",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:136:			http.StatusBadRequest, uploadError(pb.EncryptedUploadResponse_TOO_MANY_KEYS),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:150:	if ok := validateKeys(ctx, w, upload.GetKeys()); !ok {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:151:		return // requestError done by validateKeys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:154:	err = s.db.StoreKeys(appPubKey, upload.GetKeys(), ctx)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:155:	if err == persistence.ErrKeyConsumed {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:157:			ctx, w, err, "key is used up",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:158:			http.StatusBadRequest, uploadError(pb.EncryptedUploadResponse_INVALID_KEYPAIR),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:161:	} else if err == persistence.ErrTooManyKeys {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:163:			ctx, w, err, "not enough keys remaining",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:164:			http.StatusBadRequest, uploadError(pb.EncryptedUploadResponse_TOO_MANY_KEYS),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:169:			ctx, w, err, "failed to store diagnosis keys",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:190:func validateKey(ctx context.Context, w http.ResponseWriter, key *pb.TemporaryExposureKey) bool {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:191:	if key.GetRollingPeriod() < 1 || key.GetRollingPeriod() > 144 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:199:	if len(key.GetKeyData()) != 16 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:201:			ctx, w, nil, "invalid key data",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:202:			http.StatusBadRequest, uploadError(pb.EncryptedUploadResponse_INVALID_KEY_DATA),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:207:	if key.GetRollingStartIntervalNumber() == 0 {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:215:	level := key.GetTransmissionRiskLevel()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:227:func validateKeys(ctx context.Context, w http.ResponseWriter, keys []*pb.TemporaryExposureKey) bool {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:228:	for _, key := range keys {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:229:		if ok := validateKey(ctx, w, key); !ok {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:235:	for _, key := range keys {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:236:		rsin := int(key.GetRollingStartIntervalNumber())
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:98:	testhelpers.AssertLog(t, hook, 1, logrus.WarnLevel, "server public key was not expected length")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:106:	badServerPub, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:116:	assert.True(t, checkUploadResponse(resp.Body.Bytes(), pb.EncryptedUploadResponse_INVALID_KEYPAIR))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:118:	testhelpers.AssertLog(t, hook, 1, logrus.WarnLevel, "failure to resolve client keypair")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:126:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:145:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:157:	testhelpers.AssertLog(t, hook, 1, logrus.WarnLevel, "app public key key was not expected length")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:164:	goodServerPubBadPriv, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:176:	testhelpers.AssertLog(t, hook, 1, logrus.ErrorLevel, "server private key was not expected length")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:183:	goodAppPub, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:184:	badServerPub, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:185:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:214:	goodAppPub, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:215:	badServerPub, _, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:216:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:241:func TestUpload_NoKeysInPayload(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:244:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:245:	goodAppPub, goodAppPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:248:	db.On("StoreKeys", goodAppPub, mock.AnythingOfType("[]*covidshield.TemporaryExposureKey"), mock.Anything).Return(nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:254:	// No keys in payload
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:270:	assert.True(t, checkUploadResponse(resp.Body.Bytes(), pb.EncryptedUploadResponse_NO_KEYS_IN_PAYLOAD))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:272:	testhelpers.AssertLog(t, hook, 1, logrus.WarnLevel, "no keys provided")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:275:func TestUpload_TooManyKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:280:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:281:	goodAppPub, goodAppPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:284:	db.On("StoreKeys", goodAppPub, mock.AnythingOfType("[]*covidshield.TemporaryExposureKey"), mock.Anything).Return(nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:289:	// Too many keys in payload
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:296:	upload := buildUpload(pb.MaxKeysInUpload+1, pbts)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:306:	assert.True(t, checkUploadResponse(resp.Body.Bytes(), pb.EncryptedUploadResponse_TOO_MANY_KEYS))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:308:	testhelpers.AssertLog(t, hook, 1, logrus.WarnLevel, "too many keys provided")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:316:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:317:	goodAppPub, goodAppPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:320:	db.On("StoreKeys", goodAppPub, mock.AnythingOfType("[]*covidshield.TemporaryExposureKey"), mock.Anything).Return(nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:332:	upload := buildUpload(pb.MaxKeysInUpload, pbts)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:347:func TestUpload_ExpiredKey(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:352:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:353:	goodAppPubKeyUsed, goodAppPrivKeyUsed, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:356:	db.On("StoreKeys", goodAppPubKeyUsed, mock.AnythingOfType("[]*covidshield.TemporaryExposureKey"), mock.Anything).Return(persistenceErrors.ErrKeyConsumed)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:362:	// Expired Key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:370:	encrypted := box.Seal(msg[:], marshalledUpload, &nonce, goodServerPub, goodAppPrivKeyUsed)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:372:	payload, _ := proto.Marshal(buildUploadRequest(goodServerPub[:], nonce[:], goodAppPubKeyUsed[:], encrypted))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:378:	assert.True(t, checkUploadResponse(resp.Body.Bytes(), pb.EncryptedUploadResponse_INVALID_KEYPAIR))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:380:	testhelpers.AssertLog(t, hook, 1, logrus.WarnLevel, "key is used up")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:388:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:389:	goodAppPubDBError, goodAppPrivDBError, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:392:	db.On("StoreKeys", goodAppPubDBError, mock.AnythingOfType("[]*covidshield.TemporaryExposureKey"), mock.Anything).Return(fmt.Errorf("generic DB error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:416:	testhelpers.AssertLog(t, hook, 1, logrus.ErrorLevel, "failed to store diagnosis keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:420:func TestUpload_NotEnoughKeysRemaining(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:425:	goodAppPubNoKeysRemaining, goodAppPrivNoKeysRemaining, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:426:	goodServerPubNoKeysRemaining, goodServerPrivNoKeysRemaining, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:428:	db.On("PrivForPub", goodServerPubNoKeysRemaining[:]).Return(goodServerPrivNoKeysRemaining[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:429:	db.On("StoreKeys", goodAppPubNoKeysRemaining, mock.AnythingOfType("[]*covidshield.TemporaryExposureKey"), mock.Anything).Return(persistenceErrors.ErrTooManyKeys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:435:	// Not enough keys remaining
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:443:	encrypted := box.Seal(msg[:], marshalledUpload, &nonce, goodServerPubNoKeysRemaining, goodAppPrivNoKeysRemaining)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:445:	payload, _ := proto.Marshal(buildUploadRequest(goodServerPubNoKeysRemaining[:], nonce[:], goodAppPubNoKeysRemaining[:], encrypted))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:451:	assert.True(t, checkUploadResponse(resp.Body.Bytes(), pb.EncryptedUploadResponse_TOO_MANY_KEYS))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:453:	testhelpers.AssertLog(t, hook, 1, logrus.WarnLevel, "not enough keys remaining")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:465:	goodServerPub, goodServerPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:466:	goodAppPub, goodAppPriv, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:469:	db.On("StoreKeys", goodAppPub, mock.AnythingOfType("[]*covidshield.TemporaryExposureKey"), mock.Anything).Return(nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:494:func TestValidateKey_RollingPeriodLT1(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:507:	key := buildKey(token, int32(2), int32(2651450), int32(0))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:509:	result := validateKey(req.Context(), resp, &key)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:519:func TestValidateKey_RollingPeriodGT144(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:533:	key := buildKey(token, int32(2), int32(2651450), int32(145))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:535:	result := validateKey(req.Context(), resp, &key)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:546:func TestValidateKey_KeyDataNot16Bytes(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:556:	// Key data not 16 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:559:	key := buildKey(token, int32(2), int32(2651450), int32(144))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:561:	result := validateKey(req.Context(), resp, &key)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:566:	assert.True(t, checkUploadResponse(resp.Body.Bytes(), pb.EncryptedUploadResponse_INVALID_KEY_DATA))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:568:	testhelpers.AssertLog(t, hook, 1, logrus.WarnLevel, "invalid key data")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:572:func TestValidateKey_InvalidRSIN(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:584:	key := buildKey(token, int32(2), int32(0), int32(144))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:586:	result := validateKey(req.Context(), resp, &key)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:597:func TestValidateKey_TransmissionRiskLevelLT0(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:611:	key := buildKey(token, int32(-1), int32(2651450), int32(144))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:613:	result := validateKey(req.Context(), resp, &key)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:624:func TestValidateKey_TransmissionRiskLevelGT8(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:637:	key := buildKey(token, int32(9), int32(2651450), int32(144))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:639:	result := validateKey(req.Context(), resp, &key)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:650:func TestValidateKey(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:660:	// Valid key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:663:	key := buildKey(token, int32(8), int32(2651450), int32(144))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:665:	result := validateKey(req.Context(), resp, &key)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:670:func TestValidateKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:690:	// Returns false on bad key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:693:	key := buildKey(token, int32(2), int32(2651450), int32(0))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:695:	result := validateKeys(req.Context(), resp, []*pb.TemporaryExposureKey{&key})
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:698:	// Returns false on keys where rsin is more than 15 days apart
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:699:	keyOne := buildKey(token, int32(2), int32(2651450), int32(144))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:700:	keyTwo := buildKey(token, int32(2), int32(2651450-(144*15)), int32(144))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:702:	result = validateKeys(req.Context(), resp, []*pb.TemporaryExposureKey{&keyOne, &keyTwo})
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:710:	// Returns true on good key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:711:	key = buildKey(token, int32(2), int32(2651450), int32(144))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:713:	result = validateKeys(req.Context(), resp, []*pb.TemporaryExposureKey{&key})
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:718:func buildKey(token []byte, transmissionRiskLevel, rollingStartIntervalNumber, rollingPeriod int32) pb.TemporaryExposureKey {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:719:	return pb.TemporaryExposureKey{
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:720:		KeyData:                    token,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:727:func buildUploadRequest(serverPubKey []byte, nonce []byte, appPublicKey []byte, payload []byte) *pb.EncryptedUploadRequest {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:729:		ServerPublicKey: serverPubKey,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:730:		AppPublicKey:    appPublicKey,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:738:	var keys []*pb.TemporaryExposureKey
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:740:		keys = append(keys, randomTestKey())
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:743:		Keys:      keys,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:27:	var diagnosisKeysTotalMetric metric.Int64ValueObserver
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:33:		diagnosisKeysTotalMetricCount, _ := db.CountDiagnosisKeys()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:41:			diagnosisKeysTotalMetric.Observation(diagnosisKeysTotalMetricCount),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:68:	diagnosisKeysTotalMetric = cb.NewInt64ValueObserver("covidshield.app.diagnosis_keys.total",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:69:		metric.WithDescription("Total number of diagnosis keys"),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:19:	if nDeleted, err := w.db.DeleteOldDiagnosisKeys(); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:20:		log(ctx, err).Info("failed to delete old diagnosis keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:23:		log(ctx, nil).WithField("count", nDeleted).Info("deleted old diagnosis keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:26:	if nDeleted, err := w.db.DeleteUnclaimedKeys(ctx); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:27:		log(ctx, err).Info("failed to delete unclaimed keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:30:		log(ctx, nil).WithField("count", nDeleted).Info("deleted unclaimed keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:33:	if nDeleted, err := w.db.DeleteExpiredKeys(ctx); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:34:		log(ctx, err).Info("failed to delete expired keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:37:		log(ctx, nil).WithField("count", nDeleted).Info("deleted expired keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:40:	if nDeleted, err := w.db.DeleteExhaustedKeys(ctx); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:41:		log(ctx, err).Info("failed to delete exhausted keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:44:		log(ctx, nil).WithField("count", nDeleted).Info("deleted exhausted keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:47:	if nDeleted, err := w.db.DeleteOldFailedClaimKeyAttempts(); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:48:		log(ctx, err).Info("failed to delete old failed claim-key attempts")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:51:		log(ctx, nil).WithField("count", nDeleted).Info("deleted old claim-key attempts")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Procfile.dev:1:key-submission: PORT=8000 ./build/release/key-submission
/mnt/c/Users/conig/Desktop/test/covid-alert-server/Procfile.dev:2:key-retrieval: PORT=8001 ./build/release/key-retrieval
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:9:// verbal). Then, upon issuing THIS request, they will generate a new keypair.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:10:// If the response comes back successful, the app_public_key (and the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:11:// corresponding private key) and the returned server_public_key will be kept in
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:14:// app_public_keys must not be re-used for new KeyClaimRequests, or the requests
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:16:message KeyClaimRequest {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:19:  // app_public_key is generated locally and saved upon successful request
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:21:  optional bytes app_public_key = 2; // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:24:// KeyClaimResponse is received from the server in response to a
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:25:// KeyClaimRequest. If the request was successful, error will be NONE and
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:26:// server_public_key will be set.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:27:message KeyClaimResponse {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:33:    // Indicates the key is invalid, or already registered.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:34:    INVALID_KEY = 4;
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:38:  optional bytes server_public_key = 2; // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:54:  // server_public_key is provided by the Diagnosis Server to the App, and is
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:55:  // used to encrypt the payload. This key should be stored locally for 14
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:56:  // days, and used to submit the follow-up Diagnosis Key.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:57:  optional bytes server_public_key = 1; // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:58:  // app_public_key is the public side of a keypair generated once by the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:59:  // application and linked to the server_public_key. These are linked in the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:60:  // Diagnosis Server, so that only one app_public_key is authorized to upload
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:61:  // for a given server_public_key. If a new server_public_key is issued to an App
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:62:  // (e.g. months later), a new app_public_key should be generated.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:63:  optional bytes app_public_key = 2; // 32 bytes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:65:  // subsequent submissions of Diagnosis Keys. This nonce is passed to the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:80:    INVALID_KEYPAIR = 2;
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:85:    TOO_MANY_KEYS = 7;
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:90:    INVALID_KEY_DATA = 11;
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:93:    NO_KEYS_IN_PAYLOAD = 14;
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:102:  // keys returns from the ExposureNotification API.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:103:  repeated TemporaryExposureKey keys = 2;
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:110:// https://developers.google.com/android/exposure-notifications/exposure-key-file-format
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:112:// The format of the /keys endpoints is a stream of serialized File
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:117:// Note, as a special case, that if there are no keys at all in the requested
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:124:message TemporaryExposureKeyExport {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:125:  // Time window of keys in the file, based on arrival
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:130:  // Region from which these keys came (for example, MCC, however, some schemes
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:143:  // The temporary exposure keys themselves.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:144:  repeated TemporaryExposureKey keys = 7;
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:146:  // Keys that have changed status from previous key archives,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:147:  // including keys that are being revoked.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:148:  repeated TemporaryExposureKey revised_keys = 8;
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:157:  // Key version in case the EN server signing key is rotated.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:158:  optional string verification_key_version = 3;
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:160:  // Additional information to uniquely identify the public key associated with
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:161:  // the EN server's signing key (for example, the EN server might serve the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:162:  // app from different countries with different keys).
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:164:  // Three-digit mobile country code (MCC) for validating the key file.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:168:  optional string verification_key_id = 4;
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:170:  // All keys must be signed using the SHA-256 with ECDSA algorithm.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:175:message TemporaryExposureKey {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:176:  // Temporary exposure key.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:177:  optional bytes key_data = 1;
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:179:  // Varying risk associated with a key depending on the diagnosis method.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:183:  // key validity (ENIntervalNumber).
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:189:  // Data type that represents why this key was published.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:196:    REVOKED = 5;  // Used to revoke a key, never returned by client API.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:199:  // Type of diagnosis associated with a key.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:214:  // Information to uniquely identify the public key associated 
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/covidshield.proto:215:  // with the EN server's signing key.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:19:* `/retrieve`: Fetch a set of Diagnosis Keys for a given UTC date number
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:20:* `/upload`: Upload a batch of Diagnosis Keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:21:* `/new-key-claim`: Generate One-Time-Code to permit an app user to upload keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:22:* `/claim-key`: Convert One-Time-Code into a credential that permits upload
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:27:## `/new-key-claim`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:33:    POST /new-key-claim
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:43:[`examples/new-key-claim`](https://github.com/cds-snc/covid-alert-server/tree/master/examples/new-key-claim).
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:48:## `/claim-key`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:51:[KeyClaimRequest](covidshield.proto). The server responds with a
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:52:[KeyClaimResponse](covidshield.proto). Additional documentation can be found attached to the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:56:    POST /claim-key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:59:    <serialized KeyClaimRequest>
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:64:    <serialized KeyClaimResponse>
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:86:Duplicate keys will be filtered by the server. Some time on day T+14, the keypairs used for
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:106:purely to make it much more difficult to casually scrape these keys.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:116:`TemporaryKeyExport`, and `encoded.sig` contains a serialized `TEKSignatureList`. These are passed
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:120:Diagnosis Key was accepted by the Diagnosis Server, NOT the date for which the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:121:TemporaryExposure/Diagnosis Keys being fetched were active. However, the keys returned by this
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:122:endpoint will only include key data from Keys active between 0 and 14 days ago (relative to the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:125:The rationale for this is: a client should fetch the key data for the past 14 days initially.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:126:There's no need to cache historical keys locally, or to ever fetch them again or feed them into
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:127:future ExposureSessions, as long as the application has recorded locally that keys have been fetched
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:132:Note that, over time, historical packs will get smaller: the server will prune keys that, at the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:133:time of pack generation, are more than 14 days old. However, no new keys will ever be added to a
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:136:Since the Exposure Notification Framework doesn't track keys before it is enabled, and since the
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:137:Framework never allows extraction of a key that is still active, there is little value in retrieving
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:141:full history of 14 days of keys (168 periods) will be relevant if the App has been installed for
/mnt/c/Users/conig/Desktop/test/covid-alert-server/proto/README.md:142:over 14 days. So, each time an Application checks for new keys, they should fetch every un-fetched
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:19:   - [Retrieving diagnosis keys](#retrieving-diagnosis-keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:21:   - [Submitting diagnosis keys](#submitting-diagnosis-keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:37:* **Retrieving diagnosis keys**: retrieving a list of all keys uploaded by other users; and
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:38:* **Submitting diagnosis keys**: sharing keys returned from the EN framework with the server.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:40:These two operations are implemented as two separate servers (`key-submission` and `key-retrieval`)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:44:`key-retrieval`.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:49:### Retrieving diagnosis keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:51:When diagnosis keys are uploaded, the `key-submission` server stores the data defined and required
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:54:prevent correlation of multiple keys to the same user).
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:56:The hour of submission is used to group keys into buckets, in order to prevent clients ([COVID Alert mobile app](https://github.com/cds-snc/covid-alert-app)) from having to download a given set of key data
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:59:The published diagnosis keys are fetched—with some best-effort authentication—from a Content
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:60:Distribution Network (CDN), backed by `key-retrieval`. This allows a functionally-arbitrary number
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:66:used to determine the risk of a given exposure, is also retrieved from the `key-retrieval` server. A JSON
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:75:### Submitting diagnosis keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:79:communicates with `key-submission`. This code is sent to the patient, who enters the code into their
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:81:Application (once) to the diagnosis server. Encryption keypairs are exchanged by the Application
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:82:and the `key-submission` server to be stored for fourteen days, and the One Time Code is immediately
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:85:These keypairs are used to encrypt and authorize _Diagnosis Key_ uploads for the next fourteen
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:88:The encryption scheme employed for key upload is _NaCl Box_ (a public-key encryption scheme using
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:94:The _Diagnosis Key_ retrieval protocol used in _COVID Alert_ was designed to restrict the data
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:95:transfer to a minimum. With large numbers of keys and assuming the client fetches using compression,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:96:there is minimal protocol overhead on top of the key data size of 16 bytes.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:100:* Each case may generate up to 28 keys.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:101:* Keys are valid and distributed for 14 days.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:102:* Each key entails just under 18 bytes of data transfer when using compression.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:103:* Key metadata and protocol overhead should in reality be minimal, but:
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:129:built into the protocol to implement key namespacing, in order to not serve up the entire set of
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:130:global diagnosis keys to each and every person in the world, but let's work through the number in
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:143:This depends on a separate service, holding credentials to talk to this (`key-submission`) server.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:147:languages](https://github.com/cds-snc/covid-alert-server/tree/master/examples/new-key-claim). Most
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:151:curl -XPOST -H "Authorization: Bearer $token" "https://submission.covidshield.app/new-key-claim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:161:- `key-submission` depends on being deployed behind a firewall (e.g. [AWS
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:164:- `key-retrieval` assumes it will be deployed behind a caching reverse proxy.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:176:COVID Alert uses [OpenTelemetry](https://github.com/open-telemetry/opentelemetry-go) to configure the metrics and tracing for the server, both the key retrieval and key submission.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:262:Ces deux opérations sont implémentées en tant que deux serveurs distincts (`key-submission` et `key-retrieval`) générés à partir de cette base de code, et peuvent être déployées indépendamment tant qu’elles partagent une base de données. Il est également possible de déployer n’importe quel nombre de configurations pour chacun de ces composants, connectés à la même base de données, même s’il y aurait peu d’utilité à déployer plusieurs configurations de `key-retrieval`.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:268:Au moment du téléversement des clés de diagnostic, le serveur `key-submission` stocke les données définies et requises par l’interface de programmation d’applications (API) de notification d’exposition en plus de la date à laquelle les données ont été reçues par le serveur. L’horodatage de cet envoi est arrondi à l’heure la plus proche pour la protection de la vie privée (pour empêcher la corrélation de plusieurs clés avec le même utilisateur).
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:272:Les clés de diagnostic publiées sont extraites (avec une authentification optimisée) à partir d’un réseau de distribution du contenu (RDC), soutenu par `key-retrieval`. Cela permet un nombre fonctionnellement arbitraire d’utilisateurs simultanés.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:276:[_La configuration de l’exposition_](https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration), utilisée pour déterminer le risque d’une exposition donnée, est également récupérée sur le serveur `key-retrieval`. Un document JSON décrivant la configuration d’exposition actuelle pour une région donnée est disponible par le chemin `/exposure-configuration/<region>.json`, par exemple pour l’Ontario (région `ON`) :
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:285:En bref, lorsque qu’un diagnostic positif est établi, le professionnel de la santé générera un _code à usage unique_ avec une application Web frontale ([COVID Alert Portal](https://github.com/cds-snc/covid-alert-portal)) qui communique avec `key-submission`. Ce code est envoyé au patient, qui entre le code dans son [application mobile _COVID Alert_](https://github.com/cds-snc/covid-alert-app). Ce code est utilisé pour authentifier l’application (une fois) vis-à-vis le serveur de diagnostic. Les paires de clés de chiffrement sont échangées par l’application et le serveur `key-submission` et sont stockée pendant quatorze jours, et la base de données est immédiatement purgée du code à usage unique.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:327:Cette démarche dépend d’un service différent, qui détient des justificatifs pour communiquer avec ce serveur (`key-submission`).
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:328:Nous avons une implémentation à titre d’exemple dont le code source sera bientôt ouvert. Cependant, nous nous attendons à ce que les autorités sanitaires préfèrent intégrer cette fonctionnalité dans leurs systèmes existants. L’intégration est extrêmement simple, et on dispose [d’exemples en plusieurs languages](https://github.com/cds-snc/covid-alert-server/tree/master/examples/new-key-claim). Au minimum :
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:331:curl -XPOST -H "Authorization: Bearer $token" "https://submission.covidshield.app/new-key-claim"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:340:- `key-submission` dépend du déploiement derrière un pare-feu (par exemple [AWS WAF](https://aws.amazon.com/waf/), ce qui freine les utilisateurs de manière agressive par des réponses 400 et 401.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/README.md:342:- `key-retrieval` suppose un déploiement derrière un proxy inverse de mise en cache.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:5:class ClaimKeyTest < MiniTest::Test
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:8:  def test_claim_key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:10:    maxConsecutiveClaimKeyFailures = config["maxConsecutiveClaimKeyFailures"]
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:13:    resp = @sub_conn.post('/claim-key', 'a'*500)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:15:    assert_fields(resp, error: :UNKNOWN, server_public_key: nil, tries_remaining: maxConsecutiveClaimKeyFailures)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:18:    resp = @sub_conn.post('/claim-key', 'a'*100)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:20:    assert_fields(resp, error: :UNKNOWN, server_public_key: nil, tries_remaining: maxConsecutiveClaimKeyFailures)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:23:    kcq = Covidshield::KeyClaimRequest.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:25:      app_public_key: '00001111222233334444555566667777'
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:27:    resp = @sub_conn.post('/claim-key', kcq.to_proto)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:29:    assert_fields(resp, error: :INVALID_ONE_TIME_CODE, server_public_key: nil, tries_remaining: maxConsecutiveClaimKeyFailures - 1, remaining_ban_duration: 0)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:31:    # app_public_key too short
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:32:    kcq = Covidshield::KeyClaimRequest.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:34:      app_public_key: '0000111122223333'
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:36:    resp = @sub_conn.post('/claim-key', kcq.to_proto)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:38:    kcr = Covidshield::KeyClaimResponse.decode(resp.body)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:39:    assert_fields(resp, error: :INVALID_KEY, server_public_key: nil, tries_remaining: maxConsecutiveClaimKeyFailures - 1)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:41:    # app_public_key too short
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:42:    kcq = Covidshield::KeyClaimRequest.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:44:      app_public_key: '0000111122223333'
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:46:    resp = @sub_conn.post('/claim-key', kcq.to_proto)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:48:    kcr = Covidshield::KeyClaimResponse.decode(resp.body)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:49:    assert_fields(resp, error: :INVALID_KEY, server_public_key: nil, tries_remaining: maxConsecutiveClaimKeyFailures - 1)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:51:    # app_public_key too long
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:52:    kcq = Covidshield::KeyClaimRequest.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:54:      app_public_key: '000011112222333344445555666677778888'
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:56:    resp = @sub_conn.post('/claim-key', kcq.to_proto)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:58:    kcr = Covidshield::KeyClaimResponse.decode(resp.body)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:59:    assert_fields(resp, error: :INVALID_KEY, server_public_key: nil, tries_remaining: maxConsecutiveClaimKeyFailures - 1)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:63:      kcq = Covidshield::KeyClaimRequest.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:65:        app_public_key: "0000111122223333444455556666770#{i}"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:67:      resp = @sub_conn.post('/claim-key', kcq.to_proto)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:69:      kcr = Covidshield::KeyClaimResponse.decode(resp.body)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:71:      assert_equal(32, kcr.server_public_key.each_byte.size)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:72:      assert_equal(maxConsecutiveClaimKeyFailures, kcr.tries_remaining)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:77:    kcq = Covidshield::KeyClaimRequest.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:79:      app_public_key: "00001111222233334444555566667706"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:81:    resp = @sub_conn.post('/claim-key', kcq.to_proto)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:83:    kcr = Covidshield::KeyClaimResponse.decode(resp.body)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:85:    assert_equal(32, kcr.server_public_key.each_byte.size)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:86:    assert_equal(maxConsecutiveClaimKeyFailures, kcr.tries_remaining)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:90:    kcq = Covidshield::KeyClaimRequest.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:92:      app_public_key: "00001111222233334444555566667707"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:94:    resp = @sub_conn.post('/claim-key', kcq.to_proto)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:96:    kcr = Covidshield::KeyClaimResponse.decode(resp.body)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:98:    assert_equal(32, kcr.server_public_key.each_byte.size)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:99:    assert_equal(maxConsecutiveClaimKeyFailures, kcr.tries_remaining)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:101:    # app_public_key already exists
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:102:    kcq = Covidshield::KeyClaimRequest.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:104:      app_public_key: '00001111222233334444555566667701'
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:106:    resp = @sub_conn.post('/claim-key', kcq.to_proto)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:108:    kcr = Covidshield::KeyClaimResponse.decode(resp.body)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:109:    assert_equal(:INVALID_KEY, kcr.error)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:113:    (maxConsecutiveClaimKeyFailures - 1).times do |i|
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:116:      assert_fields(resp, error: :INVALID_ONE_TIME_CODE, server_public_key: nil, tries_remaining: maxConsecutiveClaimKeyFailures - (1 + i), remaining_ban_duration: 0)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:121:    kcr = Covidshield::KeyClaimResponse.decode(resp.body)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:127:    kcq = Covidshield::KeyClaimRequest.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:129:      app_public_key: "000011112222333344445555666677aa"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:131:    resp = @sub_conn.post('/claim-key', kcq.to_proto)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:133:    kcr = Covidshield::KeyClaimResponse.decode(resp.body)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:140:      UPDATE failed_key_claim_attempts SET last_failure = last_failure - INTERVAL 3600 SECOND
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:143:    kcq = Covidshield::KeyClaimRequest.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:145:      app_public_key: "000011112222333344445555666677bb"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:147:    resp = @sub_conn.post('/claim-key', kcq.to_proto)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:149:    kcr = Covidshield::KeyClaimResponse.decode(resp.body)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:151:    assert_equal(32, kcr.server_public_key.each_byte.size)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:152:    assert_equal(maxConsecutiveClaimKeyFailures, kcr.tries_remaining)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:156:    kcq = Covidshield::KeyClaimRequest.new(one_time_code: '12341234', app_public_key: '00001111222233334444555566667777')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:157:    @sub_conn.post('/claim-key', kcq.to_proto)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:161:    kcr = Covidshield::KeyClaimResponse.decode(resp.body)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:162:    assert_equal(Covidshield::KeyClaimResponse.new(**fields).to_json, kcr.to_json)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:11:    req = encrypted_request(dummy_payload, new_valid_keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:28:  def test_diagnosis_key_expiration
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:29:    req = encrypted_request(dummy_payload, new_valid_keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:39:    @dbconn.query("UPDATE diagnosis_keys SET hour_of_submission = #{expiry_hour + 1}")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:43:    @dbconn.query("UPDATE diagnosis_keys SET hour_of_submission = #{expiry_hour}")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:47:    @dbconn.query("UPDATE diagnosis_keys SET hour_of_submission = #{expiry_hour - 1}")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:51:  def test_claimed_encryption_key_expiration
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:52:    req = encrypted_request(dummy_payload, new_valid_keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:72:    Helper.with_server(KEY_RETRIEVAL_SERVER, RETRIEVAL_SERVER_ADDR) { }
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:77:    assert_equal(diagnosis, count_diagnosis_keys, "  (from #{caller[0]})") if diagnosis
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:78:    assert_equal(encryption, count_encryption_keys, "  (from #{caller[0]})") if encryption
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:81:  def count_diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:82:    @dbconn.query("SELECT COUNT(*) FROM diagnosis_keys").first.values.first
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:85:  def count_encryption_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:86:    @dbconn.query("SELECT COUNT(*) FROM encryption_keys").first.values.first
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:89:  def dummy_payload(nkeys=1)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:90:    Covidshield::Upload.new(timestamp: Time.now, keys: [tek]*nkeys).to_proto
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:94:    payload, keyset, server_public: keyset[:server_public], app_private: keyset[:app_private],
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:95:    app_public: keyset[:app_public], app_public_to_send: app_public,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:103:      server_public_key: server_public_to_send.to_s,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:104:      app_public_key: app_public_to_send.to_s,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:16:KEY_SUBMISSION_SERVER = File.expand_path('../../build/debug/key-submission --config_file_path ./', __dir__)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:17:KEY_RETRIEVAL_SERVER = File.expand_path('../../build/debug/key-retrieval  --config_file_path ./', __dir__)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:24:rescue KeyError
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:62:        [ENV.fetch("RETRIEVE_HMAC_KEY")].pack("H*"),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:69:      Covidshield::TemporaryExposureKey.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:70:        key_data: data,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:80:      @dbconn.query("SELECT originator FROM encryption_keys").map(&:values).map(&:first)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:84:      @dbconn.query("SELECT originator FROM diagnosis_keys").map(&:values).map(&:first)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:97:        req.url('/new-key-claim')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:104:    def new_valid_keyset
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:107:      app_private_key = RbNaCl::PrivateKey.generate
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:108:      app_public_key  = app_private_key.public_key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:110:      kcq = Covidshield::KeyClaimRequest.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:112:        app_public_key: app_public_key.to_s,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:114:      resp = @sub_conn.post('/claim-key', kcq.to_proto)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:116:      kcr = Covidshield::KeyClaimResponse.decode(resp.body)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:118:      assert_equal(32, kcr.server_public_key.each_byte.size)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:121:        app_public: app_public_key,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:122:        app_private: app_private_key,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:123:        server_public: kcr.server_public_key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:132:      raise('does not adjust diagnosis_keys') if seconds >= 1200
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:135:        UPDATE encryption_keys SET created = created - INTERVAL ? SECOND
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:141:        UPDATE encryption_keys SET created = created - INTERVAL ? HOUR
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:144:        UPDATE diagnosis_keys SET
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:189:      assert_equal(%w(export.bin export.sig), files.keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:202:      with_server(KEY_RETRIEVAL_SERVER, RETRIEVAL_SERVER_ADDR) do |ret_conn|
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:203:        with_server(KEY_SUBMISSION_SERVER, SUBMISSION_SERVER_ADDR) do |sub_conn|
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:213:          'KEY_CLAIM_TOKEN' => 'first-very-long-token=302:second-very-long-token=302',
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:10:    add_message "covidshield.KeyClaimRequest" do
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:12:      optional :app_public_key, :bytes, 2
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:14:    add_message "covidshield.KeyClaimResponse" do
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:15:      optional :error, :enum, 1, "covidshield.KeyClaimResponse.ErrorCode"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:16:      optional :server_public_key, :bytes, 2
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:20:    add_enum "covidshield.KeyClaimResponse.ErrorCode" do
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:25:      value :INVALID_KEY, 4
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:29:      optional :server_public_key, :bytes, 1
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:30:      optional :app_public_key, :bytes, 2
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:40:      value :INVALID_KEYPAIR, 2
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:45:      value :TOO_MANY_KEYS, 7
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:48:      value :INVALID_KEY_DATA, 11
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:51:      value :NO_KEYS_IN_PAYLOAD, 14
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:55:      repeated :keys, :message, 2, "covidshield.TemporaryExposureKey"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:57:    add_message "covidshield.TemporaryExposureKeyExport" do
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:64:      repeated :keys, :message, 7, "covidshield.TemporaryExposureKey"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:65:      repeated :revised_keys, :message, 8, "covidshield.TemporaryExposureKey"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:68:      optional :verification_key_version, :string, 3
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:69:      optional :verification_key_id, :string, 4
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:72:    add_message "covidshield.TemporaryExposureKey" do
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:73:      optional :key_data, :bytes, 1
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:77:      optional :report_type, :enum, 5, "covidshield.TemporaryExposureKey.ReportType"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:80:    add_enum "covidshield.TemporaryExposureKey.ReportType" do
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:101:  KeyClaimRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("covidshield.KeyClaimRequest").msgclass
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:102:  KeyClaimResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("covidshield.KeyClaimResponse").msgclass
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:103:  KeyClaimResponse::ErrorCode = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("covidshield.KeyClaimResponse.ErrorCode").enummodule
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:108:  TemporaryExposureKeyExport = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("covidshield.TemporaryExposureKeyExport").msgclass
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:110:  TemporaryExposureKey = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("covidshield.TemporaryExposureKey").msgclass
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/protocol/covidshield_pb.rb:111:  TemporaryExposureKey::ReportType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("covidshield.TemporaryExposureKey.ReportType").enummodule
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_hash_id_test.rb:5:class NewKeyClaimhashIDTest < MiniTest::Test
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_hash_id_test.rb:8:  def test_new_key_claim
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_hash_id_test.rb:10:    maxConsecutiveClaimKeyFailures = config["maxConsecutiveClaimKeyFailures"]
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_hash_id_test.rb:13:      req.url('/new-key-claim/abcd')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_hash_id_test.rb:21:      resp = @sub_conn.send(meth, "/new-key-claim/#{hash_id}")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_hash_id_test.rb:26:      req.url("/new-key-claim/#{hash_id}")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_hash_id_test.rb:34:      req.url("/new-key-claim/#{hash_id}")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_hash_id_test.rb:42:    kcq = Covidshield::KeyClaimRequest.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_hash_id_test.rb:44:      app_public_key: "00001111222233334444555566667710"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_hash_id_test.rb:46:    resp = @sub_conn.post('/claim-key', kcq.to_proto)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_hash_id_test.rb:47:    kcr = Covidshield::KeyClaimResponse.decode(resp.body)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_hash_id_test.rb:49:    assert_equal(32, kcr.server_public_key.each_byte.size)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_hash_id_test.rb:50:    assert_equal(maxConsecutiveClaimKeyFailures, kcr.tries_remaining)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_hash_id_test.rb:55:      req.url("/new-key-claim/#{hash_id}")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_test.rb:5:class NewKeyClaimTest < MiniTest::Test
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_test.rb:8:  def test_new_key_claim
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_test.rb:9:    resp = @sub_conn.post('/new-key-claim')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_test.rb:13:      req.url('/new-key-claim')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_test.rb:19:      req.url('/new-key-claim')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_test.rb:26:      req.url('/new-key-claim')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/new_key_claim_test.rb:33:      resp = @sub_conn.send(meth, '/new-key-claim')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:22:    export = Covidshield::TemporaryExposureKeyExport.decode(export_proto)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:26:  def test_retrieve_period_happy_path_no_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:30:    assert_keys(export, [], region: 'CA', date_number: dn)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:76:    add_key(active_at: active_at, submitted_at: time_in_date('07:00', yesterday_utc))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:83:    keys = [tek(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:87:    assert_keys(export, keys, region: 'CA', date_number: dn)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:90:  def test_all_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:96:    # Our retrieve endpoint returns keys SUBMITTED within the given period.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:97:    add_key(active_at: active_at, submitted_at: time_in_date("23:59:59", fiveteen_days_ago), data: '1' * 16)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:98:    add_key(active_at: active_at, submitted_at: time_in_date("00:00", fourteen_days_ago), data: '2' * 16)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:99:    add_key(active_at: active_at, submitted_at: time_in_date("01:59:59", yesterday_utc), data: '3' * 16)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:100:    add_key(active_at: active_at, submitted_at: time_in_date("02:00", yesterday_utc), data: '4' * 16)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:101:    add_key(active_at: active_at, submitted_at: time_in_date("02:00", yesterday_utc), data: '5' * 16)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:102:    add_key(active_at: active_at, submitted_at: time_in_date("02:00", today_utc), data: '6' * 16)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:112:      keys = [tek(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:129:      assert_equal(keys, export.keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:139:    # Our retrieve endpoint returns keys SUBMITTED within the given period.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:140:    add_key(active_at: active_at, submitted_at: time_in_date("23:59:59", two_days_ago), data: '1' * 16)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:141:    add_key(active_at: active_at, submitted_at: time_in_date("00:00", yesterday_utc), data: '2' * 16)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:142:    add_key(active_at: active_at, submitted_at: time_in_date("01:59:59", yesterday_utc), data: '3' * 16)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:143:    add_key(active_at: active_at, submitted_at: time_in_date("02:00", yesterday_utc), data: '4' * 16)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:151:    keys = [tek(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:164:    assert_equal(keys, export.keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:171:      [ENV.fetch("RETRIEVE_HMAC_KEY")].pack("H*"),
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:179:    # hmac is keyed to date
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:192:  def test_too_many_keys_for_one_zip
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:207:      add_key(active_at: new, submitted_at: time_in_date("00:00", yesterday_utc), data: SecureRandom.bytes(16))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:209:    add_key(region: 'BC', active_at: new, submitted_at: time_in_date("00:00", yesterday_utc), data: SecureRandom.bytes(16))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:228:    key_data = []
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:238:      key_data.concat(file.keys.map(&:key_data))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:241:    assert_equal(18001, key_data.size)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:242:    assert_equal(18001, key_data.uniq.size)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:247:  def expect_one_key(resp, rsin, risk, data, start_time, end_time)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:251:        Covidshield::TemporaryExposureKeyExport.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:257:          keys: [
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:258:            Covidshield::TemporaryExposureKey.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:259:              key_data: data,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:271:  def expect_no_keys(resp)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:277:  def add_key(data: '1' * 16, active_at:, submitted_at:, transmission_risk_level: 8, region: '302')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:278:    add_key_explicit(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:287:  def insert_key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:288:    @insert_key ||= @dbconn.prepare(<<~SQL)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:289:      INSERT INTO diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:290:      (key_data, rolling_start_interval_number, rolling_period, transmission_risk_level, hour_of_submission, region)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:295:  def add_key_explicit(data: '1' * 16, rsin:, transmission_risk_level: 8, hour:, region: '302', rolling_period: TEK_ROLLING_PERIOD)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:296:    insert_key.execute(data, rsin, rolling_period, transmission_risk_level, hour, region)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:311:    key_hex = ENV.fetch('ECDSA_KEY')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:312:    key_der = [key_hex].pack('H*')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:313:    key = OpenSSL::PKey::EC.new(key_der)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:314:    key.check_key
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:316:    key.dsa_verify_asn1(digest, signature)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:319:  def assert_keys(export, keys, region:, date_number:)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:324:      Covidshield::TemporaryExposureKeyExport.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:332:            verification_key_version: "v1",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:333:            verification_key_id: "302",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:337:        keys: keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:351:              verification_key_version: "v1",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:352:              verification_key_id: "302",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:18:  def test_key_roundtrip
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:21:    keys = [
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:36:    first_keys = keys.dup
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:38:    payload = Covidshield::Upload.new(timestamp: Time.now, keys: keys).to_proto
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:40:    credentials = new_valid_keyset
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:44:    expect_keys([]) # no visible keys because these are still in the current day
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:48:    # Replace one of the 14 keys with a "new" one
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:49:    keys.pop
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:50:    keys.each { |k| k.rolling_start_interval_number -= 144 }
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:51:    keys.unshift(tek(data: '111111111111111z', rolling_start_interval_number: days_ago_at_noon(1)))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:52:    payload = Covidshield::Upload.new(timestamp: Time.now, keys: keys).to_proto
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:58:    expect_keys(first_keys[0..-1]) ###############################################################################################################################
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:61:    expect_keys(first_keys[0..-1])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:64:    expect_keys(first_keys[0..-1])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:67:    expect_keys(first_keys[0..0] + [keys.first])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:71:    expect_keys(first_keys[0..0] + [keys.first])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:74:    expect_keys(first_keys[0..0] + [keys.first])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:77:    # how far we were into the UTC date when we created the keypair.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:85:    expect_keys([keys.first])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:90:    assert_result(resp, 401, :INVALID_KEYPAIR, 14)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:91:    expect_keys([])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:96:  def expect_keys(want_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:97:    keys = []
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:104:      keys.concat(parse_keys(resp))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:107:    have_key_ids =      keys.map { |k| k.key_data[-1] }.sort
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:108:    want_key_ids = want_keys.map { |k| k.key_data[-1] }.sort
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:109:    assert_equal(want_key_ids, have_key_ids, "  (from #{caller[0]})")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:112:  def parse_keys(resp)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:114:    export = Covidshield::TemporaryExposureKeyExport.decode(export_proto[16..-1])
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:115:    export.keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:118:  def count_diagnosis_keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:119:    @dbconn.query("SELECT COUNT(*) FROM diagnosis_keys").first.values.first
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:126:  def dummy_payload(nkeys=1)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:127:    Covidshield::Upload.new(timestamp: Time.now, keys: [tek]*nkeys).to_proto
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:131:    payload, keyset, server_public: keyset[:server_public], app_private: keyset[:app_private],
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:132:    app_public: keyset[:app_public], app_public_to_send: app_public,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:140:      server_public_key: server_public_to_send.to_s,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:141:      app_public_key: app_public_to_send.to_s,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:147:  def assert_result(resp, code, error, keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:153:    assert_equal(keys, count_diagnosis_keys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:19:    req = encrypted_request(dummy_payload, new_valid_keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:25:    req = encrypted_request(dummy_payload(timestamp: Time.at(Time.now.to_i - 59*60)), new_valid_keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:30:    req = encrypted_request(dummy_payload(timestamp: Time.at(Time.now.to_i - 3600)), new_valid_keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:35:    req = encrypted_request(dummy_payload, new_valid_keyset, app_public_to_send:("a"*50))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:40:    req = encrypted_request(dummy_payload, new_valid_keyset, app_public_to_send:("a"*4))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:45:    req = encrypted_request(dummy_payload, new_valid_keyset, server_public_to_send:("a"*4))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:50:    req = encrypted_request(dummy_payload, new_valid_keyset, server_public_to_send:("a"*50))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:55:    req = encrypted_request(dummy_payload, new_valid_keyset, server_public_to_send:("a"*32))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:57:    assert_result(resp, 401, :INVALID_KEYPAIR)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:60:    req = encrypted_request(dummy_payload, new_valid_keyset, server_public_to_send:("a"*4))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:65:    req = encrypted_request(dummy_payload, new_valid_keyset, server_public_to_send:("a"*50))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:70:    req = encrypted_request(dummy_payload, new_valid_keyset, nonce_to_send:("a"*23))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:75:    req = encrypted_request(dummy_payload, new_valid_keyset, nonce_to_send:("a"*32))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:80:    req = encrypted_request(dummy_payload, new_valid_keyset, encrypted_payload:("a"*64))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:85:    req = encrypted_request("aaaaaaaaaa", new_valid_keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:89:    # max acceptable number of keys (28)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:90:    req = encrypted_request(dummy_payload(28, make_half_day=true), new_valid_keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:94:    # no keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:95:    req = encrypted_request(dummy_payload(0), new_valid_keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:97:    assert_result(resp, 400, :NO_KEYS_IN_PAYLOAD)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:99:    # too many keys
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:100:    req = encrypted_request(dummy_payload(29), new_valid_keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:102:    assert_result(resp, 400, :TOO_MANY_KEYS)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:112:    # key data absent, too long, too short
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:113:    assert_tek_fails(:INVALID_KEY_DATA, key_data: nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:114:    assert_tek_fails(:INVALID_KEY_DATA, key_data: '1'*15)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:115:    assert_tek_fails(:INVALID_KEY_DATA, key_data: '1'*17)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:117:    # key data absent, too long, too short
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:158:    payload = Covidshield::Upload.new(timestamp: ts, keys: [tek]).to_proto
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:159:    req = encrypted_request(payload, new_valid_keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:165:    payload = Covidshield::Upload.new(timestamp: ts, keys: teks).to_proto
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:166:    req = encrypted_request(payload, new_valid_keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:171:    keys = (1..50).map { |n| key_n(n) }
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:173:    # Keep 14 days as single key days and make the rest double keys (28 for the next 14 days)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:175:      keys[n]["rolling_period"] = rand(1...144)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:176:      keys[n + 18]["rolling_period"] = rand(1...144)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:177:      keys[n + 18]["rolling_start_interval_number"] = keys[n]["rolling_start_interval_number"] 
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:180:    keys = keys.sort_by { |k| k["rolling_start_interval_number"] }.reverse
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:182:    keyset = new_valid_keyset
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:186:      timestamp: Time.now, keys: keys[0..14]
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:188:    req = encrypted_request(payload, keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:194:      timestamp: Time.now, keys: keys[15..41]
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:196:    req = encrypted_request(payload, keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:202:      timestamp: Time.now, keys: keys[42..43]
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:204:    req = encrypted_request(payload, keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:206:    assert_result(resp, 400, :TOO_MANY_KEYS)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:210:      timestamp: Time.now, keys: [keys[42]]
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:212:    req = encrypted_request(payload, keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:218:      timestamp: Time.now, keys: [keys[43]]
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:220:    req = encrypted_request(payload, keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:222:    assert_result(resp, 400, :INVALID_KEYPAIR)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:227:  def key_n(n)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:228:    tek(key_data: n.chr * 16)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:233:    req = encrypted_request(tek_payload(tek(**kwargs)), new_valid_keyset)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:239:    Covidshield::Upload.new(timestamp: Time.now, keys: [tek]).to_proto
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:242:  def dummy_payload(nkeys=1, make_half_day=false, timestamp: Time.now)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:243:    if make_half_day # This makes the keys have the same RSIN with different rolling periods
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:244:      keys = (nkeys / 2).times.map{tek}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:245:      keys = (keys + keys).map{ |k| k.rolling_period = rand(1...144); k}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:247:      keys = nkeys.times.map{tek}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:250:    Covidshield::Upload.new(timestamp: timestamp, keys: keys).to_proto
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:254:    payload, keyset, server_public: keyset[:server_public], app_private: keyset[:app_private],
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:255:    app_public: keyset[:app_public], app_public_to_send: app_public,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:263:      server_public_key: server_public_to_send.to_s,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:264:      app_public_key: app_public_to_send.to_s,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:270:  def tek(key_data: '1' * 16, transmission_risk_level: 3, rolling_period: 144, rolling_start_interval_number: next_rsin)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:271:    Covidshield::TemporaryExposureKey.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/upload_test.rb:272:      key_data: key_data,
