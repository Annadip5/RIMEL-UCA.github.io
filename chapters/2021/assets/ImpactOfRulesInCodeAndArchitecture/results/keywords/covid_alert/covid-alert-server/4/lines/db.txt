/mnt/c/Users/conig/Desktop/test/covid-alert-server/.devcontainer/docker-compose.yml:15:      - db
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.devcontainer/docker-compose.yml:17:      DB_USER: test
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.devcontainer/docker-compose.yml:18:      DB_PASS: password
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.devcontainer/docker-compose.yml:19:      DB_HOST: db
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.devcontainer/docker-compose.yml:20:      DB_NAME: test
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.devcontainer/docker-compose.yml:21:      DB_PORT: 3306
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.devcontainer/docker-compose.yml:22:      DATABASE_URL: "test:password@tcp(db)/test"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.devcontainer/docker-compose.yml:29:  db:
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.devcontainer/Dockerfile:21:    && apt-get -y install protobuf-compiler git openssh-client less iproute2 procps lsb-release libsodium-dev mariadb-client \
Binary file /mnt/c/Users/conig/Desktop/test/covid-alert-server/.git/index matches
Binary file /mnt/c/Users/conig/Desktop/test/covid-alert-server/.git/objects/pack/pack-0114be98b3fe31909bf2065d859d0464b1507baa.idx matches
Binary file /mnt/c/Users/conig/Desktop/test/covid-alert-server/.git/objects/pack/pack-0114be98b3fe31909bf2065d859d0464b1507baa.pack matches
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.git/packed-refs:3:d601ae16182f4f925d60db07b9f71299372da5cd refs/remotes/origin/code-scanning-integration-1
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.git/packed-refs:5:9351aca14087db3ca41788e4eac577cf42d435e8 refs/remotes/origin/deploy_after_terraform_apply
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.git/packed-refs:10:e0db537a1bf86c6fe2c58d7190de6b01db189500 refs/remotes/origin/feature/20200630-exposure-configuration
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/deploy-containers.yml:35:        uses: fountainhead/action-wait-for-check@4699210ccc66e2a13260803fadbb77085421b891
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/deploy-containers.yml:90:          jq  --argjson port "$CONTAINER_PORT" --arg cname "$CONTAINER_NAME" --arg taskdefarn "$TASKDEF_ARN" --arg lambda "${{ matrix.LAMBDA }}" '.Resources[0].TargetService.Properties.TaskDefinition = $taskdefarn | .Resources[0].TargetService.Properties.LoadBalancerInfo.ContainerName = $cname | .Resources[0].TargetService.Properties.LoadBalancerInfo.ContainerPort = $port | .Hooks[0].BeforeAllowTraffic = $lambda ' config/infrastructure/aws/appspec-template.json > ${{ matrix.APPSPEC_FILE }}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/pr-test-ruby-ci.yml:34:    - name: Verify DB connection
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/pr-test-ruby-ci.yml:47:        DB_USER: test
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/pr-test-ruby-ci.yml:48:        DB_PASS: password
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/pr-test-ruby-ci.yml:49:        DB_HOST: 127.0.0.1
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/pr-test-ruby-ci.yml:50:        DB_NAME: test
/mnt/c/Users/conig/Desktop/test/covid-alert-server/.github/workflows/pr-test-ruby-ci.yml:51:        DB_PORT: 3306
/mnt/c/Users/conig/Desktop/test/covid-alert-server/app.json:4:      "addons": ["jawsdb:kitefin"],
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/add-vpn-nsg.sh:11:  --group-id "$DB"  \
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/get-sg-ids.sh:16:DB="$(getSG "covidshield-database")"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/get-sg-ids.sh:17:export DB
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/remove-vpn-nsg.sh:9:  --group-id "$DB"  \
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:11:_sym_db = _symbol_database.Default()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:73:_sym_db.RegisterEnumDescriptor(_KEYCLAIMRESPONSE_ERRORCODE)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:158:_sym_db.RegisterEnumDescriptor(_ENCRYPTEDUPLOADRESPONSE_ERRORCODE)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:657:_sym_db.RegisterFileDescriptor(DESCRIPTOR)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:664:_sym_db.RegisterMessage(KeyClaimRequest)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:671:_sym_db.RegisterMessage(KeyClaimResponse)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:678:_sym_db.RegisterMessage(EncryptedUploadRequest)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:685:_sym_db.RegisterMessage(EncryptedUploadResponse)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:692:_sym_db.RegisterMessage(Upload)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:699:_sym_db.RegisterMessage(TemporaryExposureKeyExport)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:706:_sym_db.RegisterMessage(SignatureInfo)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:713:_sym_db.RegisterMessage(TemporaryExposureKey)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:720:_sym_db.RegisterMessage(TEKSignatureList)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/covidshield_pb2.py:727:_sym_db.RegisterMessage(TEKSignature)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:51:    url = 'https://submission.wild-samphire.cdssandbox.xyz/upload'
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:90:    url = 'https://submission.wild-samphire.cdssandbox.xyz/new-key-claim'
/mnt/c/Users/conig/Desktop/test/covid-alert-server/bin/stuff-database/main.py:103:    url = 'https://submission.wild-samphire.cdssandbox.xyz/claim-key'
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CODE_OF_CONDUCT.md:24:* Giving and gracefully accepting constructive feedback
/mnt/c/Users/conig/Desktop/test/covid-alert-server/commit_msgs.md:40:- db
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config/infrastructure/aws/appspec-template.json:10:                    "LoadBalancerInfo": {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config/infrastructure/aws/README.md:19:| Load balancing | [Elastic Load Balancing](https://aws.amazon.com/elasticloadbalancing/) |
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config/infrastructure/aws/README.md:59:- `TF_VAR_rds_backend_db_password`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config/infrastructure/aws/README.md:73:> TF_VAR_ecs_task_key_retrieval_env_ecdsa_key="******" TF_VAR_ecs_task_key_retrieval_env_hmac_key="******" TF_VAR_ecs_task_key_submission_env_key_claim_token="******" TF_VAR_rds_backend_db_password="******" AWS_ACCESS_KEY_ID="******" AWS_SECRET_ACCESS_KEY="******" terraform [init|plan|apply]
/mnt/c/Users/conig/Desktop/test/covid-alert-server/config.yaml:32:enableEntirePeriodBundle: true
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:66:./build/release/key-retrieval migrate-db
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:81:$ export DB_USER=<username>
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:82:$ export DB_PASS=<password>
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:83:$ export DB_HOST=<hostname>
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:84:$ export DB_NAME=<test database name>
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:165:./build/release/key-retrieval migrate-db
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:178:$ export DB_USER=<username>
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:179:$ export DB_PASS=<password>
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:180:$ export DB_HOST=<hostname>
/mnt/c/Users/conig/Desktop/test/covid-alert-server/CONTRIBUTING.md:181:$ export DB_NAME=<test database name>
/mnt/c/Users/conig/Desktop/test/covid-alert-server/docker-compose.yml:7:      - ./tmp/db:/var/lib/mysql
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/retrieval/app.rb:105:    db_transaction do
/mnt/c/Users/conig/Desktop/test/covid-alert-server/examples/retrieval/app.rb:121:  def db_transaction
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:23:github.com/DataDog/sketches-go v0.0.0-20190923095040-43f19ad77ff7/go.mod h1:Q5DbzQ+3AkgGwymQO7aZFNP7ns2lZKGtvRBzRXfdi60=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:28:github.com/StackExchange/wmi v0.0.0-20190523213315-cbe66965904d h1:G0m3OIz70MZUWq3EgK3CesDbo8upS2Vm9/P3FtgI+Jk=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:76:github.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:122:github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:128:github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:150:github.com/grpc-ecosystem/grpc-gateway v1.9.0/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:151:github.com/hashicorp/consul/api v1.1.0/go.mod h1:VmuI/Lkw1nC05EYQWNKwWGbkg+FbDBtguAZLlVdkD9Q=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:189:github.com/konsorten/go-windows-terminal-sequences v1.0.2 h1:DB17ag19krx9CFsz4o3enTrPXyIXCl+2iCXH/aMAp9s=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:235:github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:240:github.com/prometheus/client_golang v1.0.0/go.mod h1:db9x61etRT2tGnBNRi70OPL5FsnadC4Ky3P0J6CfImo=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:243:github.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:259:github.com/prometheus/tsdb v0.7.1/go.mod h1:qhTCs0VvXwvX/y3TZrWD7rabWM+ijKTux40TwIPHuXU=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:275:github.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:321:golang.org/x/exp v0.0.0-20191030013958-a1ab85dbe136/go.mod h1:JXzH8nQsPlswgeRAPE3MuO9GYsAcnJvJ4vnMwN/5qkY=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:333:golang.org/x/mobile v0.0.0-20190312151609-d3739f865fa6/go.mod h1:z+o9i4GpDbdi3rU15maQ/Ox0txvL9dWGYEHz965HBQE=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:345:golang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:371:golang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:411:golang.org/x/tools v0.0.0-20190628153133-6cdbf07be9d0/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:413:golang.org/x/tools v0.0.0-20190911174233-4f2ddba30aff/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:441:google.golang.org/genproto v0.0.0-20191009194640-548a555dbc03/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:454:google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:467:gopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:484:honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:485:honnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:486:honnef.co/go/tools v0.0.0-20190418001031-e561f6794a2a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/go.sum:487:honnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:55:          "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:87:      "integrity": "sha512-plcc+hbExy3McchJCEQG3knOsuh3HH+Prx1P6cLIkET/0dLuQDEnrT+s27Axgc9bqfsmNUNHfscgMUdBpC9xfg==",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:188:      "integrity": "sha512-01ObK/18JL7PEIE3dBRtoMmU6S3ecPYDTQWWhcO+ErA3Ai0KDYqV5VWWEijdcVafNpdeUNrEMigRkxXHQLbyJA==",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:194:      "integrity": "sha512-DekKQAIYWAXIcyAZ6/PDBJylWJ1BROTfDIzr9PMVxZRxBPc1gW2TG8fLgjZfBP5mc0cuthPkVi91KQQKGri/7A==",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:282:          "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:305:      "integrity": "sha512-f5j5b/Gf71L+dbqxIpQ4Z2WlmI/mPJ0fOkGGmFgtb6sAu97EPczzbS3/tJKxmcYDj55OX6ssqwDAWOHIYDRDGA==",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:333:      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:744:      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:1000:          "integrity": "sha512-q+MB8nYR1KDLrgr4G5yemftpMC7/QLqVndBmEEdqzmNj5dcFOO4Oo8qlwZE3ULT3+Zim1F8Kq4cBnikNhlCMlg==",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:1019:          "integrity": "sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA==",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/package-lock.json:1042:      "integrity": "sha512-6tDA8g98We0zd0GvVeMT9arEOnTw9qM03L9cJXaCjrip1OO764RDBLBfrB4cwzNGDj5OA5ioymC9GkizgWJDUg==",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:74:	migrateDB(DatabaseURL()) // This is a bit of a weird place for this but it works for now.
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:111:func newDatabase(dbURL string) persistence.Conn {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:112:	db, err := persistence.Dial(dbURL)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:113:	fatalIfErr(err, "could not create db object")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:115:	return db
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:128:func newExpirationWorker(db persistence.Conn) workers.Worker {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:129:	worker, err := workers.StartExpirationWorker(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/app/app.go:140:func migrateDB(databaseURL string) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/cmd/cmd.go:17:	mainApp, db := appBuilder.Build()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/cmd/cmd.go:19:	defer telemetry.Initialize(db).Cleanup()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:27:	EnableEntirePeriodBundle           bool
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/config/config.go:66:	viper.SetDefault("enableEntirePeriodBundle", false)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator.go:19:// 1234deadbeefcafe=1:c0ffeec0ffeec0ffee=2
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:50:	expectedBool := true
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:51:	receivedRegion, receivedBool := authenticator.Authenticate(strings.Repeat("a", 20))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:53:	assert.Equal(t, expectedBool, receivedBool, "Expected bool is true on invalid token")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:57:	expectedBool = false
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:58:	receivedRegion, receivedBool = authenticator.Authenticate(strings.Repeat("c", 20))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/keyclaim/authenticator_test.go:60:	assert.Equal(t, expectedBool, receivedBool, "Expected bool is false on invalid token")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:67:	db *sql.DB
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:70:var log = logger.New("db")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:113:	db, err := sql.Open("mysql", url)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:117:	db.SetConnMaxLifetime(maxConnLifetime)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:118:	db.SetMaxOpenConns(maxOpenConns)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:119:	db.SetMaxIdleConns(maxIdleConns)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:120:	return &conn{db: db}, nil
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:124:	return deleteOldDiagnosisKeys(c.db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:128:	return deleteExpiredKeys(ctx, c.db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:132:	return deleteExhaustedKeys(ctx, c.db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:136:	return deleteUnclaimedKeys(ctx, c.db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:140:// a transaction to the DB, for some reason no record was created. This must be
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:156:	return claimKey(c.db, oneTimeCode, appPublicKey, ctx)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:182:			err = persistEncryptionKeyWithHashID(c.db, region, originator, hashID, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:184:			err = persistEncryptionKey(c.db, region, originator, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:223:	tx, err := c.db.Begin()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:281:	row := privForPub(c.db, pub)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:294:	return registerDiagnosisKeys(c.db, appPubKey, keys, ctx)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:298:	rows, err := diagnosisKeysForHours(c.db, region, startHour, endHour, currentRSIN)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:336:	return checkClaimKeyBan(c.db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:340:	return registerClaimKeySuccess(c.db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:344:	return registerClaimKeyFailure(c.db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:348:	return deleteOldFailedClaimKeyAttempts(c.db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:352:	return countClaimedOneTimeCodes(c.db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:356:	return countDiagnosisKeys(c.db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:360:	return countUnclaimedOneTimeCodes(c.db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db.go:364:	return c.db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:34:func TestDBDeleteOldDiagnosisKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:36:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:37:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:40:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:52:func TestDBDeleteOldExpiredKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:54:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:55:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:58:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:84:func TestDBDeleteOldUnclaimedKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:86:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:87:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:90:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:112:func TestDBDeleteOldExhaustedKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:114:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:115:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:118:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:137:func TestDBClaimKey(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:138:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:139:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:142:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:211:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:212:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:215:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:263:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:264:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:267:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:305:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:306:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:309:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:372:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:373:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:376:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:418:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:419:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:422:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:492:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:493:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:496:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:524:func TestDBPrivForPub(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:525:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:526:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:529:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:570:func TestDBStoreKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:571:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:572:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:575:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:644:func TestDBFetchKeysForHours(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:645:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:646:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:649:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:691:func TestDBCheckClaimKeyBan(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:692:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:693:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:696:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:706:	expectedBanDuration := time.Duration(0)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:708:	receivedTriesRemaining, receivedBanDuration, _ := conn.CheckClaimKeyBan(identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:715:	assert.Equal(t, expectedBanDuration, receivedBanDuration, "Expected 0 as ban duration")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:718:func TestDBClaimKeySuccess(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:719:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:720:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:723:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:733:func TestDBClaimKeyFailure(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:734:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:735:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:738:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:759:	expectedBanDuration := time.Duration(0)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:761:	receivedTriesRemaining, receivedBanDuration, receivedErr := conn.ClaimKeyFailure(identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:768:	assert.Equal(t, expectedBanDuration, receivedBanDuration, "Expected 0 as ban duration")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:772:func TestDBDeleteOldFailedClaimKeyAttempts(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:773:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:774:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:777:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:789:func TestDBCountClaimedOneTimeCodes(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:790:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:791:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:794:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:807:func TestDBCountDiagnosisKeys(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:808:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:809:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:812:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:825:func TestDBCountUnclaimedOneTimeCodes(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:826:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(allQueryMatcher))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:827:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/db_test.go:830:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events.go:111:	return getServerEventsByType(c.db, date)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events.go:114:func getServerEventsByType(db *sql.DB, date string) ([]Events, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events.go:120:	rows, err := db.Query(`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events.go:166:	return getTEKUploadsByDay(c.db, date)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events.go:169:func getTEKUploadsByDay(db *sql.DB, date string) ([]Uploads, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events.go:175:	rows, err := db.Query(`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:61:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:62:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:77:	tx, _ := db.Begin()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:119:	db, _, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:120:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:122:	_, err := getServerEventsByType(db, "")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:129:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:130:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:142:	events, err := getServerEventsByType(db, "2020-01-01")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:157:	db, _, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:158:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:160:	_, err := getTEKUploadsByDay(db, "")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:167:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:168:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/events_test.go:179:	uploads, err := getTEKUploadsByDay(db, "2020-01-01")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/main_test.go:32:func createNewSqlMock() (*sql.DB, sqlmock.Sqlmock) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/main_test.go:33:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/main_test.go:34:	return db, mock
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries_test.go:11:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries_test.go:18:	tx, _ := db.Begin()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries_test.go:31:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/metric_queries_test.go:37:	tx, _ := db.Begin()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:158:	dbName := parts[len(parts)-1]
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:160:	dbForCreate, err := sql.Open("mysql", strings.TrimSuffix(url, dbName))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:165:	if _, err := dbForCreate.Exec(`CREATE DATABASE IF NOT EXISTS ` + dbName); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:168:	if err := dbForCreate.Close(); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:172:	db, err := sql.Open("mysql", url)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:177:		if err := db.Close(); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:178:			log(nil, err).Error("migrator db close failed")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:182:	if _, err := db.Exec(ensureSchemaMigrations); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:189:	if _, err := db.Exec("LOCK TABLES schema_migrations WRITE"); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:195:		if err := runMigration(db, migration); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:200:	if _, err := db.Exec("UNLOCK TABLES"); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:210:func runMigration(db *sql.DB, migration migration) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:211:	tx, err := db.Begin()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:216:	if err := db.QueryRow("SELECT COUNT(*) FROM schema_migrations WHERE version = ?", migration.id).Scan(&count); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:229:		if _, err := db.Exec(statement); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator.go:237:	if _, err := db.Exec("INSERT INTO schema_migrations (version) VALUES (?)", migration.id); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator_test.go:11:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator_test.go:13:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/migrator_test.go:24:		runMigration(db, migration)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/otk_duration.go:54:	return getAggregateOtkDurationsByDate(c.db, date)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/otk_duration.go:57:func  getAggregateOtkDurationsByDate(db *sql.DB, date string) ([]AggregateOtkDuration, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/otk_duration.go:63:	rows, err := db.Query(`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/otk_duration_test.go:20:	db, mock := createNewSqlMock()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/otk_duration_test.go:21:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/otk_duration_test.go:31:	tx, _ := db.Begin()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/otk_duration_test.go:40:	db, mock := createNewSqlMock()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/otk_duration_test.go:41:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/otk_duration_test.go:52:	tx, _ := db.Begin()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/otk_duration_test.go:62:	db, mock := createNewSqlMock()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/otk_duration_test.go:72:	getAggregateOtkDurationsByDate(db, date)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:32:func deleteOldDiagnosisKeys(db *sql.DB) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:37:	res, err := db.Exec(`DELETE FROM diagnosis_keys WHERE hour_of_submission < ?`, oldestHour)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:45:func deleteExpiredKeys(ctx context.Context, db *sql.DB) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:47:	tx, err := db.Begin()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:66:	res, err := db.Exec(`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:92:func deleteUnclaimedKeys(ctx context.Context, db *sql.DB) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:95:	tx, err := db.Begin()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:137:func deleteExhaustedKeys(ctx context.Context, db *sql.DB) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:139:	tx, err := db.Begin()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:154:	res, err := db.Exec(`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:179:func claimKey(db *sql.DB, oneTimeCode string, appPublicKey []byte, ctx context.Context) ([]byte, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:180:	tx, err := db.Begin()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:299:func persistEncryptionKey(db *sql.DB, region, originator string, pub *[32]byte, priv *[32]byte, oneTimeCode string) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:300:	_, err := db.Exec(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:309:func persistEncryptionKeyWithHashID(db *sql.DB, region, originator, hashID string, pub *[32]byte, priv *[32]byte, oneTimeCode string) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:310:	_, err := db.Exec(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:322:		row := db.QueryRow("SELECT one_time_code FROM encryption_keys WHERE hash_id = ?", hashID)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:326:			_, err = db.Exec(`DELETE FROM encryption_keys WHERE hash_id = ? AND one_time_code IS NOT NULL`, hashID)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:337:func privForPub(db *sql.DB, pub []byte) *sql.Row {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:338:	return db.QueryRow(fmt.Sprintf(`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:353:func diagnosisKeysForHours(db *sql.DB, region string, startHour uint32, endHour uint32, currentRollingStartIntervalNumber int32) (*sql.Rows, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:356:	return db.Query(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:368:func registerDiagnosisKeys(db *sql.DB, appPubKey *[32]byte, keys []*pb.TemporaryExposureKey, ctx context.Context) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:369:	tx, err := db.Begin()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:478:func checkClaimKeyBan(db queryRower, identifier string) (triesRemaining int, banDuration time.Duration, err error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:482:	q := db.QueryRow(`SELECT failures, last_failure FROM failed_key_claim_attempts WHERE identifier = ?`, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:507:func registerClaimKeySuccess(db *sql.DB, identifier string) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:508:	_, err := db.Exec(`DELETE FROM failed_key_claim_attempts WHERE identifier = ?`, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:512:func registerClaimKeyFailure(db *sql.DB, identifier string) (triesRemaining int, banDuration time.Duration, err error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:513:	tx, err := db.Begin()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:544:func deleteOldFailedClaimKeyAttempts(db *sql.DB) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:547:	res, err := db.Exec(`DELETE FROM failed_key_claim_attempts WHERE last_failure < ?`, threshold)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:554:func countClaimedOneTimeCodes(db *sql.DB) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:557:	row := db.QueryRow("SELECT COUNT(*) FROM encryption_keys WHERE one_time_code IS NULL")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:567:func countDiagnosisKeys(db *sql.DB) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:570:	row := db.QueryRow("SELECT COUNT(*) FROM diagnosis_keys")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:580:func countUnclaimedOneTimeCodes(db *sql.DB) (int64, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries.go:583:	row := db.QueryRow("SELECT COUNT(*) FROM encryption_keys WHERE one_time_code IS NOT NULL")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:19:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:20:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:26:	deleteOldDiagnosisKeys(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:40:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:41:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:47:	_, receivedErr := claimKey(db, oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:61:	_, receivedErr = claimKey(db, oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:78:	_, receivedErr = claimKey(db, oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:104:	_, receivedErr = claimKey(db, oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:135:	_, receivedErr = claimKey(db, oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:166:	_, receivedErr = claimKey(db, oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:199:	_, receivedErr = claimKey(db, oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:234:	serverKey, _ := claimKey(db, oneTimeCode, pub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:250:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:251:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:271:	receivedErr := persistEncryptionKey(db, region, originator, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:293:	receivedResult := persistEncryptionKey(db, region, originator, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:304:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:305:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:327:	receivedErr := persistEncryptionKeyWithHashID(db, region, originator, hashID, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:350:	receivedErr = persistEncryptionKeyWithHashID(db, region, originator, hashID, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:377:	receivedErr = persistEncryptionKeyWithHashID(db, region, originator, hashID, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:405:	receivedErr = persistEncryptionKeyWithHashID(db, region, originator, hashID, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:433:	receivedErr = persistEncryptionKeyWithHashID(db, region, originator, hashID, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:456:	receivedResult := persistEncryptionKeyWithHashID(db, region, originator, hashID, pub, priv, oneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:467:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:468:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:485:	privForPub(db, pub[:]).Scan(&receivedResult)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:495:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:496:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:520:	rows, _ := diagnosisKeysForHours(db, region, startHour, endHour, currentRollingStartIntervalNumber)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:534:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:535:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:546:	receivedErr := registerDiagnosisKeys(db, pub, keys, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:560:	receivedErr = registerDiagnosisKeys(db, pub, keys, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:580:	receivedErr = registerDiagnosisKeys(db, pub, keys, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:613:	receivedErr = registerDiagnosisKeys(db, pub, keys, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:654:	receivedErr = registerDiagnosisKeys(db, pub, keys, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:717:	receivedErr = registerDiagnosisKeys(db, pub, keys, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:780:	receivedResult := registerDiagnosisKeys(db, pub, keys, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:790:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:791:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:802:	expectedBanDuration := time.Duration(0)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:804:	receivedTriesRemaining, receivedBanDuration, _ := checkClaimKeyBan(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:811:	assert.Equal(t, expectedBanDuration, receivedBanDuration, "Expected 0 as ban duration")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:817:	expectedBanDuration = time.Duration(0)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:820:	receivedTriesRemaining, receivedBanDuration, receivedErr := checkClaimKeyBan(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:827:	assert.Equal(t, expectedBanDuration, receivedBanDuration, "Expected 0 as ban duration")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:836:	expectedBanDuration = time.Duration(0)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:838:	receivedTriesRemaining, receivedBanDuration, _ = checkClaimKeyBan(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:845:	assert.Equal(t, expectedBanDuration, receivedBanDuration, "Expected 0 as ban duration")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:853:	expectedBanDuration, _ = time.ParseDuration("59m59s")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:855:	receivedTriesRemaining, receivedBanDuration, _ = checkClaimKeyBan(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:862:	assert.GreaterOrEqual(t, receivedBanDuration.Seconds(), expectedBanDuration.Seconds(), "Expected something greater than 59m59s as ban duration")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:870:	expectedBanDuration = time.Duration(0)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:872:	receivedTriesRemaining, receivedBanDuration, _ = checkClaimKeyBan(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:879:	assert.Equal(t, expectedBanDuration, receivedBanDuration, "Expected 0 as ban duration")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:883:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:884:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:889:	receivedResult := registerClaimKeySuccess(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:899:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:900:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:917:	expectedBanDuration := time.Duration(0)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:920:	receivedTriesRemaining, receivedBanDuration, receivedErr := registerClaimKeyFailure(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:927:	assert.Equal(t, expectedBanDuration, receivedBanDuration, "Expected 0 as ban duration")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:946:	expectedBanDuration = time.Duration(0)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:949:	receivedTriesRemaining, receivedBanDuration, receivedErr = registerClaimKeyFailure(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:956:	assert.Equal(t, expectedBanDuration, receivedBanDuration, "Expected 0 as ban duration")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:977:	expectedBanDuration = time.Duration(0)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:979:	receivedTriesRemaining, receivedBanDuration, receivedErr = registerClaimKeyFailure(db, identifier)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:986:	assert.Equal(t, expectedBanDuration, receivedBanDuration, "Expected 0 as ban duration")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:991:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:992:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:997:	receivedResult, receivedError := deleteOldFailedClaimKeyAttempts(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1008:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1009:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1016:	receivedResult, receivedErr := countClaimedOneTimeCodes(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1027:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1028:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1035:	receivedResult, receivedErr := countDiagnosisKeys(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1046:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1047:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/queries_test.go:1054:	receivedResult, receivedErr := countUnclaimedOneTimeCodes(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools.go:11:	return clearDiagnosisKeys(ctx, c.db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools.go:14:func clearDiagnosisKeys(ctx context.Context, db *sql.DB) error {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools.go:20:	if _, err := db.Exec(`TRUNCATE TABLE diagnosis_keys`); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools_test.go:31:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools_test.go:32:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools_test.go:39:	assert.NotPanics(t, func() {_ = clearDiagnosisKeys(nil, db) }, "expect to not panic if ENABLE_TEST_TOOLS is true")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools_test.go:51:	db, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools_test.go:52:	defer db.Close()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/persistence/test_tools_test.go:56:	err := clearDiagnosisKeys(nil, db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:19:func NewKeyClaimServlet(db persistence.Conn, keyClaimAuth keyclaim.Authenticator) srvutil.Servlet {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:20:	return &keyClaimServlet{db: db, auth: keyClaimAuth}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:24:	db   persistence.Conn
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:76:	keyClaim, err := s.db.NewKeyClaim(ctx, region, originator, hashID)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:110:	triesRemaining, banDuration, err := s.db.CheckClaimKeyBan(ip)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:147:	serverPub, err := s.db.ClaimKey(oneTimeCode, appPublicKey, ctx)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:159:		triesRemaining, banDuration, err := s.db.ClaimKeyFailure(ip)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim.go:190:	if err := s.db.ClaimKeySuccess(ip); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:34:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:38:		db:   db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:41:	assert.Equal(t, expected, NewKeyClaimServlet(db, auth), "should return a new keyClaimServlet struct")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:57:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:60:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:77:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:80:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:109:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:110:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:128:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:135:	// DB Mock
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:136:	db.On("NewKeyClaim", mock.Anything, "302", "goodtoken", "").Return("AAABBBCCCC", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:138:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:154:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:162:	// DB Mock
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:163:	db.On("NewKeyClaim", mock.Anything, "302", "goodtoken", hashID).Return("AAABBBCCCC", nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:165:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:186:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:187:	db.On("NewKeyClaim", mock.Anything, "302", "errortoken", "").Return("", fmt.Errorf("Random error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:189:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:214:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:215:	db.On("NewKeyClaim", mock.Anything, "302", "errortoken", hashID).Return("", err.ErrHashIDClaimed)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:217:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:235:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:241:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:257:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:262:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:277:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:280:	router := buildNewKeyClaimServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:295:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:301:	// DB Mock
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:302:	db.On("CheckClaimKeyBan", "1.1.1.1").Return(0, time.Duration(0), fmt.Errorf("Random error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:303:	db.On("CheckClaimKeyBan", "2.2.2.2").Return(0, banDuration, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:304:	db.On("CheckClaimKeyBan", "3.3.3.3").Return(triesRemaining, time.Duration(0), nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:305:	db.On("CheckClaimKeyBan", "4.4.4.4").Return(triesRemaining, time.Duration(0), nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:306:	db.On("CheckClaimKeyBan", "5.5.5.5").Return(triesRemaining, time.Duration(0), nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:312:	db.On("ClaimKey", "AAAAAAAAAA", appPub[:], mock.Anything).Return(serverPub[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:315:	db.On("ClaimKey", "BBBBBBBBBB", appPub[:], mock.Anything).Return(nil, err.ErrInvalidKeyFormat)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:316:	db.On("ClaimKey", "CCCCCCCCCC", appPub[:], mock.Anything).Return(nil, err.ErrDuplicateKey)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:317:	db.On("ClaimKey", "DDDDDDDDDD", appPub[:], mock.Anything).Return(nil, err.ErrInvalidOneTimeCode)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:318:	db.On("ClaimKey", "EEEEEEEEEE", appPub[:], mock.Anything).Return(nil, fmt.Errorf("Generic Error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:321:	db.On("ClaimKeyFailure", "3.3.3.3").Return(triesRemaining-1, banDuration, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:322:	db.On("ClaimKeyFailure", "4.4.4.4").Return(triesRemaining, time.Duration(0), fmt.Errorf("Random error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:325:	db.On("ClaimKeySuccess", "3.3.3.3").Return(nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:326:	db.On("ClaimKeySuccess", "5.5.5.5").Return(fmt.Errorf("Generic Error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:328:	servlet := NewKeyClaimServlet(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:448:	// Invalid one time code - DB failure on IP ban check
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:546:func buildNewKeyClaimServletRouter(db *persistence.Conn, auth *keyclaim.Authenticator) *mux.Router {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/keyclaim_test.go:547:	servlet := NewKeyClaimServlet(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:20:func NewMetricsServlet(db persistence.Conn, auth keyclaim.Authenticator) srvutil.Servlet {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:23:	return &metricsServlet{db: db, auth: auth}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:27:	db   persistence.Conn
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:88:	events, err := m.db.GetServerEvents(startDateVal)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:143:	uploads, err := m.db.GetTEKUploads(startDateVal)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics.go:199:	durations, err := m.db.GetAggregateOtkDurationsByDate(startDateVal)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:16:func createRouter(db *persistence.Conn, auth *keyclaim.Authenticator) *mux.Router {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:18:	servlet := NewMetricsServlet(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:32:	db, auth := createMocks()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:35:		db:   db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:39:	assert.Equal(t, expected, NewMetricsServlet(db, auth), "should return a new metrics servlet")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:43:	db, auth := createMocks()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:44:	router := createRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:61:	db, auth := createMocks()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:62:	router := createRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:79:	db, auth := createMocks()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:80:	router := createRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:101:	db, auth := createMocks()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:102:	router := createRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:121:	db, auth := createMocks()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:122:	router := createRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:131:func TestMetricsServlet_DBError(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:133:	db, auth := createMocks()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:134:	router := createRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:136:	db.On("GetServerEvents", "2020-01-01").
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:152:func TestMetricsServlet_DBErrorUploads(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:154:	db, auth := createMocks()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:155:	router := createRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:157:	db.On("GetTEKUploads", "2020-01-01").
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:175:	db, auth := createMocks()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:176:	router := createRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:178:	db.On("GetServerEvents", "2020-01-01").
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:201:	db, auth := createMocks()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:202:	router := createRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:204:	db.On("GetTEKUploads", "2020-01-01").
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:232:	db, auth := createMocks()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:233:	router := createRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/metrics_test.go:235:	db.On("GetAggregateOtkDurationsByDate", "2020-01-01").
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:25:func NewRetrieveServlet(db persistence.Conn, auth retrieval.Authenticator, signer retrieval.Signer) srvutil.Servlet {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:26:	return &retrieveServlet{db: db, auth: auth, signer: signer}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:30:	db     persistence.Conn
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:82:	if config.AppConstants.EnableEntirePeriodBundle == true && vars["day"] == "00000" {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve.go:122:	keys, err := s.db.FetchKeysForHours(region, startHour, endHour, currentRSIN)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:23:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:28:		db:     db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:32:	assert.Equal(t, expected, NewRetrieveServlet(db, auth, signer), "should return a new retrieveServlet struct")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:51:	db, auth, signer := setupRetrieveMockers()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:53:	router := setupRetrieveRouter(db, auth, signer)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:77:	db, auth, signer := setupRetrieveMockers()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:78:	router := setupRetrieveRouter(db, auth, signer)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:102:	db, auth, signer := setupRetrieveMockers()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:103:	router := setupRetrieveRouter(db, auth, signer)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:114:	db.On("FetchKeysForHours", region, startHour, endHour, currentRSIN).Return([]*pb.TemporaryExposureKey{randomTestKey(), randomTestKey()}, nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:135:	db, auth, signer := setupRetrieveMockers()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:136:	router := setupRetrieveRouter(db, auth, signer)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:160:	db, auth, signer := setupRetrieveMockers()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:161:	router := setupRetrieveRouter(db, auth, signer)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:180:func TestRetrieve_FailedDbCall(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:185:	db, auth, signer := setupRetrieveMockers()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:186:	router := setupRetrieveRouter(db, auth, signer)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:193:	// Failed DB Call
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:198:	db.On("FetchKeysForHours", region, startHour, endHour, currentRSIN).Return([]*pb.TemporaryExposureKey{}, fmt.Errorf("error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:200:	// Failing DB message
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:213:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:217:	return db, auth, signer
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:220:func setupRetrieveRouter(db *persistence.Conn, auth *retrieval.Authenticator, signer *retrieval.Signer) *mux.Router {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/retrieve_test.go:222:	servlet := NewRetrieveServlet(db, auth, signer)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/services.go:28:	EnableEntirePeriodBundle           bool `json:"enableEntirePeriodBundle"`
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/services.go:61:		EnableEntirePeriodBundle:           config.AppConstants.EnableEntirePeriodBundle,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:13:func NewTestToolsServlet(db persistence.Conn, auth keyclaim.Authenticator) srvutil.Servlet {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:16:	return &testToolsServlet{db: db, auth: auth}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:35:	db   persistence.Conn
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools.go:56:	if err := t.db.ClearDiagnosisKeys(ctx); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:19:func buildAdminToolsServletRouter(db *persistence.Conn, auth *keyclaim.Authenticator) *mux.Router {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:21:	servlet := NewTestToolsServlet(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:28:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:32:		db:   db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:36:	assert.Equal(t, expected, NewTestToolsServlet(db, auth), "should return a new testToolsServlet struct")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:74:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:75:	router := buildAdminToolsServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:95:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:100:	router := buildAdminToolsServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:117:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:120:	router := buildAdminToolsServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:137:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:138:	db.On("ClearDiagnosisKeys", mock.Anything).Return(nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:143:	router := buildAdminToolsServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:162:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:163:	db.On("ClearDiagnosisKeys", mock.Anything).Return(fmt.Errorf("oh no"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/test_tools_test.go:168:	router := buildAdminToolsServletRouter(db, auth)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:20:func NewUploadServlet(db persistence.Conn) srvutil.Servlet {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:21:	return &uploadServlet{db: db}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:25:	db persistence.Conn
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:69:	serverPriv, err := s.db.PrivForPub(serverPub)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload.go:154:	err = s.db.StoreKeys(appPubKey, upload.GetKeys(), ctx)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:29:func setupUploadRouter(db *persistence.Conn) *mux.Router {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:31:	servlet := NewUploadServlet(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:39:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:42:		db: db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:44:	assert.Equal(t, expected, NewUploadServlet(db), "should return a new uploadServlet struct")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:62:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:63:	router := setupUploadRouter(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:65:	return hook, oldLog, db, router
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:103:	hook, oldLog, db, router := setupUploadTest()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:107:	db.On("PrivForPub", badServerPub[:]).Return(nil, fmt.Errorf("No priv cert"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:123:	hook, oldLog, db, router := setupUploadTest()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:127:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:142:	hook, oldLog, db, router := setupUploadTest()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:146:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:161:	hook, oldLog, db, router := setupUploadTest()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:165:	db.On("PrivForPub", goodServerPubBadPriv[:]).Return(make([]byte, 16), nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:180:	hook, oldLog, db, router := setupUploadTest()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:187:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:188:	db.On("PrivForPub", badServerPub[:]).Return(nil, fmt.Errorf("No priv cert"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:211:	hook, oldLog, db, router := setupUploadTest()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:218:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:219:	db.On("PrivForPub", badServerPub[:]).Return(nil, fmt.Errorf("No priv cert"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:242:	hook, oldLog, db, router := setupUploadTest()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:247:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:248:	db.On("StoreKeys", goodAppPub, mock.AnythingOfType("[]*covidshield.TemporaryExposureKey"), mock.Anything).Return(nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:277:	hook, oldLog, db, router := setupUploadTest()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:283:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:284:	db.On("StoreKeys", goodAppPub, mock.AnythingOfType("[]*covidshield.TemporaryExposureKey"), mock.Anything).Return(nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:313:	hook, oldLog, db, router := setupUploadTest()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:319:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:320:	db.On("StoreKeys", goodAppPub, mock.AnythingOfType("[]*covidshield.TemporaryExposureKey"), mock.Anything).Return(nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:349:	hook, oldLog, db, router := setupUploadTest()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:355:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:356:	db.On("StoreKeys", goodAppPubKeyUsed, mock.AnythingOfType("[]*covidshield.TemporaryExposureKey"), mock.Anything).Return(persistenceErrors.ErrKeyConsumed)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:383:func TestUpload_GenericDBError(t *testing.T) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:385:	hook, oldLog, db, router := setupUploadTest()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:389:	goodAppPubDBError, goodAppPrivDBError, _ := box.GenerateKey(rand.Reader)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:391:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:392:	db.On("StoreKeys", goodAppPubDBError, mock.AnythingOfType("[]*covidshield.TemporaryExposureKey"), mock.Anything).Return(fmt.Errorf("generic DB error"))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:398:	// Generic DB Error
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:406:	encrypted := box.Seal(msg[:], marshalledUpload, &nonce, goodServerPub, goodAppPrivDBError)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:408:	payload, _ := proto.Marshal(buildUploadRequest(goodServerPub[:], nonce[:], goodAppPubDBError[:], encrypted))
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:422:	hook, oldLog, db, router := setupUploadTest()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:428:	db.On("PrivForPub", goodServerPubNoKeysRemaining[:]).Return(goodServerPrivNoKeysRemaining[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:429:	db.On("StoreKeys", goodAppPubNoKeysRemaining, mock.AnythingOfType("[]*covidshield.TemporaryExposureKey"), mock.Anything).Return(persistenceErrors.ErrTooManyKeys)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:461:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:462:	router := setupUploadRouter(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:468:	db.On("PrivForPub", goodServerPub[:]).Return(goodServerPriv[:], nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:469:	db.On("StoreKeys", goodAppPub, mock.AnythingOfType("[]*covidshield.TemporaryExposureKey"), mock.Anything).Return(nil)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:499:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:500:	setupUploadRouter(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:524:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:525:	setupUploadRouter(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:551:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:552:	setupUploadRouter(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:577:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:578:	setupUploadRouter(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:602:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:603:	setupUploadRouter(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:629:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:630:	setupUploadRouter(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:654:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:655:	setupUploadRouter(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:682:	db := &persistence.Conn{}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/server/upload_test.go:683:	servlet := NewUploadServlet(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:15:func initSystemStatsObserver(db persistence.Conn) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:32:		claimedOneTimeCodesTotalMetricCount, _ := db.CountClaimedOneTimeCodes()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:33:		diagnosisKeysTotalMetricCount, _ := db.CountDiagnosisKeys()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/stats.go:34:		unclaimedOneTimeCodesTotalMetricCount, _ := db.CountUnclaimedOneTimeCodes()
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/telemetry.go:45:func Initialize(db persistence.Conn) Cleanuper {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/telemetry.go:46:	return &traceMetricCleaner{tracer: InitTracer(), meter: InitMeter(db)}
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/telemetry.go:86:func InitMeter(db persistence.Conn) func() {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/telemetry/telemetry.go:125:	initSystemStatsObserver(db)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/defs.go:21:	db       persistence.Conn
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:19:	if nDeleted, err := w.db.DeleteOldDiagnosisKeys(); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:26:	if nDeleted, err := w.db.DeleteUnclaimedKeys(ctx); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:33:	if nDeleted, err := w.db.DeleteExpiredKeys(ctx); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:40:	if nDeleted, err := w.db.DeleteExhaustedKeys(ctx); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:47:	if nDeleted, err := w.db.DeleteOldFailedClaimKeyAttempts(); err != nil {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:57:func StartExpirationWorker(db persistence.Conn) (Worker, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:58:	return createExpirationWorker(db, time.Duration(config.AppConstants.WorkerExpirationInterval)*time.Second)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:61:func createExpirationWorker(db persistence.Conn, interval time.Duration) (Worker, error) {
/mnt/c/Users/conig/Desktop/test/covid-alert-server/pkg/workers/expiration.go:64:		db:       db,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/scripts/heroku_run.sh:3:# Parse JAWSDB_URL Env
/mnt/c/Users/conig/Desktop/test/covid-alert-server/scripts/heroku_run.sh:4:url=$JAWSDB_URL
/mnt/c/Users/conig/Desktop/test/covid-alert-server/scripts/heroku_run.sh:10:host_and_db="${strarr[1]}"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/scripts/heroku_run.sh:13:read -r -a strarr <<< "$host_and_db"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/scripts/heroku_run.sh:21:db="${u_and_p}@tcp(${host})/${database}"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/scripts/heroku_run.sh:23:DATABASE_URL=$db PORT=$PORT /usr/local/bin/server --config_file_path ./
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/claim_key_test.rb:139:    @dbconn.prepare(<<~SQL).execute
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:39:    @dbconn.query("UPDATE diagnosis_keys SET hour_of_submission = #{expiry_hour + 1}")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:43:    @dbconn.query("UPDATE diagnosis_keys SET hour_of_submission = #{expiry_hour}")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:47:    @dbconn.query("UPDATE diagnosis_keys SET hour_of_submission = #{expiry_hour - 1}")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:82:    @dbconn.query("SELECT COUNT(*) FROM diagnosis_keys").first.values.first
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/expiration_worker_test.rb:86:    @dbconn.query("SELECT COUNT(*) FROM encryption_keys").first.values.first
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:20:  DB_HOST = ENV.fetch('DB_HOST')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:21:  DB_USER = ENV.fetch('DB_USER')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:22:  DB_PASS = ENV.fetch('DB_PASS')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:23:  DB_NAME = ENV.fetch('DB_NAME', 'test')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:25:  raise('DB_HOST, DB_USER, and DB_PASS are all required environment variables')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:28:DATABASE_URL = "#{DB_USER}:#{DB_PASS}@tcp(#{DB_HOST})/#{DB_NAME}"
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:41:        @dbconn = Mysql2::Client.new(
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:42:          host: DB_HOST, username: DB_USER, password: DB_PASS, database: DB_NAME,
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:80:      @dbconn.query("SELECT originator FROM encryption_keys").map(&:values).map(&:first)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:84:      @dbconn.query("SELECT originator FROM diagnosis_keys").map(&:values).map(&:first)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:134:      @dbconn.prepare(<<~SQL).execute(seconds)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:140:      @dbconn.prepare(<<~SQL).execute(hours)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:143:      @dbconn.prepare(<<~SQL).execute(hours, hours)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:241:      purge_db
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:244:      purge_db
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:247:    def purge_db
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:249:        'mysqladmin', "--host=#{DB_HOST}", "--user=#{DB_USER}",
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:250:        "--password=#{DB_PASS}", '-f', 'drop', DB_NAME
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/lib/helper.rb:253:      raise("purge_db failed: #{oe}") unless oe.include?("doesn't exist")
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:110:    if config["enableEntirePeriodBundle"]
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:205:    @dbconn.query('BEGIN')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:210:    @dbconn.query('COMMIT')
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/retrieve_test.rb:288:    @insert_key ||= @dbconn.prepare(<<~SQL)
/mnt/c/Users/conig/Desktop/test/covid-alert-server/test/roundtrip_test.rb:119:    @dbconn.query("SELECT COUNT(*) FROM diagnosis_keys").first.values.first
