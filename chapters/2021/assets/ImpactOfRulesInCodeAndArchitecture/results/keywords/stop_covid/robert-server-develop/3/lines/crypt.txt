./robert-server-develop/pom.xml:31:		<module>robert-server-crypto</module>
./robert-server-develop/pom.xml:33:		<module>robert-crypto-grpc-server</module>
./robert-server-develop/pom.xml:34:		<module>robert-crypto-grpc-server-messaging</module>
./robert-server-develop/pom.xml:35:		<module>robert-crypto-grpc-server-storage</module>
./robert-server-develop/robert-crypto-grpc-server-messaging/pom.xml:19:	<artifactId>robert-crypto-grpc-server-messaging</artifactId>
./robert-server-develop/robert-crypto-grpc-server-messaging/pom.xml:20:	<name>robert-crypto-grpc-server-messaging</name>
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/client/service/ICryptoServerGrpcClient.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.client.service;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/client/service/ICryptoServerGrpcClient.java:5:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.*;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/client/service/ICryptoServerGrpcClient.java:8:public interface ICryptoServerGrpcClient {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/client/service/impl/CryptoServerGrpcClient.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.client.service.impl;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/client/service/impl/CryptoServerGrpcClient.java:6:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.*;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/client/service/impl/CryptoServerGrpcClient.java:12:import fr.gouv.stopc.robert.crypto.grpc.server.client.service.ICryptoServerGrpcClient;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/client/service/impl/CryptoServerGrpcClient.java:13:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.CryptoGrpcServiceImplGrpc.CryptoGrpcServiceImplBlockingStub;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/client/service/impl/CryptoServerGrpcClient.java:21:public class CryptoServerGrpcClient implements ICryptoServerGrpcClient {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/client/service/impl/CryptoServerGrpcClient.java:24:    private CryptoGrpcServiceImplBlockingStub blockingStub;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/client/service/impl/CryptoServerGrpcClient.java:29:    public CryptoServerGrpcClient(){}
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/client/service/impl/CryptoServerGrpcClient.java:31:    public CryptoServerGrpcClient(String host, int port) {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/client/service/impl/CryptoServerGrpcClient.java:35:    public CryptoServerGrpcClient(ManagedChannelBuilder<?> channelBuilder) {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/client/service/impl/CryptoServerGrpcClient.java:37:        this.blockingStub = CryptoGrpcServiceImplGrpc.newBlockingStub(this.channel);
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/client/service/impl/CryptoServerGrpcClient.java:40:    public CryptoServerGrpcClient(ManagedChannel channel) {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/client/service/impl/CryptoServerGrpcClient.java:42:        this.blockingStub = CryptoGrpcServiceImplGrpc.newBlockingStub(channel);
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/client/service/impl/CryptoServerGrpcClient.java:48:        this.blockingStub = CryptoGrpcServiceImplGrpc.newBlockingStub(this.channel);
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:2:// source: crypto_service.proto
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:4:package fr.gouv.stopc.robert.crypto.grpc.server.service;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:6:public final class CryptoGrpcService {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:7:    private CryptoGrpcService() {}
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:18:    internal_static_robert_server_crypto_EphemeralTupleRequest_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:21:    internal_static_robert_server_crypto_EphemeralTupleRequest_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:23:    internal_static_robert_server_crypto_EphemeralTupleResponse_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:26:    internal_static_robert_server_crypto_EphemeralTupleResponse_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:28:    internal_static_robert_server_crypto_GenerateEBIDRequest_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:31:    internal_static_robert_server_crypto_GenerateEBIDRequest_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:33:    internal_static_robert_server_crypto_EBIDResponse_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:36:    internal_static_robert_server_crypto_EBIDResponse_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:38:    internal_static_robert_server_crypto_DecryptEBIDRequest_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:41:    internal_static_robert_server_crypto_DecryptEBIDRequest_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:43:    internal_static_robert_server_crypto_EncryptCountryCodeRequest_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:46:    internal_static_robert_server_crypto_EncryptCountryCodeRequest_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:48:    internal_static_robert_server_crypto_EncryptCountryCodeResponse_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:51:    internal_static_robert_server_crypto_EncryptCountryCodeResponse_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:53:    internal_static_robert_server_crypto_DecryptCountryCodeRequest_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:56:    internal_static_robert_server_crypto_DecryptCountryCodeRequest_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:58:    internal_static_robert_server_crypto_DecryptCountryCodeResponse_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:61:    internal_static_robert_server_crypto_DecryptCountryCodeResponse_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:63:    internal_static_robert_server_crypto_MacHelloGenerationRequest_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:66:    internal_static_robert_server_crypto_MacHelloGenerationRequest_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:68:    internal_static_robert_server_crypto_MacHelloGenerationResponse_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:71:    internal_static_robert_server_crypto_MacHelloGenerationResponse_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:73:    internal_static_robert_server_crypto_MacHelloValidationRequest_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:76:    internal_static_robert_server_crypto_MacHelloValidationRequest_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:78:    internal_static_robert_server_crypto_MacValidationResponse_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:81:    internal_static_robert_server_crypto_MacValidationResponse_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:83:    internal_static_robert_server_crypto_MacEsrValidationRequest_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:86:    internal_static_robert_server_crypto_MacEsrValidationRequest_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:88:    internal_static_robert_server_crypto_MacValidationForTypeRequest_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:91:    internal_static_robert_server_crypto_MacValidationForTypeRequest_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:93:    internal_static_robert_server_crypto_GenerateIdentityRequest_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:96:    internal_static_robert_server_crypto_GenerateIdentityRequest_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:98:    internal_static_robert_server_crypto_GenerateIdentityResponse_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:101:    internal_static_robert_server_crypto_GenerateIdentityResponse_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:103:    internal_static_robert_server_crypto_EncryptedEphemeralTupleRequest_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:106:    internal_static_robert_server_crypto_EncryptedEphemeralTupleRequest_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:108:    internal_static_robert_server_crypto_EncryptedEphemeralTupleResponse_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:111:    internal_static_robert_server_crypto_EncryptedEphemeralTupleResponse_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:121:                "\n\024crypto_service.proto\022\024robert.server.cr" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:129:                        "cryptEBIDRequest\022\014\n\004ebid\030\001 \001(\014\">\n\031Encryp" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:131:                        "ntryCode\030\002 \001(\014\":\n\032EncryptCountryCodeResp" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:132:                        "onse\022\034\n\024encryptedCountryCode\030\001 \001(\014\"G\n\031De" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:133:                        "cryptCountryCodeRequest\022\014\n\004ebid\030\001 \001(\014\022\034\n" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:134:                        "\024encryptedCountryCode\030\002 \001(\014\"1\n\032DecryptCo" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:150:                        "rKey\030\003 \001(\014\"\225\001\n\036EncryptedEphemeralTupleRe" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:154:                        "(\014\"R\n\037EncryptedEphemeralTupleResponse\022\016\n" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:156:                        "\030\003 \001(\0142\243\n\n\025CryptoGrpcServiceImpl\022w\n\026gene" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:157:                        "rateEphemeralTuple\022+.robert.server.crypt" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:159:                        "crypto.EphemeralTupleResponse\"\0000\001\022_\n\014gen" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:160:                        "erateEBID\022).robert.server.crypto.Generat" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:161:                        "eEBIDRequest\032\".robert.server.crypto.EBID" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:162:                        "Response\"\000\022]\n\013decryptEBID\022(.robert.serve" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:163:                        "r.crypto.DecryptEBIDRequest\032\".robert.ser" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:164:                        "ver.crypto.EBIDResponse\"\000\022y\n\022encryptCoun" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:165:                        "tryCode\022/.robert.server.crypto.EncryptCo" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:166:                        "untryCodeRequest\0320.robert.server.crypto." +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:167:                        "EncryptCountryCodeResponse\"\000\022y\n\022decryptC" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:168:                        "ountryCode\022/.robert.server.crypto.Decryp" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:170:                        "to.DecryptCountryCodeResponse\"\000\022w\n\020gener" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:171:                        "ateMacHello\022/.robert.server.crypto.MacHe" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:174:                        "dateMacHello\022/.robert.server.crypto.MacH" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:177:                        "MacEsr\022-.robert.server.crypto.MacEsrVali" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:178:                        "dationRequest\032+.robert.server.crypto.Mac" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:180:                        "pe\0221.robert.server.crypto.MacValidationF" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:181:                        "orTypeRequest\032+.robert.server.crypto.Mac" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:183:                        "\022-.robert.server.crypto.GenerateIdentity" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:184:                        "Request\032..robert.server.crypto.GenerateI" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:185:                        "dentityResponse\"\000\022\220\001\n\037generateEncryptedE" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:186:                        "phemeralTuple\0224.robert.server.crypto.Enc" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:188:                        "ver.crypto.EncryptedEphemeralTupleRespon" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:189:                        "se\"\000BP\n6fr.gouv.stopc.robert.crypto.grpc" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:190:                        ".server.service.othersB\021CryptoGrpcServic" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:197:        internal_static_robert_server_crypto_EphemeralTupleRequest_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:199:        internal_static_robert_server_crypto_EphemeralTupleRequest_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:201:                        internal_static_robert_server_crypto_EphemeralTupleRequest_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:203:        internal_static_robert_server_crypto_EphemeralTupleResponse_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:205:        internal_static_robert_server_crypto_EphemeralTupleResponse_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:207:                        internal_static_robert_server_crypto_EphemeralTupleResponse_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:209:        internal_static_robert_server_crypto_GenerateEBIDRequest_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:211:        internal_static_robert_server_crypto_GenerateEBIDRequest_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:213:                        internal_static_robert_server_crypto_GenerateEBIDRequest_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:215:        internal_static_robert_server_crypto_EBIDResponse_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:217:        internal_static_robert_server_crypto_EBIDResponse_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:219:                        internal_static_robert_server_crypto_EBIDResponse_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:221:        internal_static_robert_server_crypto_DecryptEBIDRequest_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:223:        internal_static_robert_server_crypto_DecryptEBIDRequest_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:225:                        internal_static_robert_server_crypto_DecryptEBIDRequest_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:227:        internal_static_robert_server_crypto_EncryptCountryCodeRequest_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:229:        internal_static_robert_server_crypto_EncryptCountryCodeRequest_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:231:                        internal_static_robert_server_crypto_EncryptCountryCodeRequest_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:233:        internal_static_robert_server_crypto_EncryptCountryCodeResponse_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:235:        internal_static_robert_server_crypto_EncryptCountryCodeResponse_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:237:                        internal_static_robert_server_crypto_EncryptCountryCodeResponse_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:238:                        new java.lang.String[] { "EncryptedCountryCode", });
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:239:        internal_static_robert_server_crypto_DecryptCountryCodeRequest_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:241:        internal_static_robert_server_crypto_DecryptCountryCodeRequest_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:243:                        internal_static_robert_server_crypto_DecryptCountryCodeRequest_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:244:                        new java.lang.String[] { "Ebid", "EncryptedCountryCode", });
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:245:        internal_static_robert_server_crypto_DecryptCountryCodeResponse_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:247:        internal_static_robert_server_crypto_DecryptCountryCodeResponse_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:249:                        internal_static_robert_server_crypto_DecryptCountryCodeResponse_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:251:        internal_static_robert_server_crypto_MacHelloGenerationRequest_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:253:        internal_static_robert_server_crypto_MacHelloGenerationRequest_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:255:                        internal_static_robert_server_crypto_MacHelloGenerationRequest_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:257:        internal_static_robert_server_crypto_MacHelloGenerationResponse_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:259:        internal_static_robert_server_crypto_MacHelloGenerationResponse_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:261:                        internal_static_robert_server_crypto_MacHelloGenerationResponse_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:263:        internal_static_robert_server_crypto_MacHelloValidationRequest_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:265:        internal_static_robert_server_crypto_MacHelloValidationRequest_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:267:                        internal_static_robert_server_crypto_MacHelloValidationRequest_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:269:        internal_static_robert_server_crypto_MacValidationResponse_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:271:        internal_static_robert_server_crypto_MacValidationResponse_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:273:                        internal_static_robert_server_crypto_MacValidationResponse_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:275:        internal_static_robert_server_crypto_MacEsrValidationRequest_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:277:        internal_static_robert_server_crypto_MacEsrValidationRequest_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:279:                        internal_static_robert_server_crypto_MacEsrValidationRequest_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:281:        internal_static_robert_server_crypto_MacValidationForTypeRequest_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:283:        internal_static_robert_server_crypto_MacValidationForTypeRequest_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:285:                        internal_static_robert_server_crypto_MacValidationForTypeRequest_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:287:        internal_static_robert_server_crypto_GenerateIdentityRequest_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:289:        internal_static_robert_server_crypto_GenerateIdentityRequest_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:291:                        internal_static_robert_server_crypto_GenerateIdentityRequest_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:293:        internal_static_robert_server_crypto_GenerateIdentityResponse_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:295:        internal_static_robert_server_crypto_GenerateIdentityResponse_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:297:                        internal_static_robert_server_crypto_GenerateIdentityResponse_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:298:                        new java.lang.String[] { "IdA", "EncryptedSharedKey", "ServerPublicKeyForKey", });
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:299:        internal_static_robert_server_crypto_EncryptedEphemeralTupleRequest_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:301:        internal_static_robert_server_crypto_EncryptedEphemeralTupleRequest_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:303:                        internal_static_robert_server_crypto_EncryptedEphemeralTupleRequest_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:305:        internal_static_robert_server_crypto_EncryptedEphemeralTupleResponse_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:307:        internal_static_robert_server_crypto_EncryptedEphemeralTupleResponse_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:309:                        internal_static_robert_server_crypto_EncryptedEphemeralTupleResponse_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/proto/crypto_service.proto:17:option java_package = "fr.gouv.stopc.robert.crypto.grpc.server.messaging";
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/proto/crypto_service.proto:18:option java_outer_classname = "CryptoGrpcService";
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/proto/crypto_service.proto:21:package robert.server.crypto;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/proto/crypto_service.proto:23:service CryptoGrpcServiceImpl {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:1:package test.fr.gouv.stopc.robert.crypto.grpc.server.client;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:21:import fr.gouv.stopc.robert.crypto.grpc.server.client.service.impl.CryptoServerGrpcClient;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:22:import fr.gouv.stopc.robert.crypto.grpc.server.client.service.impl.CryptoServerGrpcClient.TestHelper;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:23:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.CryptoGrpcServiceImplGrpc.CryptoGrpcServiceImplImplBase;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:32:public class CryptoServerGrpcClientTest {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:34:    private CryptoServerGrpcClient client;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:55:        client = new CryptoServerGrpcClient(inProcessChannel);
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:60://    public void testDecryptEBID() {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:63://        DecryptEBIDRequest request = DecryptEBIDRequest.newBuilder()
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:71://        CryptoGrpcServiceImplImplBase decryptEBID = new CryptoGrpcServiceImplImplBase() {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:73://            public void decryptEBID(DecryptEBIDRequest request,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:82://        serviceRegistry.addService(decryptEBID);
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:85://        byte[] decryptedEbid = client.decryptEBID(request);
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:88://        assertNotNull(decryptedEbid);
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:89://        assertTrue(Arrays.equals(decryptedEbid, response.getEbid().toByteArray()));
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:107://        CryptoGrpcServiceImplImplBase validateMacEsr = new CryptoGrpcServiceImplImplBase() {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:143://        CryptoGrpcServiceImplImplBase validateMacForType = new CryptoGrpcServiceImplImplBase() {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:177://        CryptoGrpcServiceImplImplBase validateMacHello = new CryptoGrpcServiceImplImplBase() {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:199://    public void testDecryptCountryCode() {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:202://        DecryptCountryCodeRequest request = DecryptCountryCodeRequest.newBuilder()
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:204://                .setEncryptedCountryCode(ByteString.copyFrom(generate(1)))
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:207://        DecryptCountryCodeResponse response = DecryptCountryCodeResponse.newBuilder()
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:211://        CryptoGrpcServiceImplImplBase decryptCountryCode = new CryptoGrpcServiceImplImplBase() {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:213://            public void decryptCountryCode(DecryptCountryCodeRequest request,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:214://                    StreamObserver<DecryptCountryCodeResponse> responseObserver) {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:221://        serviceRegistry.addService(decryptCountryCode);
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:224://        byte countryCode = this.client.decryptCountryCode(request);
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:242://                .setEncryptedSharedKey(ByteString.copyFrom(generate(32)))
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:246://        CryptoGrpcServiceImplImplBase genereateIdentity = new CryptoGrpcServiceImplImplBase() {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:269://    public void testGenerateEncryptedEphemeralTuple() {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:272://        EncryptedEphemeralTupleBundleRequest request = EncryptedEphemeralTupleBundleRequest.newBuilder()
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:280://        EncryptedEphemeralTupleBundleResponse response = EncryptedEphemeralTupleBundleResponse.newBuilder()
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:281://                .setEncryptedTuples(ByteString.copyFrom(generate(52)))
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:285://        CryptoGrpcServiceImplImplBase genereateIdentity = new CryptoGrpcServiceImplImplBase() {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:287://            public void generateEncryptedEphemeralTuple(EncryptedEphemeralTupleBundleRequest request,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:288://                    StreamObserver<EncryptedEphemeralTupleBundleResponse> responseObserver) {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:298://        Optional<EncryptedEphemeralTupleBundleResponse> expectedResponse = this.client.generateEncryptedEphemeralTuple(request);
./robert-server-develop/robert-crypto-grpc-server-storage/pom.xml:20:	<artifactId>robert-crypto-grpc-server-storage</artifactId>
./robert-server-develop/robert-crypto-grpc-server-storage/pom.xml:22:	<name>robert-crypto-grpc-server-storage</name>
./robert-server-develop/robert-crypto-grpc-server-storage/pom.xml:23:	<description>Storage management module in GRPC Crypto Server</description>
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.storage.cryptographic.service;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:10:public interface ICryptographicStorageService {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:31:    Key getKeyForEncryptingClientKeys();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:32:    //Key getKeyForEncryptingServerKeys();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.storage.cryptographic.service.impl;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:28:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:34:import fr.gouv.stopc.robert.crypto.grpc.server.storage.cryptographic.service.ICryptographicStorageService;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:41:public class CryptographicStorageServiceImpl implements ICryptographicStorageService {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:51:    //private static final String ALIAS_SERVER_KEK = "server-key-encryption-key;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:52:    private static final String ALIAS_CLIENT_KEK = "key-encryption-key"; // KEK
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:176:    public Key getKeyForEncryptingClientKeys() {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:177:        return getKeyForEncryptingKeys(ALIAS_CLIENT_KEK,
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:178:                "Unable to retrieve key for encrypting keys (KEK) for client from HSM");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:181:    private Key getKeyForEncryptingKeys(String alias, String errorMessage) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:280:                            // Copy key content in new key to prevent any delegation to HSM and perform encryption in Java
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:327:        log.info("Caching key encryption key");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:328:        this.getKeyForEncryptingClientKeys();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:365:            aliases.addAll(this.kekCache.keySet().stream().map(elt -> String.format("Key Encryption Key '%s'", elt)).collect(Collectors.toList()));
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/database/config/AuditorAwareImpl.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.storage.database.config;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/database/config/JpaConfig.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.storage.database.config;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/database/model/ClientIdentifier.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.storage.database.model;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/database/repository/ClientIdentifierRepository.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.storage.database.repository;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/database/repository/ClientIdentifierRepository.java:8:import fr.gouv.stopc.robert.crypto.grpc.server.storage.database.model.ClientIdentifier;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/exception/RobertServerStorageException.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.storage.exception;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/model/ClientIdentifierBundle.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.storage.model;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/IClientKeyStorageService.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.storage.service;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/IClientKeyStorageService.java:5:import fr.gouv.stopc.robert.crypto.grpc.server.storage.exception.RobertServerStorageException;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/IClientKeyStorageService.java:6:import fr.gouv.stopc.robert.crypto.grpc.server.storage.model.ClientIdentifierBundle;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.storage.service.impl;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:13:import javax.crypto.BadPaddingException;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:14:import javax.crypto.Cipher;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:15:import javax.crypto.IllegalBlockSizeException;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:16:import javax.crypto.KeyGenerator;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:17:import javax.crypto.NoSuchPaddingException;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:18:import javax.crypto.spec.GCMParameterSpec;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:24:import fr.gouv.stopc.robert.crypto.grpc.server.storage.cryptographic.service.ICryptographicStorageService;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:25:import fr.gouv.stopc.robert.crypto.grpc.server.storage.database.model.ClientIdentifier;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:26:import fr.gouv.stopc.robert.crypto.grpc.server.storage.database.repository.ClientIdentifierRepository;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:27:import fr.gouv.stopc.robert.crypto.grpc.server.storage.exception.RobertServerStorageException;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:28:import fr.gouv.stopc.robert.crypto.grpc.server.storage.model.ClientIdentifierBundle;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:29:import fr.gouv.stopc.robert.crypto.grpc.server.storage.service.IClientKeyStorageService;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:39:    private ICryptographicStorageService cryptographicStorageService;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:44:    public ClientKeyStorageServiceImpl(final ICryptographicStorageService cryptographicStorageService,
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:47:        this.cryptographicStorageService = cryptographicStorageService;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:144:          byte[] encryptedKeyForMac = this.encryptKeyWithAES256GCMAndKek(
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:146:                  this.cryptographicStorageService.getKeyForEncryptingClientKeys());
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:148:          if (Objects.isNull(encryptedKeyForMac)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:149:              log.error("The encrypted key for mac is null");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:153:          byte[] encryptedKeyForTuples = this.encryptKeyWithAES256GCMAndKek(
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:155:                  this.cryptographicStorageService.getKeyForEncryptingClientKeys());
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:157:          if (Objects.isNull(encryptedKeyForTuples)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:158:              log.error("The encrypted key for tuples is null");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:164:                  .keyForMac(Base64.encode(encryptedKeyForMac))
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:165:                  .keyForTuples(Base64.encode(encryptedKeyForTuples))
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:186:                    Key clientKek = this.cryptographicStorageService.getKeyForEncryptingClientKeys();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:188:                        log.error("The clientKek to decrypt the client keys is null.");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:192:                    byte[] decryptedKeyForMac = this.decryptStoredKeyWithAES256GCMAndKek(
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:196:                    if(Objects.isNull(decryptedKeyForMac)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:197:                        log.error("The decrypted client key is null.");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:201:                    byte[] decryptedKeyForTuples = this.decryptStoredKeyWithAES256GCMAndKek(
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:205:                    if(Objects.isNull(decryptedKeyForTuples)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:206:                        log.error("The decrypted client key for tuples is null.");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:212:                            .keyForMac(Arrays.copyOf(decryptedKeyForMac, decryptedKeyForMac.length))
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:213:                            .keyForTuples(Arrays.copyOf(decryptedKeyForTuples, decryptedKeyForTuples.length))
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:224:    private static final String AES_ENCRYPTION_CIPHER_SCHEME = "AES/GCM/NoPadding";
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:227:    public byte[] decryptStoredKeyWithAES256GCMAndKek(byte[] storedKey, Key kek) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:229:        byte[] toDecrypt = new byte[storedKey.length - IV_LENGTH];
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:230:        System.arraycopy(storedKey, IV_LENGTH, toDecrypt, 0, storedKey.length - IV_LENGTH);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:234:            cipher = Cipher.getInstance(AES_ENCRYPTION_CIPHER_SCHEME);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:235:            cipher.init(Cipher.DECRYPT_MODE, kek, algorithmParameterSpec);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:236:            return cipher.doFinal(toDecrypt);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:240:            log.error(String.format("Algorithm %s is not available", AES_ENCRYPTION_CIPHER_SCHEME));
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:245:    public byte[] encryptKeyWithAES256GCMAndKek(byte[] keyToEncrypt, Key kek) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:249:            // Create cipher with AES encryption scheme.
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:250:            Cipher cipher = Cipher.getInstance(AES_ENCRYPTION_CIPHER_SCHEME);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:251:            cipher.init(Cipher.ENCRYPT_MODE, kek);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:252:            cipherText = cipher.doFinal(keyToEncrypt);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:257:            log.error(String.format("Algorithm %s is not available", AES_ENCRYPTION_CIPHER_SCHEME));
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:1:package test.fr.gouv.stopc.robert.crypto.grpc.server.storage.service.impl;
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:3:import fr.gouv.stopc.robert.crypto.grpc.server.storage.cryptographic.service.ICryptographicStorageService;
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:4:import fr.gouv.stopc.robert.crypto.grpc.server.storage.database.model.ClientIdentifier;
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:5:import fr.gouv.stopc.robert.crypto.grpc.server.storage.database.repository.ClientIdentifierRepository;
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:6:import fr.gouv.stopc.robert.crypto.grpc.server.storage.model.ClientIdentifierBundle;
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:7:import fr.gouv.stopc.robert.crypto.grpc.server.storage.service.impl.ClientKeyStorageServiceImpl;
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:19:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:35:    ICryptographicStorageService cryptographicStorageService;
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:45:        this.clientKeyStorageService = new ClientKeyStorageServiceImpl(cryptographicStorageService, mockClientIdentifierRepository);
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:48:        when(this.cryptographicStorageService.getKeyForEncryptingClientKeys()).thenReturn(new SecretKeySpec(generateKey(), "AES"));
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:69:        Optional<ClientIdentifierBundle> clientIdentifierBundleWithDecryptedKeys1 = this.clientKeyStorageService.createClientIdUsingKeys(generateKey(), generateKey());
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:70:        assertTrue(clientIdentifierBundleWithDecryptedKeys1.isPresent());
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:71:        ClientIdentifier encryptedClientIdentifierWithEncryptedKeys1 = this.mockClientIdentifierRepository.getLastSavedClientIdentifier();
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:76:        ClientIdentifier encryptedClientIdentifier2 = this.mockClientIdentifierRepository.getLastSavedClientIdentifier();
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:78:        assertNotEquals(encryptedClientIdentifierWithEncryptedKeys1.getIdA(), encryptedClientIdentifier2.getIdA());
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:79:        assertNotEquals(encryptedClientIdentifierWithEncryptedKeys1.getKeyForMac(), encryptedClientIdentifier2.getKeyForMac());
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:80:        assertNotEquals(encryptedClientIdentifierWithEncryptedKeys1.getKeyForTuples(), encryptedClientIdentifier2.getKeyForTuples());
./robert-server-develop/robert-crypto-grpc-server/pom.xml:19:	<artifactId>robert-crypto-grpc-server</artifactId>
./robert-server-develop/robert-crypto-grpc-server/pom.xml:21:	<name>robert-crypto-grpc-server</name>
./robert-server-develop/robert-crypto-grpc-server/pom.xml:22:	<description>Cryptography module with a gRPC interface</description>
./robert-server-develop/robert-crypto-grpc-server/pom.xml:54:			<artifactId>robert-crypto-grpc-server-messaging</artifactId>
./robert-server-develop/robert-crypto-grpc-server/pom.xml:60:			<artifactId>robert-crypto-grpc-server-storage</artifactId>
./robert-server-develop/robert-crypto-grpc-server/pom.xml:66:			<artifactId>robert-server-crypto</artifactId>
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceConfiguration.java:1:package fr.gouv.stopc.robert.crypto.grpc.server;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceConfiguration.java:9:import fr.gouv.stopc.robert.crypto.grpc.server.storage.cryptographic.service.ICryptographicStorageService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceConfiguration.java:10:import fr.gouv.stopc.robert.crypto.grpc.server.utils.PropertyLoader;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceConfiguration.java:13:public class CryptoServiceConfiguration {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceConfiguration.java:17:    public CryptoServiceConfiguration(CryptoServiceGrpcServer server, 
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceConfiguration.java:19:            ICryptographicStorageService  cryptoStorageService) throws IOException, InterruptedException {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceConfiguration.java:21:        // Init the cryptographic Storage
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceConfiguration.java:22:        cryptoStorageService.init(propertyLoader.getKeyStorePassword(), propertyLoader.getKeyStoreConfigFile());
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceConfiguration.java:24:        server.initPort(Integer.parseInt(propertyLoader.getCryptoServerPort()));
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServer.java:1:package fr.gouv.stopc.robert.crypto.grpc.server;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServer.java:8:import fr.gouv.stopc.robert.crypto.grpc.server.exception.RobertServerCryptoExceptionHandler;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServer.java:11:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.CryptoGrpcServiceImplGrpc.CryptoGrpcServiceImplImplBase;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServer.java:19:public class CryptoServiceGrpcServer {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServer.java:24:	private CryptoGrpcServiceImplImplBase cryptoService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServer.java:27:	public CryptoServiceGrpcServer(final CryptoGrpcServiceImplImplBase cryptoService) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServer.java:28:		this.cryptoService = cryptoService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServer.java:31:	public CryptoServiceGrpcServer(int port) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServer.java:35:	public CryptoServiceGrpcServer(ServerBuilder<?> serverBuilder, int port) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServer.java:37:				.addService(cryptoService)
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServer.java:38:				.intercept(new RobertServerCryptoExceptionHandler())
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServer.java:43:	public CryptoServiceGrpcServer(ServerBuilder<?> serverBuilder, int port, BindableService cryptoService) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServer.java:45:				.addService(cryptoService)
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServer.java:46:				.intercept(new RobertServerCryptoExceptionHandler())
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServer.java:56:				.addService(cryptoService)
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServer.java:57:				.intercept(new RobertServerCryptoExceptionHandler())
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/RobertCryptoGrpcServerApplication.java:1:package fr.gouv.stopc.robert.crypto.grpc.server;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/RobertCryptoGrpcServerApplication.java:11:public class RobertCryptoGrpcServerApplication {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/RobertCryptoGrpcServerApplication.java:15:		SpringApplication.run(RobertCryptoGrpcServerApplication.class, args);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/exception/RobertServerCryptoExceptionHandler.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.exception;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/exception/RobertServerCryptoExceptionHandler.java:10:public class RobertServerCryptoExceptionHandler implements ServerInterceptor {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/ICryptoServerConfigurationService.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.service;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/ICryptoServerConfigurationService.java:3:public interface ICryptoServerConfigurationService {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/IECDHKeyService.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.service;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/IECDHKeyService.java:5:import fr.gouv.stopc.robert.crypto.grpc.server.storage.model.ClientIdentifierBundle;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/IECDHKeyService.java:6:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/IECDHKeyService.java:9:    Optional<ClientIdentifierBundle> deriveKeysFromClientPublicKey(byte[] clientPublicKey) throws RobertServerCryptoException;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.service.impl;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:25:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.CreateRegistrationRequest;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:26:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.CreateRegistrationResponse;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:27:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.CryptoGrpcServiceImplGrpc.CryptoGrpcServiceImplImplBase;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:28:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.DeleteIdRequest;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:29:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.DeleteIdResponse;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:30:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.ErrorMessage;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:31:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetIdFromAuthRequest;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:32:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetIdFromAuthResponse;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:33:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetIdFromStatusRequest;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:34:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetIdFromStatusResponse;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:35:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetInfoFromHelloMessageRequest;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:36:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetInfoFromHelloMessageResponse;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:37:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.HSMCacheStatusRequest;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:38:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.HSMCacheStatusResponse;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:39:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.ReloadHSMRequest;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:40:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.ReloadHSMResponse;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:41:import fr.gouv.stopc.robert.crypto.grpc.server.service.ICryptoServerConfigurationService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:42:import fr.gouv.stopc.robert.crypto.grpc.server.service.IECDHKeyService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:43:import fr.gouv.stopc.robert.crypto.grpc.server.storage.cryptographic.service.ICryptographicStorageService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:44:import fr.gouv.stopc.robert.crypto.grpc.server.storage.model.ClientIdentifierBundle;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:45:import fr.gouv.stopc.robert.crypto.grpc.server.storage.service.IClientKeyStorageService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:46:import fr.gouv.stopc.robert.crypto.grpc.server.utils.PropertyLoader;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:50:import fr.gouv.stopc.robert.server.crypto.callable.TupleGenerator;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:51:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:52:import fr.gouv.stopc.robert.server.crypto.model.EphemeralTuple;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:53:import fr.gouv.stopc.robert.server.crypto.service.CryptoService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:54:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoAESECB;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:55:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoAESGCM;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:56:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoHMACSHA256;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:57:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoSkinny64;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:68:public class CryptoGrpcServiceBaseImpl extends CryptoGrpcServiceImplImplBase {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:70:    private final ICryptoServerConfigurationService serverConfigurationService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:71:    private final CryptoService cryptoService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:74:    private final ICryptographicStorageService cryptographicStorageService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:78:    public CryptoGrpcServiceBaseImpl(final ICryptoServerConfigurationService serverConfigurationService,
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:79:                                     final CryptoService cryptoService,
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:82:                                     final ICryptographicStorageService cryptographicStorageService,
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:86:        this.cryptoService = cryptoService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:89:        this.cryptographicStorageService = cryptographicStorageService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:96:        boolean success = this.cryptographicStorageService.reloadHSM(
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:109:        List<String> cachedKeys = this.cryptographicStorageService.getHSMCacheStatus();
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:155:            Optional<TuplesGenerationResult> encryptedTuples = generateEncryptedTuples(
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:162:            if (!encryptedTuples.isPresent()) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:179:                    .setTuples(ByteString.copyFrom(encryptedTuples.get().getEncryptedTuples()))
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:184:        } catch (RobertServerCryptoException e) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:187:            //throw new RobertServerCryptoInternalErrorException(errorMessage);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:227:            //throw new RobertServerCryptoInvalidAuthRequestException(errorMessage);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:309:        Optional<TuplesGenerationResult> encryptedTuples = generateEncryptedTuples(
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:316:        if (!encryptedTuples.isPresent()) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:332:                .setTuples(ByteString.copyFrom(encryptedTuples.get().getEncryptedTuples()))
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:345:            // Decrypt ECC
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:346:            cc = decryptECC(request.getEbid().toByteArray(), request.getEcc().byteAt(0));
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:348:            // If country code was decrypted successfully but does not match current server,
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:357:        } catch (RobertServerCryptoException e) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:358:            String errorMessage = "Could not decrypt ECC";
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:371:            // Decrypt EBID
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:372:            EbidContent ebidContent = decryptEBIDWithTimeReceived(request.getEbid().toByteArray(), request.getTimeReceived());
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:375:                String errorMessage = "Could not decrypt EBID";
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:388:        } catch (RobertServerCryptoException e) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:389:            String errorMessage = "Could not decrypt EBID";
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:416:            boolean macValid = this.cryptoService.macHelloValidation(new CryptoHMACSHA256(clientIdentifierBundle.get().getKeyForMac()),
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:432:        } catch (RobertServerCryptoException e) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:468:            responseObserver.onError(new RobertServerCryptoException("Could not validate auth request"));
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:491:    private Optional<AuthRequestValidationResult> validateAuthRequest(byte[] encryptedEbid,
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:497:            EbidContent ebidContent = decryptEBIDAndCheckEpoch(encryptedEbid, epochId);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:500:                String message = "Could not decrypt ebid content";
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:523:            boolean valid = this.cryptoService.macValidationForType(
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:524:                                new CryptoHMACSHA256(clientIdentifierBundle.get().getKeyForMac()),
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:525:                                addEbidComponents(encryptedEbid, epochId, time),
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:545:        } catch (RobertServerCryptoException e) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:570:        byte[] encryptedTuples;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:603:     * Decrypt the provided ebid and check the authRequestEpoch it contains the provided one or the next/previous
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:609:     * @throws RobertServerCryptoException
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:611:    private EbidContent decryptEBIDAndCheckEpoch(byte[] ebid,
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:617:            throws RobertServerCryptoException {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:619:        byte[] serverKey = this.cryptographicStorageService.getServerKey(
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:629:        byte[] decryptedEbid = this.cryptoService.decryptEBID(new CryptoSkinny64(serverKey), ebid);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:630:        byte[] idA = getIdFromDecryptedEBID(decryptedEbid);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:631:        int ebidEpochId = getEpochIdFromDecryptedEBID(decryptedEbid);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:639:                return decryptEBIDAndCheckEpoch(
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:646:                return manageEBIDDecryptRetry(ebid,
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:662:     * Decrypt the provided ebid and check the epoch it contains matches exactly the provided one
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:666:     * @throws RobertServerCryptoException
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:668:    private EbidContent decryptEBIDAndCheckEpoch(byte[] ebid, int epoch) throws RobertServerCryptoException {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:669:        return decryptEBIDAndCheckEpoch(ebid,
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:676:    private EbidContent manageEBIDDecryptRetry(byte[] ebid, int authRequestEpoch, AdjacentEpochMatchEnum adjacentEpochMatchEnum)
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:677:            throws RobertServerCryptoException {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:680:                log.warn("Retrying ebid decrypt with previous epoch");
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:681:                return decryptEBIDAndCheckEpoch(ebid, authRequestEpoch - 1, false, false, false, AdjacentEpochMatchEnum.NONE);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:683:                log.warn("Retrying ebid decrypt with next epoch");
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:684:                return decryptEBIDAndCheckEpoch(ebid, authRequestEpoch + 1, false, false,  false, AdjacentEpochMatchEnum.NONE);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:691:    private EbidContent decryptEBIDWithTimeReceived(byte[] ebid, long timeReceived) throws RobertServerCryptoException {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:696:        return decryptEBIDAndCheckEpoch(
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:729:    private byte[] decryptECC(byte[] ebid, byte encryptedCountryCode) throws RobertServerCryptoException {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:730:        return this.cryptoService.decryptCountryCode(
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:731:                new CryptoAESECB(this.cryptographicStorageService.getFederationKey()), ebid, encryptedCountryCode);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:746:    private byte[] addEbidComponents(byte[] encryptedEbid, int epochId, long time) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:747:        byte[] all = new byte[encryptedEbid.length + Integer.BYTES + Integer.BYTES];
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:748:        System.arraycopy(encryptedEbid, 0, all, 0, encryptedEbid.length);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:749:        System.arraycopy(ByteUtils.intToBytes(epochId), 0, all, encryptedEbid.length, Integer.BYTES);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:754:                encryptedEbid.length + Integer.BYTES,
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:767:                            .ecc(tuple.getEncryptedCountryCode())
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:774:    private Optional<TuplesGenerationResult> generateEncryptedTuples(byte[] tuplesEncryptionKey,
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:788:        final byte[][] serverKeys = this.cryptographicStorageService.getServerKeys(
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:804:        final Key federationKey = this.cryptographicStorageService.getFederationKey();
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:818:                } catch (RobertServerCryptoException e) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:839:                CryptoAESGCM cryptoAESGCM = new CryptoAESGCM(tuplesEncryptionKey);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:840:                return Optional.of(TuplesGenerationResult.builder().encryptedTuples(cryptoAESGCM.encrypt(tuplesAsBytes)).build());
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:843:        } catch (JsonProcessingException | RobertServerCryptoException e) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:844:            log.warn("Error serializing tuples to encrypted JSON");
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:849:    private byte[] getIdFromDecryptedEBID(byte[] ebid) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:855:    private int getEpochIdFromDecryptedEBID(byte[] ebid) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoServerConfigurationServiceImpl.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.service.impl;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoServerConfigurationServiceImpl.java:13:import fr.gouv.stopc.robert.crypto.grpc.server.service.ICryptoServerConfigurationService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoServerConfigurationServiceImpl.java:14:import fr.gouv.stopc.robert.crypto.grpc.server.utils.PropertyLoader;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoServerConfigurationServiceImpl.java:19: * Default implementation of the ICryptoServerConfigurationService
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoServerConfigurationServiceImpl.java:22:public class CryptoServerConfigurationServiceImpl implements ICryptoServerConfigurationService {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoServerConfigurationServiceImpl.java:29:    public CryptoServerConfigurationServiceImpl(final PropertyLoader propertyLoader) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.service.impl;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:15:import javax.crypto.KeyAgreement;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:20:import fr.gouv.stopc.robert.crypto.grpc.server.service.IECDHKeyService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:21:import fr.gouv.stopc.robert.crypto.grpc.server.storage.cryptographic.service.ICryptographicStorageService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:22:import fr.gouv.stopc.robert.crypto.grpc.server.storage.model.ClientIdentifierBundle;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:23:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:24:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoHMACSHA256;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:34:    private ICryptographicStorageService cryptographicStorageService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:37:    public ECDHKeyServiceImpl(ICryptographicStorageService cryptographicStorageService) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:38:        this.cryptographicStorageService = cryptographicStorageService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:41:    private byte[] deriveKeyForMacFromClientPublicKey(byte[] sharedSecret) throws RobertServerCryptoException {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:42:        CryptoHMACSHA256 sha256Mac = new CryptoHMACSHA256(sharedSecret);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:43:        return sha256Mac.encrypt(HASH_MAC.getBytes());
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:46:    private byte[] deriveKeyForTuplesFromClientPublicKey(byte[] sharedSecret) throws RobertServerCryptoException {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:47:        CryptoHMACSHA256 sha256Mac = new CryptoHMACSHA256(sharedSecret);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:48:        return sha256Mac.encrypt(HASH_TUPLES.getBytes());
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:53:        Optional<KeyPair> serverKeyPair = this.cryptographicStorageService.getServerKeyPair();
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:81:     * @throws RobertServerCryptoException
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:85:            throws RobertServerCryptoException {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/utils/PropertyLoader.java:1:package fr.gouv.stopc.robert.crypto.grpc.server.utils;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/utils/PropertyLoader.java:13:    @Value("${robert.crypto.server.port}")
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/utils/PropertyLoader.java:14:    private String cryptoServerPort;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/utils/PropertyLoader.java:16:    @Value("${robert.crypto.server.keystore.password}")
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/utils/PropertyLoader.java:19:    @Value("${robert.crypto.server.keystore.config.file}")
./robert-server-develop/robert-crypto-grpc-server/src/main/resources/application.properties:9:# The port of the crypto server
./robert-server-develop/robert-crypto-grpc-server/src/main/resources/application.properties:10:robert.crypto.server.port=${ROBERT_CRYPTO_SERVER_PORT:9090}
./robert-server-develop/robert-crypto-grpc-server/src/main/resources/application.properties:13:robert.crypto.server.keystore.password=${ROBERT_CRYPTO_SERVER_KEYSTORE_PASSWORD:1234}
./robert-server-develop/robert-crypto-grpc-server/src/main/resources/application.properties:16:robert.crypto.server.keystore.config.file=${ROBERT_CRYPTO_SERVER_CONFIG_FILE:/config/SoftHSMv2/softhsm2.cfg}
./robert-server-develop/robert-crypto-grpc-server/src/main/resources/application.properties:18:spring.datasource.url= ${ROBERT_CRYPTO_SERVER_DB_URL:jdbc:postgresql://localhost:5432/robert}
./robert-server-develop/robert-crypto-grpc-server/src/main/resources/application.properties:19:spring.datasource.username=${ROBERT_CRYPTO_SERVER_DB_USR:robert}
./robert-server-develop/robert-crypto-grpc-server/src/main/resources/application.properties:20:spring.datasource.password=${ROBERT_CRYPTO_SERVER_DB_PWD:robert}
./robert-server-develop/robert-crypto-grpc-server/src/main/resources/logback.xml:5:		value="${ROBERT_CRYPTO_SERVER_LOG_FILE_PATH:-/logs}" />
./robert-server-develop/robert-crypto-grpc-server/src/main/resources/logback.xml:7:		value="${ROBERT_CRYPTO_SERVER_LOG_FILE_NAME:-robert-crypto-grpc-server}" />
./robert-server-develop/robert-crypto-grpc-server/src/main/resources/logback.xml:9:		value="${ROBERT_CRYPTO_SERVER_ERROR_LOG_FILE_NAME:-robert-crypto-grpc-server}.error" />
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1:package test.fr.gouv.stopc.robert.crypto.grpc.server;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:28:import javax.crypto.KeyGenerator;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:29:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:44:import fr.gouv.stopc.robert.crypto.grpc.server.CryptoServiceGrpcServer;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:45:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.CreateRegistrationRequest;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:46:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.CreateRegistrationResponse;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:47:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.CryptoGrpcServiceImplGrpc;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:48:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.CryptoGrpcServiceImplGrpc.CryptoGrpcServiceImplImplBase;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:49:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.CryptoGrpcServiceImplGrpc.CryptoGrpcServiceImplStub;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:50:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.DeleteIdRequest;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:51:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.DeleteIdResponse;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:52:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetIdFromAuthRequest;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:53:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetIdFromAuthResponse;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:54:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetIdFromStatusRequest;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:55:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetIdFromStatusResponse;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:56:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetInfoFromHelloMessageRequest;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:57:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetInfoFromHelloMessageResponse;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:58:import fr.gouv.stopc.robert.crypto.grpc.server.service.ICryptoServerConfigurationService;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:59:import fr.gouv.stopc.robert.crypto.grpc.server.service.impl.CryptoGrpcServiceBaseImpl;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:60:import fr.gouv.stopc.robert.crypto.grpc.server.service.impl.ECDHKeyServiceImpl;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:61:import fr.gouv.stopc.robert.crypto.grpc.server.storage.cryptographic.service.ICryptographicStorageService;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:62:import fr.gouv.stopc.robert.crypto.grpc.server.storage.model.ClientIdentifierBundle;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:63:import fr.gouv.stopc.robert.crypto.grpc.server.storage.service.IClientKeyStorageService;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:64:import fr.gouv.stopc.robert.crypto.grpc.server.utils.PropertyLoader;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:68:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:69:import fr.gouv.stopc.robert.server.crypto.service.CryptoService;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:70:import fr.gouv.stopc.robert.server.crypto.service.impl.CryptoServiceImpl;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:71:import fr.gouv.stopc.robert.server.crypto.structure.CryptoAES;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:72:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoAESECB;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:73:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoAESGCM;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:74:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoHMACSHA256;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:75:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoSkinny64;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:87:import test.fr.gouv.stopc.robert.crypto.grpc.server.utils.CryptoTestUtils;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:93:class CryptoServiceGrpcServerTest {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:105:    private CryptoServiceGrpcServer server;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:107:    private CryptoGrpcServiceImplImplBase service;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:109:    private ICryptoServerConfigurationService serverConfigurationService;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:111:    private CryptoService cryptoService;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:119:    private ICryptographicStorageService cryptographicStorageService;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:131:        serverConfigurationService = new ICryptoServerConfigurationService() {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:143:        cryptoService = new CryptoServiceImpl();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:147:        service = new CryptoGrpcServiceBaseImpl(serverConfigurationService,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:148:                cryptoService,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:151:                cryptographicStorageService,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:154:        when(this.cryptographicStorageService.getServerKeyPair())
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:155:        .thenReturn(Optional.ofNullable(CryptoTestUtils.generateECDHKeyPair()));
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:163:        when(this.cryptographicStorageService.getKeyForEncryptingClientKeys()).thenReturn(secretKey);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:167:        server = new CryptoServiceGrpcServer(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:178:        this.federationKey = new SecretKeySpec(CryptoTestUtils.generateKey(32), CryptoAES.AES_ENCRYPTION_KEY_SCHEME);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:180:        when(this.cryptographicStorageService.getFederationKey()).thenReturn(this.federationKey);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:193:                .setClientPublicKey(ByteString.copyFrom(CryptoTestUtils.generateECDHPublicKey()))
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:201:        doReturn(serverKeys).when(this.cryptographicStorageService).getServerKeys(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:208:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:221:    private byte[] getIdFromDecryptedEBID(byte[] ebid) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:227:    private int getEpochIdFromDecryptedEBID(byte[] ebid) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:233:    private boolean checkTuplesForDay(List<CryptoGrpcServiceBaseImpl.EphemeralTupleJson> tuples, byte[] key) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:236:        for (CryptoGrpcServiceBaseImpl.EphemeralTupleJson tuple : tuples) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:239:                byte[] decryptedEbid = this.cryptoService.decryptEBID(new CryptoSkinny64(key), tuple.getKey().getEbid());
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:240:                byte[] idFromMessage = getIdFromDecryptedEBID(decryptedEbid);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:249:                int epochIdFromMessage = getEpochIdFromDecryptedEBID(decryptedEbid);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:254:            } catch (RobertServerCryptoException e) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:261:    private boolean checkTuplesContentMatchesKeysForDays(Collection<CryptoGrpcServiceBaseImpl.EphemeralTupleJson> decodedTuples,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:265:        ArrayList<CryptoGrpcServiceBaseImpl.EphemeralTupleJson> list = new ArrayList(decodedTuples);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:271:            List<CryptoGrpcServiceBaseImpl.EphemeralTupleJson> listToProcess = list.subList(lowerBound, offset);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:281:        CryptoAESGCM aesGcm = new CryptoAESGCM(this.clientStorageService.findKeyById(id).get().getKeyForTuples());
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:283:            byte[] decryptedTuples = aesGcm.decrypt(tuples);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:285:            Collection<CryptoGrpcServiceBaseImpl.EphemeralTupleJson> decodedTuples = objectMapper.readValue(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:286:                    decryptedTuples,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:287:                    new TypeReference<Collection<CryptoGrpcServiceBaseImpl.EphemeralTupleJson>>(){});
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:291:        } catch (RobertServerCryptoException | IOException e) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:312:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:327:                .setClientPublicKey(ByteString.copyFrom(CryptoTestUtils.generateDHPublicKey()))
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:335:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:351:                .setClientPublicKey(ByteString.copyFrom(CryptoTestUtils.generateECDHPublicKey("secp256k1")))
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:359:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:399:            CryptoHMACSHA256 hmacsha256 = new CryptoHMACSHA256(keyForMac);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:400:            return hmacsha256.encrypt(toHash);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:401:        } catch (RobertServerCryptoException e) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:408:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:409:        System.arraycopy(ByteUtils.intToBytes(epochId), 1, decryptedEbid, 0, Integer.BYTES - 1);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:410:        System.arraycopy(id, 0, decryptedEbid, Integer.BYTES - 1, id.length);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:412:        CryptoSkinny64 cryptoSkinny64 = new CryptoSkinny64(ks);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:413:        byte[] encryptedEbid = null;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:416:            encryptedEbid = cryptoSkinny64.encrypt(decryptedEbid);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:417:        } catch (RobertServerCryptoException e) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:421:        return encryptedEbid;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:447:        byte[] ksToUseToEncryptEBID;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:450:                ksToUseToEncryptEBID = ksPrevious;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:453:                ksToUseToEncryptEBID = ksNext;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:457:                ksToUseToEncryptEBID = ks;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:461:        byte[] ebid = generateEbid(id, epochId, ksToUseToEncryptEBID);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:463:                .when(this.cryptographicStorageService).getServerKey(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:468:                .when(this.cryptographicStorageService).getServerKey(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:513:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:545:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:578:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:614:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:644:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:674:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:704:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:734:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:775:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:814:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:846:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:878:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:907:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:947:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:980:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1015:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1044:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1073:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1111:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1143:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1164:        when(this.cryptographicStorageService.getServerKeys(this.currentEpochId,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1183:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1214:        when(this.cryptographicStorageService.getServerKeys(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1233:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1265:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1299:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1328:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1357:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1386:        when(this.cryptographicStorageService.getServerKeys(this.currentEpochId,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1405:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1428:        when(this.cryptographicStorageService.getServerKeys(this.currentEpochId,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1447:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1487:        doReturn(ks).when(this.cryptographicStorageService)
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1491:        doReturn(ksNext).when(this.cryptographicStorageService)
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1495:        doReturn(ksPrevious).when(this.cryptographicStorageService)
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1499:        doReturn(ksPrevious).when(this.cryptographicStorageService)
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1520:        when(this.cryptographicStorageService.getFederationKey()).thenReturn(this.federationKey);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1526:            ecc = this.cryptoService.encryptCountryCode(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1527:                    new CryptoAESECB(this.cryptographicStorageService.getFederationKey()),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1533:            mac = this.cryptoService.generateMACHello(new CryptoHMACSHA256(keyForMac), hello);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1535:        } catch (RobertServerCryptoException e) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1578:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1621:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1661:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1718:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1760:                sendCryptoRequest(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1780:        void execute(CryptoGrpcServiceImplStub stub, T t, StreamObserver<U> u);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1787:    <T, U> U sendCryptoRequest(T request, StubExecution<T, U> stubExecution, HandleError handleError, ObserverExecutionResult res) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1789:            CryptoGrpcServiceImplStub stub = CryptoGrpcServiceImplGrpc.newStub(this.inProcessChannel);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:1:package test.fr.gouv.stopc.robert.crypto.grpc.server.service.impl;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:7:import fr.gouv.stopc.robert.crypto.grpc.server.storage.cryptographic.service.ICryptographicStorageService;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:8:import fr.gouv.stopc.robert.crypto.grpc.server.storage.model.ClientIdentifierBundle;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:9:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:21:import fr.gouv.stopc.robert.crypto.grpc.server.service.impl.ECDHKeyServiceImpl;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:22:import test.fr.gouv.stopc.robert.crypto.grpc.server.utils.CryptoTestUtils;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:24:import javax.crypto.KeyAgreement;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:37:    private ICryptographicStorageService cryptographicStorageService;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:48:        byte [] clientPublicKey = CryptoTestUtils.generateECDHPublicKey();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:51:        when(this.cryptographicStorageService.getServerKeyPair())
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:52:                .thenReturn(Optional.ofNullable(CryptoTestUtils.generateECDHKeyPair()));
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:57:        } catch (RobertServerCryptoException e) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:1:package test.fr.gouv.stopc.robert.crypto.grpc.server.utils;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:13:public final class CryptoTestUtils {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:15:    private CryptoTestUtils() {
./robert-server-develop/robert-crypto-grpc-server/src/test/resources/application.properties:3:robert.crypto.server.port=9090
./robert-server-develop/robert-server-batch/pom.xml:50:			<artifactId>robert-crypto-grpc-server-messaging</artifactId>
./robert-server-develop/robert-server-batch/pom.xml:62:			<artifactId>robert-server-crypto</artifactId>
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/configuration/ContactsProcessingConfiguration.java:34:import fr.gouv.stopc.robert.crypto.grpc.server.client.service.ICryptoServerGrpcClient;
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/configuration/ContactsProcessingConfiguration.java:78:    private final ICryptoServerGrpcClient cryptoServerClient;
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/configuration/ContactsProcessingConfiguration.java:95:            final ICryptoServerGrpcClient cryptoServerClient,
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/configuration/ContactsProcessingConfiguration.java:106:        this.cryptoServerClient = cryptoServerClient;
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/configuration/ContactsProcessingConfiguration.java:340:                this.cryptoServerClient,
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/configuration/RobertServerBatchConfiguration.java:7:import fr.gouv.stopc.robert.crypto.grpc.server.client.service.ICryptoServerGrpcClient;
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/configuration/RobertServerBatchConfiguration.java:15:			final ICryptoServerGrpcClient cryptoServerClient) {
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/configuration/RobertServerBatchConfiguration.java:17:		cryptoServerClient.init(propertyLoader.getCryptoServerHost(), Integer.parseInt( propertyLoader.getCryptoServerPort()));
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/processor/ContactProcessor.java:13:import fr.gouv.stopc.robert.crypto.grpc.server.client.service.ICryptoServerGrpcClient;
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/processor/ContactProcessor.java:14:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetInfoFromHelloMessageRequest;
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/processor/ContactProcessor.java:15:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetInfoFromHelloMessageResponse;
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/processor/ContactProcessor.java:23:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/processor/ContactProcessor.java:39:    private ICryptoServerGrpcClient cryptoServerClient;
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/processor/ContactProcessor.java:53:             final ICryptoServerGrpcClient cryptoServerClient,
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/processor/ContactProcessor.java:59:         this.cryptoServerClient = cryptoServerClient;
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/processor/ContactProcessor.java:67:     * validation step order has evolved from spec because of delegation of validation of messages to crypto back-end
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/processor/ContactProcessor.java:70:     * @throws RobertServerCryptoException
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/processor/ContactProcessor.java:74:    public Contact process(Contact contact) throws RobertServerCryptoException, RobertScoringException {
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/processor/ContactProcessor.java:102:            Optional<GetInfoFromHelloMessageResponse> response = this.cryptoServerClient.getInfoFromHelloMessage(request);
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/utils/PropertyLoader.java:14:    @Value("${robert.crypto.server.host}")
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/utils/PropertyLoader.java:15:    private String cryptoServerHost;
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/utils/PropertyLoader.java:17:    @Value("${robert.crypto.server.port}")
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/utils/PropertyLoader.java:18:    private String cryptoServerPort;
./robert-server-develop/robert-server-batch/src/main/resources/application-dev.properties:15:# The hostname of the crypto server
./robert-server-develop/robert-server-batch/src/main/resources/application-dev.properties:16:robert.crypto.server.host=${ROBERT_CRYPTO_SERVER_HOST:localhost}
./robert-server-develop/robert-server-batch/src/main/resources/application-dev.properties:18:# The port of the crypto server
./robert-server-develop/robert-server-batch/src/main/resources/application-dev.properties:19:robert.crypto.server.port=${ROBERT_CRYPTO_SERVER_PORT:9090}
./robert-server-develop/robert-server-batch/src/main/resources/application.properties:3:# The hostname of the crypto server
./robert-server-develop/robert-server-batch/src/main/resources/application.properties:4:robert.crypto.server.host=${ROBERT_CRYPTO_SERVER_HOST:localhost}
./robert-server-develop/robert-server-batch/src/main/resources/application.properties:6:# The port of the crypto server
./robert-server-develop/robert-server-batch/src/main/resources/application.properties:7:robert.crypto.server.port=${ROBERT_CRYPTO_SERVER_PORT:9090}
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:25:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:42:import fr.gouv.stopc.robert.crypto.grpc.server.client.service.ICryptoServerGrpcClient;
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:43:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetInfoFromHelloMessageResponse;
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:52:import fr.gouv.stopc.robert.server.crypto.service.CryptoService;
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:53:import fr.gouv.stopc.robert.server.crypto.structure.CryptoAES;
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:54:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoAESECB;
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:55:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoHMACSHA256;
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:56:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoSkinny64;
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:78:	private CryptoService cryptoService;
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:87:	private ICryptoServerGrpcClient cryptoServerClient;
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:119:		this.federationKey = new SecretKeySpec(this.generateKey(32), CryptoAES.AES_ENCRYPTION_KEY_SCHEME);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:125:				cryptoServerClient,
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:137:	public void testProcessContactWithABadEncryptedCountryCodeFails() {
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:145:			byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId, ProcessorTestUtils.generateIdA());
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:147:			// Create a fake Encrypted Country Code (ECC)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:148:			byte[] encryptedCountryCode = new byte[] { (byte) 0xff };
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:151:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:152:					.messageDetails(generateHelloMessagesFor(ebid, encryptedCountryCode, currentEpochId))
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:182:			byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId, ProcessorTestUtils.generateIdA());
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:183:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:186:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:201:			verify(this.cryptoServerClient, never()).getInfoFromHelloMessage(any()); // must be called once only
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:220:			byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId, ProcessorTestUtils.generateIdA());
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:221:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:232:			System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:233:			System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:234:			System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:236:			when(this.cryptoServerClient.getInfoFromHelloMessage(any())).thenReturn(Optional.empty());
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:240:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:241:					.messageDetails(generateHelloMessagesFor(ebid, encryptedCountryCode, currentEpochId))
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:258:			verify(this.cryptoServerClient, atLeast(1)).getInfoFromHelloMessage(any()); // must be called at least once
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:293:			byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId,
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:296:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:298:			when(this.cryptoServerClient.getInfoFromHelloMessage(any())).thenReturn(Optional.of(
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:308:			messages.add(generateHelloMessageFor(ebid, encryptedCountryCode, t, -78));
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:309:			messages.add(generateHelloMessageFor(ebid, encryptedCountryCode, t + 165L, -50));
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:310:			messages.add(generateHelloMessageFor(ebid, encryptedCountryCode, t + 300L, -35));
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:314:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:336:			verify(this.cryptoServerClient, times(messages.size())).getInfoFromHelloMessage(any());
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:370:			byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId,
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:372:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:374:			when(this.cryptoServerClient.getInfoFromHelloMessage(any())).thenReturn(Optional.of(
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:384:			messages.add(generateHelloMessageFor(ebid, encryptedCountryCode, t, -78));
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:385:			messages.add(generateHelloMessageFor(ebid, encryptedCountryCode, t + 165L, -50));
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:389:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:413:			verify(this.cryptoServerClient, times(messages.size())).getInfoFromHelloMessage(any());
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:434:			byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId,
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:437:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:453:			System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:454:			System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:455:			System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:463:					.when(this.cryptoServerClient)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:466:			byte[] mac = this.cryptoService
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:467:					.generateMACHello(new CryptoHMACSHA256(getKeyMacFor(this.registration.get().getPermanentIdentifier())), helloMessage);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:478:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:496:			verify(this.cryptoServerClient, times(1)).getInfoFromHelloMessage(any());
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:525:			byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId,
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:527:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:548:			System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:549:			System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:550:			System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:558:					.when(this.cryptoServerClient)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:561:			byte[] mac = this.cryptoService
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:562:					.generateMACHello(new CryptoHMACSHA256(getKeyMacFor(this.registration.get().getPermanentIdentifier())), helloMessage);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:573:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:590:			verify(this.cryptoServerClient).getInfoFromHelloMessage(any());
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:611:            byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId,
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:613:            byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:644:            System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:645:            System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:646:            System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:654:                    .when(this.cryptoServerClient)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:657:            byte[] mac = this.cryptoService
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:658:                    .generateMACHello(new CryptoHMACSHA256(getKeyMacFor(this.registration.get().getPermanentIdentifier())), helloMessage);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:676:                    .ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:701:            verify(this.cryptoServerClient, times(2)).getInfoFromHelloMessage(any());
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:721:			byte[] ebid = this.cryptoService.generateEBID(
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:722:					new CryptoSkinny64(serverKey),
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:725:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:726:					new CryptoAESECB(federationKey),
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:747:			System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:748:			System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:749:			System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:751:			doReturn(Optional.empty()).when(this.cryptoServerClient).getInfoFromHelloMessage(any());
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:753:			byte[] mac = this.cryptoService
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:754:					.generateMACHello(new CryptoHMACSHA256(getKeyMacFor(this.registration.get().getPermanentIdentifier())), helloMessage);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:765:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:782:			verify(this.cryptoServerClient).getInfoFromHelloMessage(any());
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:819:			byte[] ebid = this.cryptoService.generateEBID(
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:820:					new CryptoSkinny64(serverKey),
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:823:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:824:					new CryptoAESECB(federationKey),
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:845:			System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:846:			System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:847:			System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:849:			byte[] mac = this.cryptoService
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:850:					.generateMACHello(new CryptoHMACSHA256(getKeyMacFor(this.registration.get().getPermanentIdentifier())), helloMessage);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:861:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:873:					.when(this.cryptoServerClient)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:895:			verify(this.cryptoServerClient, times(contact.getMessageDetails().size())).getInfoFromHelloMessage(any());
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:914:            byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId,
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:917:            byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:943:            System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:944:            System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:945:            System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:954:                    .when(this.cryptoServerClient)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:957:            byte[] mac = this.cryptoService
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:958:                    .generateMACHello(new CryptoHMACSHA256(getKeyMacFor(this.registration.get().getPermanentIdentifier())), helloMessage);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:983:                    .ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1007:            verify(this.cryptoServerClient, times(3)).getInfoFromHelloMessage(any());
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1041:			byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId,
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1043:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1062:			System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1063:			System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1064:			System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1072:					.when(this.cryptoServerClient)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1075:			byte[] mac = this.cryptoService
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1076:					.generateMACHello(new CryptoHMACSHA256(getKeyMacFor(this.registration.get().getPermanentIdentifier())), helloMessage);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1087:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1111:			verify(this.cryptoServerClient, times(contact.getMessageDetails().size())).getInfoFromHelloMessage(any());
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1124:	private HelloMessageDetail generateHelloMessageFor(byte[] ebid, byte[] encryptedCountryCode, long t, int rssi) throws Exception {
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1144:		System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1145:		System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1146:		System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1148:		byte[] mac = this.cryptoService
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1149:				.generateMACHello(new CryptoHMACSHA256(getKeyMacFor(this.registration.get().getPermanentIdentifier())), helloMessage);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1163:	private List<HelloMessageDetail> generateHelloMessagesFor(byte[] ebid, byte[] encryptedCountryCode, int currentEpoch) throws Exception {
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1173:			messages.add(generateHelloMessageFor(ebid, encryptedCountryCode, t, rssi));
./robert-server-develop/robert-server-batch/src/test/resources/application.properties:12:# The hostname of the crypto server
./robert-server-develop/robert-server-batch/src/test/resources/application.properties:13:robert.crypto.server.host=localhost
./robert-server-develop/robert-server-batch/src/test/resources/application.properties:15:# The port of the crypto server
./robert-server-develop/robert-server-batch/src/test/resources/application.properties:16:robert.crypto.server.port=9090
./robert-server-develop/robert-server-crypto/pom.xml:19:	<artifactId>robert-server-crypto</artifactId>
./robert-server-develop/robert-server-crypto/pom.xml:21:	<name>robert-server-crypto</name>
./robert-server-develop/robert-server-crypto/pom.xml:22:	<description>Cryptography library module. Do not use directly except for tests and from crypto server</description>
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/RobertServerCryptoApplication.java:1:package fr.gouv.stopc.robert.server.crypto;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/RobertServerCryptoApplication.java:7:public class RobertServerCryptoApplication {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/RobertServerCryptoApplication.java:10:		SpringApplication.run(RobertServerCryptoApplication.class, args);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:1:package fr.gouv.stopc.robert.server.crypto.callable;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:9:import fr.gouv.stopc.robert.server.crypto.structure.ICryptoStructure;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:10:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:15:class CryptoStructureConcurrentArray<T extends ICryptoStructure> {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:16:    private List<T> cryptoStructureList;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:18:    private final Map<String, T> cryptoStructureIndexByThread = new HashMap<>();
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:21:     * Constructor defines the cryptoStructure Array to be used by a bunch of threads
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:22:     * @param cryptoStructureArray {@link #getCryptoStructure(String)}
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:24:    public CryptoStructureConcurrentArray(T[] cryptoStructureArray) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:25:        this.cryptoStructureList = Arrays.asList(cryptoStructureArray);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:29:     * Array of CryptoStructure object stored to be used by a bunch of thread in ThreadPoolExecutor
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:31:     * @return return an assigned CryptoStructure depending of the given threadName
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:32:     * @throws RobertServerCryptoException
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:34:    public T getCryptoStructure(String threadName) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:35://        if (!this.cryptoStructureIndexByThread.containsKey(threadName)) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:36:            this.cryptoStructureList = Collections.synchronizedList(this.cryptoStructureList);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:38:            if (this.cryptoStructureList.isEmpty()) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:39:                throw new RobertServerCryptoException("There is no more CryptoStructure available.");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:42:            final T t = this.cryptoStructureList.get(0);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:43://            this.cryptoStructureIndexByThread.put(threadName, t);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:45:            this.cryptoStructureList = withoutFirstElement(this.cryptoStructureList);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:47:        return this.cryptoStructureIndexByThread.get(threadName);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:51:        T[] cryptoStructureArray = (T[]) list.toArray();
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:52:        cryptoStructureArray = Arrays.copyOfRange(cryptoStructureArray, 1, cryptoStructureArray.length);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:53:        List<T> truncatedList = Arrays.asList(cryptoStructureArray);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:1:package fr.gouv.stopc.robert.server.crypto.callable;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:5:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:6:import fr.gouv.stopc.robert.server.crypto.model.EphemeralTuple;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:7:import fr.gouv.stopc.robert.server.crypto.service.CryptoService;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:8:import fr.gouv.stopc.robert.server.crypto.structure.CryptoCipherStructureAbstract;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:11: * Callable to create encrypted key using #CryptoService
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:17:     * Should access to cryptographic method.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:18:     * Share instance of Crypto service for multi thread for memory performance.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:20:    private final CryptoService cryptoService;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:33:     * Declared list of Crypto instances to process EBID threadSafe
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:35://    private final CryptoStructureConcurrentArray<CryptoCipherStructureAbstract> cryptoStructureForEBIDList;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:38:     * Declared list of Crypto instances to process ECC threadSafe
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:40://    private final CryptoStructureConcurrentArray<CryptoCipherStructureAbstract> cryptoStructureForECCList;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:47:    private CryptoCipherStructureAbstract cryptoStructureForEBID;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:49:    private CryptoCipherStructureAbstract cryptoStructureForECC;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:52:     * Share instance of {@link #cryptoService} for multi thread for memory performance.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:53:     * keysToEncrypt is corresponding to the key that would be encrypted by {@link #cryptoService}
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:55://    public TupleCallable(CryptoService cryptoService,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:56://            CryptoStructureConcurrentArray<CryptoCipherStructureAbstract> cryptoStructureForEBIDList,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:57://            CryptoStructureConcurrentArray<CryptoCipherStructureAbstract> cryptoStructureForECCList,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:59://        this.cryptoService = cryptoService;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:63://        this.cryptoStructureForEBIDList = cryptoStructureForEBIDList;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:64://        this.cryptoStructureForECCList = cryptoStructureForECCList;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:67:    public TupleCallable(CryptoService cryptoService,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:68:            CryptoCipherStructureAbstract cryptoStructureForEBID,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:69:            CryptoCipherStructureAbstract cryptoStructureForECC,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:71:        this.cryptoService = cryptoService;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:75:        this.cryptoStructureForEBID = cryptoStructureForEBID;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:76:        this.cryptoStructureForECC = cryptoStructureForECC;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:80:     * This callable is using a thread safe array service of CryptoStructureList.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:81:     * @return the encrypted keys made by {@link #cryptoService} applied on {@link #idA}
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:82:     * @throws RobertServerCryptoException
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:86:    public EphemeralTuple call() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:90://        final CryptoCipherStructureAbstract cryptoStructureForEBID = this.cryptoStructureForEBIDList.getCryptoStructure(threadName);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:91://        final CryptoCipherStructureAbstract cryptoStructureForECC = this.cryptoStructureForECCList.getCryptoStructure(threadName);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:93:        return this.cryptoService.generateEphemeralTuple(
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:94:                cryptoStructureForEBID,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:95:                cryptoStructureForECC,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:1:package fr.gouv.stopc.robert.server.crypto.callable;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:11:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoAESECB;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:13:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:14:import fr.gouv.stopc.robert.server.crypto.model.EphemeralTuple;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:15:import fr.gouv.stopc.robert.server.crypto.service.CryptoService;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:16:import fr.gouv.stopc.robert.server.crypto.service.impl.CryptoServiceImpl;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:17:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoSkinny64;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:28:    private CryptoSkinny64 skinny64;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:30:    private CryptoAESECB aes;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:32:    private final CryptoService cryptoService;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:37:        this.skinny64 =  new CryptoSkinny64(this.serverKey);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:38:        this.aes = new CryptoAESECB(this.federationKey);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:40:        // Create instance of CryptoServiceImpl that will be used in threads
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:41:        this.cryptoService = new CryptoServiceImpl();
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:47:                                           final byte countryCode) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:51:                                    this.cryptoService,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:58:            } catch (RobertServerCryptoException e) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:68:            throw new RobertServerCryptoException("Failed to generate the tuples");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/exception/RobertServerCryptoException.java:1:package fr.gouv.stopc.robert.server.crypto.exception;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/exception/RobertServerCryptoException.java:10:public class RobertServerCryptoException extends Exception {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/exception/RobertServerCryptoException.java:18:	public RobertServerCryptoException(String message) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/model/EphemeralTuple.java:1:package fr.gouv.stopc.robert.server.crypto.model;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/model/EphemeralTuple.java:11:    private byte[] encryptedCountryCode;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/model/EphemeralTuple.java:17:     * @param encryptedCountryCode Encrypted Country Code used by UA for the given epoch
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/model/EphemeralTuple.java:19:    public EphemeralTuple(int epochId, byte[] ebid, byte[] encryptedCountryCode) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/model/EphemeralTuple.java:22:        this.encryptedCountryCode = encryptedCountryCode;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/model/EphemeralTuple.java:36:    public void setEncryptedCountryCode(byte[] encryptedCountryCode) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/model/EphemeralTuple.java:37:        this.encryptedCountryCode = encryptedCountryCode;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/model/EphemeralTuple.java:48:    public byte[] getEncryptedCountryCode() {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/model/EphemeralTuple.java:49:        return encryptedCountryCode;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:1:package fr.gouv.stopc.robert.server.crypto.service;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:4:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:5:import fr.gouv.stopc.robert.server.crypto.model.EphemeralTuple;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:6:import fr.gouv.stopc.robert.server.crypto.structure.CryptoCipherStructureAbstract;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:7:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoHMACSHA256;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:10: * Service centralizing crypto operations required to generate or validate crypto tokens
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:12:public interface CryptoService {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:15:     * Generating Tuple ECC EBID and epoch performing encryption with cryptoForEBID and cryptoForECC
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:16:     * EBID -> {@link #generateEBID(CryptoCipherStructureAbstract, int, byte[])}
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:17:     * ECC -> {@link #encryptCountryCode(CryptoCipherStructureAbstract, byte[], byte)}
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:19:     * @param cryptoForEBID instance of cryptoForEBID initialize with the KS key
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:20:     * @param cryptoForECC  instance of cryptoForECC initialize with the KS key
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:24:     * @return return encrypted EphemeralTuple fed with ECC EBDI and epoch
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:25:     * @throws RobertServerCryptoException
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:28:            CryptoCipherStructureAbstract cryptoForEBID,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:29:            CryptoCipherStructureAbstract cryptoForECC,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:30:            int epochId, byte[] idA, byte countryCode) throws RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:34:     * @param cryptoForEBID instance of Crypto algo to encrypt EBID with, using KS (server key)
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:37:     * @return return encrypted epochId idA as encrypted EBID
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:38:     * @throws RobertServerCryptoException
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:40:    byte[] generateEBID(CryptoCipherStructureAbstract cryptoForEBID, int epochId, byte[] idA) throws RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:43:     * Decrypt an EBID
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:44:     * @param cryptoForEBID
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:47:     * @throws RobertServerCryptoException
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:49:    byte[] decryptEBID(CryptoCipherStructureAbstract cryptoForEBID, byte[] ebid) throws RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:52:     * @param cryptoForECC instance of Crypto algo to encrypt ECC with, using KG (federation key)
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:53:     * @param ebid      Result of encryption of IDa and i as EBID - 64-bits
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:55:     * @return return encrypted countryCode and EBID as ECC with MSB method specified in ROBert documentation.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:56:     * @throws RobertServerCryptoException
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:58:    byte[] encryptCountryCode(CryptoCipherStructureAbstract cryptoForECC, byte[] ebid, byte countryCode) throws RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:61:     * Decrypt an encrypted country code
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:62:     * @param cryptoForECC
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:64:     * @param encryptedCountryCode
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:66:     * @throws RobertServerCryptoException
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:68:     byte[] decryptCountryCode(CryptoCipherStructureAbstract cryptoForECC, byte[] ebid, byte encryptedCountryCode) throws RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:72:     * @param cryptoHMACSHA256S CryptoStructure used to encrypt HMAC-SHA256
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:74:     * @return the HMACSH256 encrypted, truncate value.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:75:     * @throws RobertServerCryptoException
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:77:    byte[] generateMACHello(CryptoHMACSHA256 cryptoHMACSHA256S, byte[] hello) throws RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:83:     * @throws RobertServerCryptoException
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:85:    boolean macHelloValidation(CryptoHMACSHA256 cryptoHMACSHA256S, byte[] hello) throws RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:88:     * @param cryptoHMACSHA256S CryptoStructure used to encrypt HMAC-SHA256
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:89:     * @param toBeEncrypted is concat(EBID | Time) respectively 32-bits + 64-bits
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:90:     * @param macToVerify the mac to compare the encrypted payload against
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:92:     * @throws RobertServerCryptoException
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:94:    boolean macESRValidation(CryptoHMACSHA256 cryptoHMACSHA256S,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:95:                             byte[] toBeEncrypted,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:96:                             byte[] macToVerify) throws RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:100:     * @param cryptoHMACSHA256S
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:101:     * @param toBeEncrypted Payload to be encrypted (with the additional prefixByte parameter)
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:105:     * @throws RobertServerCryptoException
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:107:    boolean macValidationForType(final CryptoHMACSHA256 cryptoHMACSHA256S,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:108:                                 final byte[] toBeEncrypted,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:110:                                 final DigestSaltEnum salt) throws RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:1:package fr.gouv.stopc.robert.server.crypto.service.impl;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:8:import javax.crypto.BadPaddingException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:9:import javax.crypto.Cipher;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:10:import javax.crypto.IllegalBlockSizeException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:11:import javax.crypto.NoSuchPaddingException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:12:import javax.crypto.spec.IvParameterSpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:13:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:19:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:20:import fr.gouv.stopc.robert.server.crypto.model.EphemeralTuple;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:21:import fr.gouv.stopc.robert.server.crypto.service.CryptoService;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:22:import fr.gouv.stopc.robert.server.crypto.structure.CryptoCipherStructureAbstract;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:23:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoHMACSHA256;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:28:public class CryptoServiceImpl implements CryptoService {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:34:            final CryptoCipherStructureAbstract cryptoForEBID,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:35:            final CryptoCipherStructureAbstract cryptoForECC,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:38:            final byte countryCode) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:40:        byte[] ebid =  this.generateEBID(cryptoForEBID, epochId, idA);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:43:        byte[] encryptedCountryCode = this.encryptCountryCode(cryptoForECC, ebid, countryCode);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:45:        return  new EphemeralTuple(epochId, ebid, encryptedCountryCode);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:49:    public byte[] generateEBID(final CryptoCipherStructureAbstract cryptoForEBID, final int epochId, final byte[] idA) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:55:        byte[] bytesToEncrypt = ByteUtils.addAll(truncatedEpoch, idA);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:57:        return cryptoForEBID.encrypt(bytesToEncrypt);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:61:    public byte[] decryptEBID(final CryptoCipherStructureAbstract cryptoForEBID, final byte[] ebid) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:64:        return cryptoForEBID.decrypt(ebid);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:68:    public byte[] encryptCountryCode(final CryptoCipherStructureAbstract cryptoForECC, final byte[] ebid, final byte countryCode) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:73:        byte[] payloadToEncrypt = Arrays.copyOf(ebid, 128 / 8);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:75:        // AES Encryption of the payload to encrypt
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:76:        byte[] encryptedPayload = cryptoForECC.encrypt(payloadToEncrypt);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:80:        byte truncatedEncryptedPayload = encryptedPayload[0];
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:82:        return new byte[] { (byte) (truncatedEncryptedPayload ^ countryCode) };
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:86:    public byte[] decryptCountryCode(final CryptoCipherStructureAbstract cryptoForECC, final byte[] ebid, final byte encryptedCountryCode) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:88:        this.assertLength("encrypted country code", 8, encryptedCountryCode);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:90:        // decrypt method is same as encrypt but take in third parameter ecc
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:91:        return this.encryptCountryCode(cryptoForECC, ebid, encryptedCountryCode);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:95:    public byte[] generateMACHello(final CryptoHMACSHA256 cryptoHMACSHA256S, final byte[] hello) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:102:        byte[] generatedMAC = this.generateHMAC(cryptoHMACSHA256S, mai, DigestSaltEnum.HELLO);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:112:     * @param cryptoHMACSHA256S CryptoStructure uses to encrypt HMAC-SHA256
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:115:     * @return the HMAC-SHA256 encrypted, truncated value.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:117:    private byte[] generateHMAC(final CryptoHMACSHA256 cryptoHMACSHA256S,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:119:            final DigestSaltEnum salt) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:124:        return cryptoHMACSHA256S.encrypt(ByteUtils.addAll(prefix, argument));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:128:    public boolean macHelloValidation(final CryptoHMACSHA256 cryptoHMACSHA256S, final byte[] hello) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:132:        final byte[] generatedMAC = this.generateMACHello(cryptoHMACSHA256S, hello);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:141:    public boolean macESRValidation(final CryptoHMACSHA256 cryptoHMACSHA256S,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:142:            final byte[] toBeEncrypted,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:143:            final byte[] macToVerify) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:144:        return macValidationForType(cryptoHMACSHA256S, toBeEncrypted, macToVerify, DigestSaltEnum.STATUS);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:148:    public boolean macValidationForType(final CryptoHMACSHA256 cryptoHMACSHA256S,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:149:            final byte[] toBeEncrypted,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:151:            final DigestSaltEnum salt) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:152:        this.assertLength("concat(EBID | Time)", 64+32+32, toBeEncrypted);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:153:        byte[] generatedMAC = this.generateHMAC(cryptoHMACSHA256S, toBeEncrypted, salt);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:162:     * @throws RobertServerCryptoException argument should be at the right size
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:164:    protected void assertLength(String propertyName, int size, byte... bytes) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:168:            throw new RobertServerCryptoException(message);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:188:            log.error("Unable to decrypt with AES cryptographic algorithm due to {}", e);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/Skinny64Key.java:4:package fr.gouv.stopc.robert.server.crypto.skinny64;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:4:package fr.gouv.stopc.robert.server.crypto.skinny64;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:24:     * @param key      Key of cryption of size SKINNY64_KEY_SIZE bytes
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:39:     * Encrypt a input plain text
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:41:     * @param output The output buffer (SKINNY64_BLOCK_SIZE bytes) for the message crypted
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:42:     * @param input  The input buffer (SKINNY64_BLOCK_SIZE bytes) for the message to be crypted
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:46:    void encrypt(final byte [] output, final byte [] input, final Skinny64Key ks);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:49:     * Decrypt an input cypher text
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:51:     * @param output The output buffer (SKINNY64_BLOCK_SIZE bytes) for the message decrypted
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:52:     * @param input  The output buffer (SKINNY64_BLOCK_SIZE bytes) for the message to be decrypted
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:56:    void decrypt(final byte [] output, final byte [] input, final Skinny64Key ks);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:4:package fr.gouv.stopc.robert.server.crypto.skinny64.impl;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:6:import fr.gouv.stopc.robert.server.crypto.skinny64.Skinny64Key;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:7:import fr.gouv.stopc.robert.server.crypto.skinny64.SkinnyCipher192;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:68:     * @param key      Key of cryption
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:90:             * the 3rd and 4th rows are fixed and will be applied during encrypt/decrypt
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:106:     * @param key      Key of cryption
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:136:     * @param key      Key of cryption
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:267:    final public void encrypt(final byte[] output, final byte[] input, final Skinny64Key ks) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:274:            throw new IllegalArgumentException("Encrypt: Skinny64Key must be valid");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:277:            throw new IllegalArgumentException("Encrypt: Output buffer size not valid");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:280:            throw new IllegalArgumentException("Encrypt: Inputbuffer size not valid");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:290:        /* Perform all encryption rounds */
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:324:    final public void decrypt(final byte[] output, final byte[] input, final Skinny64Key ks) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:331:            throw new IllegalArgumentException("Decrypt: Skinny64Key must be valid");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:334:            throw new IllegalArgumentException("Decrypt: Output buffer size not valid");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:337:            throw new IllegalArgumentException("Decrypt: Input buffer size not valid");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:346:        /* Perform all decryption rounds */
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:1:package fr.gouv.stopc.robert.server.crypto.structure;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:10:import javax.crypto.Cipher;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:11:import javax.crypto.NoSuchPaddingException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:12:import javax.crypto.SecretKey;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:13:import javax.crypto.spec.IvParameterSpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:14:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:16:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:21:public abstract class CryptoAES extends CryptoCipherStructureAbstract {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:23:    public static final String AES_ENCRYPTION_KEY_SCHEME = "AES";
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:29:    protected  Cipher decryptCypher;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:36:    public CryptoAES(byte[] key, String cipherScheme) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:41:            // Generate encryption keySpec with server federate keySpec.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:42:            keySpec = new SecretKeySpec(key, AES_ENCRYPTION_KEY_SCHEME);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:44:            // Create cipher with AES encryption scheme.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:46:            decryptCypher = Cipher.getInstance(cipherScheme);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:48://                cipher.init(Cipher.ENCRYPT_MODE, keySpec, this.getAlgorithmParameterSpec());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:49:                decryptCypher.init(Cipher.DECRYPT_MODE, keySpec, this.getAlgorithmParameterSpec());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:52:                cipher.init(Cipher.ENCRYPT_MODE, keySpec);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:53:                decryptCypher.init(Cipher.DECRYPT_MODE, keySpec);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:64:    public CryptoAES(String cipherScheme, Key key) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:68:            // Create cipher with AES encryption scheme.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:70:            decryptCypher = Cipher.getInstance(cipherScheme);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:72:                cipher.init(Cipher.ENCRYPT_MODE, key, this.getAlgorithmParameterSpec());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:75:                cipher.init(Cipher.ENCRYPT_MODE, key);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:101:    public Cipher getDecryptCypher() {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:102:        return this.decryptCypher;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:1:package fr.gouv.stopc.robert.server.crypto.structure;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:8:import javax.crypto.BadPaddingException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:9:import javax.crypto.Cipher;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:10:import javax.crypto.IllegalBlockSizeException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:13:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:17:public abstract class CryptoCipherStructureAbstract implements ICryptoStructure, ICipherStructure {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:24:    public byte[] encrypt(byte[] plainText) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:30:                this.getCipher().init(Cipher.ENCRYPT_MODE, this.getSecretKey(), algoSpec);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:33:                this.getCipher().init(Cipher.ENCRYPT_MODE, this.getSecretKey());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:49:            throw new RobertServerCryptoException(e.getMessage());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:54:    public byte[] decrypt(byte[] cipherText) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:56:            return this.getDecryptCypher().doFinal(cipherText);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:59:            throw new RobertServerCryptoException(e.getMessage());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoMacStructureAbstract.java:1:package fr.gouv.stopc.robert.server.crypto.structure;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoMacStructureAbstract.java:5:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoMacStructureAbstract.java:9:public abstract class CryptoMacStructureAbstract implements ICryptoStructure, IMacStructure {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoMacStructureAbstract.java:12:     * @param payloadToEncrypt payload to encrypt
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoMacStructureAbstract.java:13:     * @return the arguments[0] encrypted with TripleDES algo
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoMacStructureAbstract.java:14:     * @throws RobertServerCryptoException 
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoMacStructureAbstract.java:17:    public byte[] encrypt(byte[] payloadToEncrypt) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoMacStructureAbstract.java:21:            return this.getMac().doFinal(payloadToEncrypt);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoMacStructureAbstract.java:24:            throw new RobertServerCryptoException(e.getMessage());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICipherStructure.java:1:package fr.gouv.stopc.robert.server.crypto.structure;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICipherStructure.java:3:import javax.crypto.Cipher;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICipherStructure.java:4:import javax.crypto.spec.IvParameterSpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICipherStructure.java:11:    Cipher getDecryptCypher();
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:1:package fr.gouv.stopc.robert.server.crypto.structure;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:3:import javax.crypto.Cipher;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:4:import javax.crypto.Mac;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:5:import javax.crypto.SecretKey;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:7:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:12: * Interface abstracting encryption algorithms
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:19:public interface ICryptoStructure<C extends Cipher, M extends Mac> {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:24:     * Encryption method TripleDES, AES, HMAC-SHA256
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:25:     * @param arguments are the keys to be encrypted
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:26:     * @return encrypted arguments
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:27:     * @throws RobertServerCryptoException
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:29:    byte[] encrypt(byte[] arguments) throws RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:32:     * Decryption method TripleDES, AES
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:33:     * @param arguments are the keys to be encrypted
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:34:     * @return decrypted arguments
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:35:     * @throws RobertServerCryptoException
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:37:    default byte[] decrypt(byte[] arguments) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:38:        throw new RobertServerCryptoException();
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/IMacStructure.java:1:package fr.gouv.stopc.robert.server.crypto.structure;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/IMacStructure.java:3:import javax.crypto.Mac;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:1:package fr.gouv.stopc.robert.server.crypto.structure.impl;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:8:import javax.crypto.Cipher;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:9:import javax.crypto.NoSuchPaddingException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:10:import javax.crypto.SecretKey;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:11:import javax.crypto.SecretKeyFactory;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:12:import javax.crypto.spec.DESedeKeySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:13:import javax.crypto.spec.IvParameterSpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:15:import fr.gouv.stopc.robert.server.crypto.structure.CryptoCipherStructureAbstract;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:19: * Triple Data Encryption Algorithm -- TripleDES or 3DES
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:23:public class Crypto3DES extends CryptoCipherStructureAbstract {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:26:     * key to use to generate {@link #cipher} and {@link #key} in {@link #Crypto3DES(byte[])}
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:28:    private static final String DESEDE_ENCRYPTION_CIPHER_SCHEME = "DESede/CBC/Nopadding";
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:30:    private static final String DESEDE_ENCRYPTION_KEY_SCHEME = "DESede";
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:36:     * Cipher initialize with DESEDE_ENCRYPTION_CIPHER_SCHEME
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:42:     * Cipher SecretKey with DESEDE_ENCRYPTION_KEY_SCHEME
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:50:    public Crypto3DES(byte[] keyServer) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:55:            // Generate encryption key with server key.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:57:            key = SecretKeyFactory.getInstance(DESEDE_ENCRYPTION_KEY_SCHEME).generateSecret(ks);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:59:            // Create cipher with DESEDE encryption scheme.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:60:            cipher = Cipher.getInstance(DESEDE_ENCRYPTION_CIPHER_SCHEME);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:63:            log.error(String.format("key %s is not available", DESEDE_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:65:            log.error(String.format("Algorithm %s is not available", DESEDE_ENCRYPTION_CIPHER_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:67:            log.error(String.format("key %s is not available", DESEDE_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:98:    public Cipher getDecryptCypher() {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:1:package fr.gouv.stopc.robert.server.crypto.structure.impl;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:3:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:4:import fr.gouv.stopc.robert.server.crypto.structure.CryptoAES;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:7:import javax.crypto.Cipher;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:8:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:13:public class CryptoAESECB extends CryptoAES {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:15:    private static final String AES_ENCRYPTION_CIPHER_SCHEME = "AES/ECB/NoPadding";
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:17:    public CryptoAESECB(byte[] key) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:18:        super(AES_ENCRYPTION_CIPHER_SCHEME, new SecretKeySpec(key, CryptoAES.AES_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:21:    public CryptoAESECB(Key key) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:22:        super(AES_ENCRYPTION_CIPHER_SCHEME, key);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:26:    public byte[] encrypt(byte[] plainText) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:27:        return super.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:31:    public byte[] decrypt(byte[] cipherText) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:33:            this.getDecryptCypher().init(Cipher.DECRYPT_MODE, this.getSecretKey());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:36:            throw new RobertServerCryptoException(e.getMessage());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:38:        return super.decrypt(cipherText);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:1:package fr.gouv.stopc.robert.server.crypto.structure.impl;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:3:import javax.crypto.Cipher;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:4:import javax.crypto.spec.GCMParameterSpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:5:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:7:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:8:import fr.gouv.stopc.robert.server.crypto.structure.CryptoAES;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:12:public class CryptoAESGCM extends CryptoAES {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:14:    private static final String AES_ENCRYPTION_CIPHER_SCHEME = "AES/GCM/NoPadding";
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:20:    public CryptoAESGCM(byte[] key) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:22:        super(AES_ENCRYPTION_CIPHER_SCHEME, new SecretKeySpec(key, CryptoAES.AES_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:26:    public byte[] encrypt(byte[] plainText) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:27:        return super.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:31:    public byte[] decrypt(byte[] cipherText) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:33:        byte[] toDecrypt = new byte[cipherText.length - IV_LENGTH];
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:34:        System.arraycopy(cipherText, IV_LENGTH, toDecrypt, 0, cipherText.length - IV_LENGTH);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:36:            this.getDecryptCypher().init(Cipher.DECRYPT_MODE, this.getSecretKey(), this.algorithmParameterSpec);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:37:            return super.decrypt(toDecrypt);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:40:            throw new RobertServerCryptoException(e.getMessage());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:1:package fr.gouv.stopc.robert.server.crypto.structure.impl;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:7:import javax.crypto.Cipher;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:8:import javax.crypto.spec.IvParameterSpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:9:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:11:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:12:import fr.gouv.stopc.robert.server.crypto.structure.CryptoAES;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:16:public class CryptoAESOFB extends CryptoAES {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:18:    private static final String AES_ENCRYPTION_CIPHER_SCHEME = "AES/OFB/NoPadding";
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:20:    public CryptoAESOFB(byte[] key) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:21:        super(AES_ENCRYPTION_CIPHER_SCHEME, new SecretKeySpec(key, CryptoAES.AES_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:25:    public byte[] encrypt(byte[] plainText) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:27:        return super.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:31:    public byte[] decrypt(byte[] cipherText) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:33:            throw new RobertServerCryptoException("IV must be set before decryption");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:36:            this.getDecryptCypher().init(Cipher.DECRYPT_MODE, this.getSecretKey(), this.algorithmParameterSpec);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:39:            throw new RobertServerCryptoException(e.getMessage());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:41:        return super.decrypt(cipherText);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:44:    public void setIvForDecryption(byte[] iv) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:1:package fr.gouv.stopc.robert.server.crypto.structure.impl;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:5:import javax.crypto.Mac;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:6:import javax.crypto.SecretKey;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:7:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:9:import fr.gouv.stopc.robert.server.crypto.structure.CryptoMacStructureAbstract;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:13:public class CryptoHMACSHA256 extends CryptoMacStructureAbstract {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:24:    public CryptoHMACSHA256(byte[] applicationKey) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:28:            // Generate encryption key with server federate key.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:31:            // Create cipher with AES encryption scheme.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:1:package fr.gouv.stopc.robert.server.crypto.structure.impl;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:3:import javax.crypto.Cipher;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:4:import javax.crypto.SecretKey;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:5:import javax.crypto.spec.IvParameterSpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:7:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:8:import fr.gouv.stopc.robert.server.crypto.skinny64.SkinnyCipher192;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:9:import fr.gouv.stopc.robert.server.crypto.skinny64.Skinny64Key;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:10:import fr.gouv.stopc.robert.server.crypto.skinny64.impl.SkinnyCipher192Impl;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:11:import fr.gouv.stopc.robert.server.crypto.structure.CryptoCipherStructureAbstract;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:18:public class CryptoSkinny64 extends CryptoCipherStructureAbstract {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:20:	private static final String SKINNY_ENCRYPTION_KEY_SCHEME = "SKINNY64";
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:29:	public CryptoSkinny64(byte[] key) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:42:			log.error(String.format("Algorithm %s invalid Skinny64Key", SKINNY_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:51:	public byte[] decrypt(byte[] cipherText) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:59:			cipher.decrypt(output, cipherText, ks);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:61:            throw new RobertServerCryptoException(e.getMessage());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:67:	public byte[] encrypt(byte[] plainText) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:75:			cipher.encrypt(output, plainText, ks);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:77:            throw new RobertServerCryptoException(e.getMessage());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:83:	public javax.crypto.Cipher getCipher() {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:98:    public Cipher getDecryptCypher() {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:1:package test.fr.gouv.stopc.robert.server.crypto.service.impl;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:13:import javax.crypto.Cipher;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:14:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:16:import fr.gouv.stopc.robert.server.crypto.structure.CryptoAES;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:17:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoAESECB;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:24:import fr.gouv.stopc.robert.server.crypto.callable.TupleGenerator;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:25:import fr.gouv.stopc.robert.server.crypto.model.EphemeralTuple;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:26:import fr.gouv.stopc.robert.server.crypto.service.impl.CryptoServiceImpl;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:27:import fr.gouv.stopc.robert.server.crypto.structure.CryptoCipherStructureAbstract;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:28:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoHMACSHA256;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:29:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoSkinny64;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:34:class CryptoServiceImplTest {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:36:    private static final CryptoServiceImpl cryptoService = new CryptoServiceImpl();
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:41:        // MOCKING ENCRYPTEDKEY
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:62:        final CryptoServiceImpl cryptoService = new CryptoServiceImpl();
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:66:        final TupleGenerator tupleGenerator = new TupleGenerator(serverKey, new SecretKeySpec(federationKey, CryptoAES.AES_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:73:        //////////////////////////// HELLO DECRYPTION ////////////////////////
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:80:        System.out.println("ECC     size : " + referenceET.getEncryptedCountryCode().length * 8 + "-bits" + " " + Arrays.toString(referenceET.getEncryptedCountryCode()));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:90:        final byte[] fakeHello = ByteUtils.addAll(referenceET.getEncryptedCountryCode(), ByteUtils.addAll(referenceET.getEbid(), ByteUtils.addAll(referenceTime, referenceMAC)));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:92:        final CryptoHMACSHA256 cryptoHMACSHA256 = new CryptoHMACSHA256(appKey);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:93:        cryptoService.generateMACHello(cryptoHMACSHA256, fakeHello);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:100:        // MOCKING ENCRYPTEDKEY
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:121:        final CryptoServiceImpl cryptoService = new CryptoServiceImpl();
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:125:        final TupleGenerator tupleGenerator = new TupleGenerator(serverKey, new SecretKeySpec(federationKey, CryptoAES.AES_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:131:        //////////////////////////// HELLO DECRYPTION ////////////////////////
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:137:        System.out.println("ECC     size : " + referenceET.getEncryptedCountryCode().length * 8 + "-bits" + " " + Arrays.toString(referenceET.getEncryptedCountryCode()));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:147:        final byte[] hello = ByteUtils.addAll(referenceET.getEncryptedCountryCode(), ByteUtils.addAll(referenceET.getEbid(), ByteUtils.addAll(referenceTime, referenceMAC)));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:149:        final CryptoCipherStructureAbstract cryptoForEBID = new CryptoSkinny64(serverKey);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:150:        final CryptoCipherStructureAbstract cryptoForECC = new CryptoAESECB(federationKey);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:157:        final byte[] encryptedCountryCode = Arrays.copyOfRange(hello, 0, 1);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:161:        assert encryptedCountryCode.length + ebid.length + time.length + mac.length == hello.length;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:162:        System.out.println(Arrays.toString(encryptedCountryCode) + Arrays.toString(ebid) + Arrays.toString(time) + Arrays.toString(mac));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:166:        //2. decrypts eccA
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:167:        System.out.println("------ ECC DECRYPTED ------");
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:168:        final byte[] countryCode = this.cryptoService.decryptCountryCode(cryptoForECC, ebid, encryptedCountryCode[0]);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:172:        System.out.println("------ EBID DECRYPTED ------");
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:173:        final byte[] concatIdAAndEpoch = this.cryptoService.decryptEBID(cryptoForEBID, ebid);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:175:        final byte[] decryptedIdA = Arrays.copyOfRange(concatIdAAndEpoch, 3, concatIdAAndEpoch.length); // 24/8
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:176:        System.out.println(Arrays.toString(epoch) + Arrays.toString(decryptedIdA));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:180:        boolean isValid = cryptoService.macHelloValidation(new CryptoHMACSHA256(applicationKey), hello);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:194:   public void testPerformAESEncryption() {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:197:       byte [] toEncrypt = ByteUtils.generateRandom(16);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:200:       byte [] encrypted = cryptoService.performAESOperation(Cipher.ENCRYPT_MODE, toEncrypt, ByteUtils.generateRandom(32));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:203:       assertNotNull(encrypted);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:204:       assertEquals(32, encrypted.length);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:205:       assertFalse(Arrays.equals(encrypted, toEncrypt));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:209:   public void testPerformAESDecryption() {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:212:       byte [] toEncrypt = ByteUtils.generateRandom(16);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:214:       byte [] encrypted = cryptoService.performAESOperation(Cipher.ENCRYPT_MODE, toEncrypt, key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:215:       assertNotNull(encrypted);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:218:       byte [] decrypted = cryptoService.performAESOperation(Cipher.DECRYPT_MODE, encrypted, key  );
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:221:       assertNotNull(decrypted);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:222:       assertEquals(16, decrypted.length);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:223:       assertTrue(Arrays.equals(decrypted, toEncrypt));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:1:package test.fr.gouv.stopc.robert.server.crypto.structure.impl;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:4:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:5:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoAESECB;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:6:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoAESOFB;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:20:public class CryptoAESECBTest {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:22:    public void testCryptoAESECBEncryptDecryptSucceeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:27:        CryptoAESECB cryptoToEncrypt = new CryptoAESECB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:28:        byte[] cipherText = cryptoToEncrypt.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:31:        CryptoAESECB cryptoToDecrypt = new CryptoAESECB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:32:        byte[] decryptedText = cryptoToDecrypt.decrypt(cipherText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:33:        assertTrue(Arrays.equals(plainText, decryptedText));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:37:    public void testCryptoAESECBCompareEncryptedSamples() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:43:        CryptoAESECB cryptoToEncrypt = new CryptoAESECB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:44:        byte[] cipherText = cryptoToEncrypt.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:47:        CryptoAESECB cryptoToEncryptModified = new CryptoAESECB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:48:        byte[] cipherTextModified = cryptoToEncryptModified.encrypt(plainTextModified);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:1:package test.fr.gouv.stopc.robert.server.crypto.structure.impl;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:3:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:4:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoAESGCM;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:18:public class CryptoAESGCMTest {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:20:    public void testCryptoAESGCMEncryptDecryptSucceeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:22:        byte[] plainText = "plaintexttoencrypt".getBytes();
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:24:        CryptoAESGCM cryptoToEncrypt = new CryptoAESGCM(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:25:        byte[] cipherText = cryptoToEncrypt.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:29:        CryptoAESGCM cryptoToDecrypt = new CryptoAESGCM(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:30:        byte[] decryptedText = cryptoToDecrypt.decrypt(cipherText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:31:        assertTrue(Arrays.equals(plainText, decryptedText));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:35:    public void testCryptoAESGCMEncryptDecryptBadIVFails() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:37:        byte[] plainText = "plaintexttoencrypt".getBytes();
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:39:        CryptoAESGCM cryptoToEncrypt = new CryptoAESGCM(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:40:        byte[] cipherText = cryptoToEncrypt.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:47:        CryptoAESGCM cryptoToDecrypt = new CryptoAESGCM(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:48:        Assertions.assertThrows(RobertServerCryptoException.class, () -> cryptoToDecrypt.decrypt(cipherText));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:52:    public void testCryptoAESGCMEncryptDecryptBadTagFails() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:54:        byte[] plainText = "plaintexttoencrypt".getBytes();
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:56:        CryptoAESGCM cryptoToEncrypt = new CryptoAESGCM(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:57:        byte[] cipherText = cryptoToEncrypt.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:65:        CryptoAESGCM cryptoToDecrypt = new CryptoAESGCM(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:66:        Assertions.assertThrows(RobertServerCryptoException.class, () -> cryptoToDecrypt.decrypt(cipherText));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:1:package test.fr.gouv.stopc.robert.server.crypto.structure.impl;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:3:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:4:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoAESOFB;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:17:public class CryptoAESOFBTest {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:19:    public void testCryptoAESOFBEncryptDecryptSucceeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:24:        CryptoAESOFB cryptoToEncrypt = new CryptoAESOFB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:25:        byte[] cipherText = cryptoToEncrypt.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:28:        CryptoAESOFB cryptoToDecrypt = new CryptoAESOFB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:29:        cryptoToDecrypt.setIvForDecryption(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:30:        byte[] decryptedText = cryptoToDecrypt.decrypt(cipherText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:31:        assertTrue(Arrays.equals(plainText, decryptedText));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:35:    public void testCryptoAESOFBEncryptDecryptBadIvFails() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:40:        CryptoAESOFB cryptoToEncrypt = new CryptoAESOFB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:41:        byte[] cipherText = cryptoToEncrypt.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:44:        CryptoAESOFB cryptoToDecrypt = new CryptoAESOFB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:45:        cryptoToDecrypt.setIvForDecryption("8765432100000000".getBytes());
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:46:        byte[] decryptedText = cryptoToDecrypt.decrypt(cipherText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:47:        assertFalse(Arrays.equals(plainText, decryptedText));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:1:package test.fr.gouv.stopc.robert.server.crypto.structure.impl;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:12:import fr.gouv.stopc.robert.server.crypto.exception.RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:13:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoSkinny64;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:16:public class CryptoSkinny64KeyTest {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:35:	 * Payload to encrypt
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:42:	 * Pre-processed encryption result of plainText with key1
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:49:	 * Pre-processed encryption result of plainText with key2
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:56:	public void testDecryptKey1Succeeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:59:		CryptoSkinny64 crypto = new CryptoSkinny64(key1);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:62:		byte[] result = crypto.decrypt(cipherTextWithKey1);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:69:	public void testDecryptKey2Succeeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:71:		CryptoSkinny64 crypto = new CryptoSkinny64(key2);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:74:		byte[] result = crypto.decrypt(cipherTextWithKey2);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:81:	public void testEncryptKey1Succeeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:83:		CryptoSkinny64 crypto = new CryptoSkinny64(key1);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:86:		byte[] result = crypto.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:93:	public void testEncryptKey2Succeeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:95:		CryptoSkinny64 crypto = new CryptoSkinny64(key2);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:98:		byte[] result = crypto.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:105:	public void testEncryptDecryptBijectionSucceeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:106:		CryptoSkinny64 crypto = new CryptoSkinny64(key1);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:107:		byte[] cipher = crypto.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:108:		byte[] result = crypto.decrypt(cipher);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:114:	public void testEncryptNullPlainTextFails() {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:115:		CryptoSkinny64 crypto = new CryptoSkinny64(key1);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:119:				() -> crypto.encrypt(null),
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:120:				"Expected Skinny64 encrypt to throw, but it didn't"
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:127:	public void testDecryptNullPlainTextFails() {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:128:		CryptoSkinny64 crypto = new CryptoSkinny64(key1);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:132:				() -> crypto.decrypt(null),
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:133:				"Expected Skinny64 decrypt to throw, but it didn't"
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:144:					CryptoSkinny64 crypto = new CryptoSkinny64(null);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:157:					CryptoSkinny64 crypto = new CryptoSkinny64(Arrays.copyOf(key1, key1.length - 1));
./robert-server-develop/robert-server-database/src/test/java/test/fr/gouv/stopc/robertserver/database/service/RegistrationServiceImplTest.java:14:import javax.crypto.KeyGenerator;
./robert-server-develop/robert-server-dataset-injector/README.md:4:- running instance of crypto-server (which depends on PostgreSQL DB and softHSMv2)
./robert-server-develop/robert-server-dataset-injector/pom.xml:90:			<artifactId>robert-server-crypto</artifactId>
./robert-server-develop/robert-server-dataset-injector/pom.xml:95:            <artifactId>robert-crypto-grpc-server-storage</artifactId>
./robert-server-develop/robert-server-dataset-injector/pom.xml:108:            <artifactId>robert-crypto-grpc-server-messaging</artifactId>
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/RobertServerInjectorDatasetApplication.java:21:@EnableJpaRepositories(basePackages ="fr.gouv.stopc.robert.crypto.grpc.server.storage.database.repository")
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/GeneratorIdService.java:9:    byte[] decryptStoredKeyWithAES256GCMAndKek(byte[] storedKey, Key kek);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:4:import fr.gouv.stopc.robert.crypto.grpc.server.client.service.ICryptoServerGrpcClient;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:5:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.CreateRegistrationRequest;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:6:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.CreateRegistrationResponse;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:16:import javax.crypto.BadPaddingException;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:17:import javax.crypto.Cipher;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:18:import javax.crypto.IllegalBlockSizeException;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:19:import javax.crypto.NoSuchPaddingException;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:20:import javax.crypto.spec.GCMParameterSpec;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:33:    private static final String AES_ENCRYPTION_CIPHER_SCHEME = "AES/GCM/NoPadding";
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:39:    private ICryptoServerGrpcClient cryptoServerClient;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:43:    public GeneratorIdServiceImpl(PropertyLoader propertyLoader, ICryptoServerGrpcClient cryptoServerClient) {
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:45:        this.cryptoServerClient = cryptoServerClient;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:46:        this.cryptoServerClient.init(propertyLoader.getCryptoServerHost(), Integer.parseInt(propertyLoader.getCryptoServerPort()));
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:62:        Optional<CreateRegistrationResponse> response = this.cryptoServerClient.createRegistration(request);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:72:    public byte[] decryptStoredKeyWithAES256GCMAndKek(byte[] storedKey, Key kek) {
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:74:        byte[] toDecrypt = new byte[storedKey.length - IV_LENGTH];
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:75:        System.arraycopy(storedKey, IV_LENGTH, toDecrypt, 0, storedKey.length - IV_LENGTH);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:78:            Cipher cipher = Cipher.getInstance(AES_ENCRYPTION_CIPHER_SCHEME);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:79:            cipher.init(Cipher.DECRYPT_MODE, kek, algorithmParameterSpec);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:80:            return cipher.doFinal(toDecrypt);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:84:            log.error(String.format("Algorithm %s is not available", AES_ENCRYPTION_CIPHER_SCHEME));
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:3:import fr.gouv.stopc.robert.crypto.grpc.server.client.service.ICryptoServerGrpcClient;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:4:import fr.gouv.stopc.robert.crypto.grpc.server.storage.cryptographic.service.ICryptographicStorageService;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:5:import fr.gouv.stopc.robert.crypto.grpc.server.storage.database.model.ClientIdentifier;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:6:import fr.gouv.stopc.robert.crypto.grpc.server.storage.database.repository.ClientIdentifierRepository;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:10:import fr.gouv.stopc.robert.server.crypto.service.CryptoService;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:11:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoAESECB;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:12:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoHMACSHA256;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:13:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoSkinny64;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:28:import javax.crypto.BadPaddingException;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:29:import javax.crypto.Cipher;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:30:import javax.crypto.IllegalBlockSizeException;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:31:import javax.crypto.NoSuchPaddingException;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:32:import javax.crypto.spec.GCMParameterSpec;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:56:    private CryptoService cryptoService;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:59:    private ICryptographicStorageService cryptographicStorageService;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:62:    private ICryptoServerGrpcClient cryptoServerClient;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:88:        cryptographicStorageService.init(propertyLoader.getKeyStorePassword(), propertyLoader.getKeyStoreConfigFile());
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:89:        serverKey = cryptographicStorageService.getServerKey(epochId,serverConfigurationService.getServiceTimeStart(), false);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:90:        federationKey = cryptographicStorageService.getFederationKey();
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:174:        // retrieve the key_for_mac from crypto server
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:177:        Key clientKek = this.cryptographicStorageService.getKeyForEncryptingClientKeys();
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:179:            log.error("The clientKek to decrypt the client keys is null.");
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:189:        byte[] decryptedKeyForMac = generatorIdService.decryptStoredKeyWithAES256GCMAndKek(Base64.decode(clientIdentifier.getKeyForMac()), clientKek);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:191:        byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId, permanentIdentifier);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:193:        byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:198:        messages.add(generateHelloMessageFor(decryptedKeyForMac, ebid, encryptedCountryCode, t, -78));
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:199:        messages.add(generateHelloMessageFor(decryptedKeyForMac, ebid, encryptedCountryCode, t + 165L, -50));
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:200:        messages.add(generateHelloMessageFor(decryptedKeyForMac, ebid, encryptedCountryCode, t + 300L, -35));
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:204:                .ecc(encryptedCountryCode)
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:209:    private HelloMessageDetail generateHelloMessageFor(byte[] decryptedKeyForMac, byte[] ebid, byte[] encryptedCountryCode, long t, int rssi) throws Exception {
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:229:        System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:230:        System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:231:        System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:233:        byte[] mac = this.cryptoService
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:234:                .generateMACHello(new CryptoHMACSHA256(decryptedKeyForMac), helloMessage);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/utils/PropertyLoader.java:10:    @Value("${robert.crypto.server.keystore.password}")
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/utils/PropertyLoader.java:13:    @Value("${robert.crypto.server.keystore.config.file}")
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/utils/PropertyLoader.java:16:    @Value("${robert.crypto.server.host}")
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/utils/PropertyLoader.java:17:    private String cryptoServerHost;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/utils/PropertyLoader.java:19:    @Value("${robert.crypto.server.port}")
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/utils/PropertyLoader.java:20:    private String cryptoServerPort;
./robert-server-develop/robert-server-dataset-injector/src/main/resources/application.properties:16:# The hostname of the crypto server
./robert-server-develop/robert-server-dataset-injector/src/main/resources/application.properties:17:robert.crypto.server.host=${ROBERT_CRYPTO_SERVER_HOST:localhost}
./robert-server-develop/robert-server-dataset-injector/src/main/resources/application.properties:19:# The port of the crypto server
./robert-server-develop/robert-server-dataset-injector/src/main/resources/application.properties:20:robert.crypto.server.port=${ROBERT_CRYPTO_SERVER_PORT:9090}
./robert-server-develop/robert-server-dataset-injector/src/main/resources/application.properties:41:robert.crypto.server.keystore.password=${ROBERT_CRYPTO_SERVER_KEYSTORE_PASSWORD:1234}
./robert-server-develop/robert-server-dataset-injector/src/main/resources/application.properties:44:robert.crypto.server.keystore.config.file=${ROBERT_CRYPTO_SERVER_CONFIG_FILE:C:/works/SoftHSM2/softhsm2.cfg}
./robert-server-develop/robert-server-dataset-injector/src/main/resources/application.properties:46:spring.datasource.url= ${ROBERT_CRYPTO_SERVER_DB_URL:jdbc:postgresql://localhost:5432/robert}
./robert-server-develop/robert-server-dataset-injector/src/main/resources/application.properties:47:spring.datasource.username=${ROBERT_CRYPTO_SERVER_DB_USR:robert}
./robert-server-develop/robert-server-dataset-injector/src/main/resources/application.properties:48:spring.datasource.password=${ROBERT_CRYPTO_SERVER_DB_PWD:robert}
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:3:import fr.gouv.stopc.robert.crypto.grpc.server.storage.database.model.ClientIdentifier;
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:4:import fr.gouv.stopc.robert.crypto.grpc.server.storage.database.repository.ClientIdentifierRepository;
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:71:        when(generatorIdService.decryptStoredKeyWithAES256GCMAndKek(any(), any()))
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/utils/GenerateIdUtils.java:5:import javax.crypto.KeyGenerator;
./robert-server-develop/robert-server-dataset-injector/src/test/resources/application.properties:19:# The hostname of the crypto server
./robert-server-develop/robert-server-dataset-injector/src/test/resources/application.properties:20:robert.crypto.server.host=${ROBERT_CRYPTO_SERVER_HOST:localhost}
./robert-server-develop/robert-server-dataset-injector/src/test/resources/application.properties:22:# The port of the crypto server
./robert-server-develop/robert-server-dataset-injector/src/test/resources/application.properties:23:robert.crypto.server.port=${ROBERT_CRYPTO_SERVER_PORT:9090}
./robert-server-develop/robert-server-dataset-injector/src/test/resources/application.properties:26:robert.crypto.server.keystore.password=${ROBERT_CRYPTO_SERVER_KEYSTORE_PASSWORD:1234}
./robert-server-develop/robert-server-dataset-injector/src/test/resources/application.properties:29:robert.crypto.server.keystore.config.file=${ROBERT_CRYPTO_SERVER_CONFIG_FILE:C:/works/SoftHSM2/softhsm2.cfg}
./robert-server-develop/robert-server-dataset-injector/src/test/resources/application.properties:31:spring.datasource.url= ${ROBERT_CRYPTO_SERVER_DB_URL:jdbc:postgresql://localhost:5432/robert}
./robert-server-develop/robert-server-dataset-injector/src/test/resources/application.properties:32:spring.datasource.username=${ROBERT_CRYPTO_SERVER_DB_USR:robert}
./robert-server-develop/robert-server-dataset-injector/src/test/resources/application.properties:33:spring.datasource.password=${ROBERT_CRYPTO_SERVER_DB_PWD:robert}
./robert-server-develop/robert-server-ws-rest/pom.xml:55:			<artifactId>robert-crypto-grpc-server-messaging</artifactId>
./robert-server-develop/robert-server-ws-rest/pom.xml:67:			<artifactId>robert-server-crypto</artifactId>
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/config/RobertServerWsConfiguration.java:7:import fr.gouv.stopc.robert.crypto.grpc.server.client.service.ICryptoServerGrpcClient;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/config/RobertServerWsConfiguration.java:15:			final ICryptoServerGrpcClient cryptoServerClient) {
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/config/RobertServerWsConfiguration.java:17:		cryptoServerClient.init(propertyLoader.getCryptoServerHost(), Integer.parseInt( propertyLoader.getCryptoServerPort()));
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/DeleteHistoryControllerImpl.java:8:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.DeleteIdResponse;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/DeleteHistoryControllerImpl.java:9:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetIdFromAuthResponse;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/DeleteHistoryControllerImpl.java:16:import fr.gouv.stopc.robert.crypto.grpc.server.client.service.ICryptoServerGrpcClient;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/RegisterControllerImpl.java:7:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.CreateRegistrationRequest;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/RegisterControllerImpl.java:8:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.CreateRegistrationResponse;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/RegisterControllerImpl.java:21:import fr.gouv.stopc.robert.crypto.grpc.server.client.service.ICryptoServerGrpcClient;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/RegisterControllerImpl.java:46:    private ICryptoServerGrpcClient cryptoServerClient;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/RegisterControllerImpl.java:58:                                  final ICryptoServerGrpcClient cryptoServerClient,
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/RegisterControllerImpl.java:66:        this.cryptoServerClient = cryptoServerClient;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/RegisterControllerImpl.java:96:        Optional<CreateRegistrationResponse> response = this.cryptoServerClient.createRegistration(request);
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/StatusControllerImpl.java:17:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetIdFromStatusResponse;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/UnregisterControllerImpl.java:11:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.DeleteIdResponse;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/service/AuthRequestValidationService.java:3:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.DeleteIdResponse;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/service/AuthRequestValidationService.java:4:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetIdFromAuthResponse;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/service/AuthRequestValidationService.java:5:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetIdFromStatusResponse;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/service/impl/AuthRequestValidationServiceImpl.java:18:import fr.gouv.stopc.robert.crypto.grpc.server.client.service.ICryptoServerGrpcClient;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/service/impl/AuthRequestValidationServiceImpl.java:19:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.*;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/service/impl/AuthRequestValidationServiceImpl.java:39:    private final ICryptoServerGrpcClient cryptoServerClient;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/service/impl/AuthRequestValidationServiceImpl.java:47:                                            final ICryptoServerGrpcClient cryptoServerClient,
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/service/impl/AuthRequestValidationServiceImpl.java:51:        this.cryptoServerClient = cryptoServerClient;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/service/impl/AuthRequestValidationServiceImpl.java:92:        // Moved timestamp difference check to after request sent to cryptoserver to be able to store drift in db
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/service/impl/AuthRequestValidationServiceImpl.java:114:            Optional<GetIdFromAuthResponse> response = this.cryptoServerClient.getIdFromAuth(request);
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/service/impl/AuthRequestValidationServiceImpl.java:150:            Optional<DeleteIdResponse> response = this.cryptoServerClient.deleteId(request);
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/service/impl/AuthRequestValidationServiceImpl.java:189:            Optional<GetIdFromStatusResponse> response = this.cryptoServerClient.getIdFromStatus(request);
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/utils/PropertyLoader.java:12:    @Value("${robert.crypto.server.host}")
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/utils/PropertyLoader.java:13:    private String cryptoServerHost;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/utils/PropertyLoader.java:15:    @Value("${robert.crypto.server.port}")
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/utils/PropertyLoader.java:16:    private String cryptoServerPort;
./robert-server-develop/robert-server-ws-rest/src/main/resources/application-dev.properties:30:# The hostname of the crypto server
./robert-server-develop/robert-server-ws-rest/src/main/resources/application-dev.properties:31:robert.crypto.server.host=${ROBERT_CRYPTO_SERVER_HOST:localhost}
./robert-server-develop/robert-server-ws-rest/src/main/resources/application-dev.properties:33:# The port of the crypto server
./robert-server-develop/robert-server-ws-rest/src/main/resources/application-dev.properties:34:robert.crypto.server.port=${ROBERT_CRYPTO_SERVER_PORT:9090}
./robert-server-develop/robert-server-ws-rest/src/main/resources/application.properties:29:# The hostname of the crypto server
./robert-server-develop/robert-server-ws-rest/src/main/resources/application.properties:30:robert.crypto.server.host=${ROBERT_CRYPTO_SERVER_HOST:localhost}
./robert-server-develop/robert-server-ws-rest/src/main/resources/application.properties:32:# The port of the crypto server
./robert-server-develop/robert-server-ws-rest/src/main/resources/application.properties:33:robert.crypto.server.port=${ROBERT_CRYPTO_SERVER_PORT:9090}
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:20:import javax.crypto.KeyGenerator;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:49:import fr.gouv.stopc.robert.crypto.grpc.server.client.service.ICryptoServerGrpcClient;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:50:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetIdFromAuthResponse;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:54:import fr.gouv.stopc.robert.server.crypto.service.CryptoService;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:55:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoHMACSHA256;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:56:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoSkinny64;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:100:    private CryptoService cryptoService;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:103:    private ICryptoServerGrpcClient cryptoServerClient;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:154:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:155:        System.arraycopy(idA, 0, decryptedEbid, 3, idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:156:        System.arraycopy(ByteUtils.intToBytes(this.currentEpoch), 1, decryptedEbid, 0, decryptedEbid.length - idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:162:        .when(this.cryptoServerClient).getIdFromAuth(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:207:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:208:        System.arraycopy(idA, 0, decryptedEbid, 3, idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:209:        System.arraycopy(ByteUtils.intToBytes(this.currentEpoch), 1, decryptedEbid, 0, decryptedEbid.length - idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:216:        .when(this.cryptoServerClient).getIdFromAuth(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:255:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:256:        System.arraycopy(idA, 0, decryptedEbid, 3, idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:257:        System.arraycopy(ByteUtils.intToBytes(this.currentEpoch), 1, decryptedEbid, 0, decryptedEbid.length - idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:263:        .when(this.cryptoServerClient).getIdFromAuth(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:311:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:312:        System.arraycopy(idA, 0, decryptedEbid, 3, idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:313:        System.arraycopy(ByteUtils.intToBytes(currentEpoch - 10), 1, decryptedEbid, 0,
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:314:                decryptedEbid.length - idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:319:        .when(this.cryptoServerClient).getIdFromAuth(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:406:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:407:        System.arraycopy(idA, 0, decryptedEbid, 3, idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:408:        System.arraycopy(ByteUtils.intToBytes(this.currentEpoch), 1, decryptedEbid, 0, decryptedEbid.length - idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:411:        doReturn(Optional.empty()).when(this.cryptoServerClient).getIdFromAuth(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:473:    private byte[] generateHMAC(final CryptoHMACSHA256 cryptoHMACSHA256S, final byte[] argument, final byte prefixByte)
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:479:        byte[] generatedSHA256 = cryptoHMACSHA256S.encrypt(ByteUtils.addAll(prefix, argument));
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:496:            mac = this.generateHMAC(new CryptoHMACSHA256(ka), agg, AUTH_REQUEST_TYPE);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:510:            res[0] = this.cryptoService.generateEBID(new CryptoSkinny64(this.serverKey),
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:43:import fr.gouv.stopc.robert.crypto.grpc.server.client.service.ICryptoServerGrpcClient;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:44:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.CreateRegistrationResponse;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:93:    private ICryptoServerGrpcClient cryptoServerClient;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:229:        when(this.cryptoServerClient.createRegistration(any())).thenReturn(Optional.empty());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:237:        verify(this.cryptoServerClient).createRegistration(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:258:                .setTuples(ByteString.copyFrom("EncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:264:        when(this.cryptoServerClient.createRegistration(any())).thenReturn(Optional.of(createRegistrationResponse));
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:273:        verify(this.cryptoServerClient).createRegistration(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:325:                .setTuples(ByteString.copyFrom("EncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:328:        when(this.cryptoServerClient.createRegistration(any())).thenReturn(Optional.of(createRegistrationResponse));
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:343:        verify(this.cryptoServerClient).createRegistration(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:370:                .setTuples(ByteString.copyFrom("EncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:373:        when(this.cryptoServerClient.createRegistration(any())).thenReturn(Optional.of(createRegistrationResponse));
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:388:        verify(this.cryptoServerClient).createRegistration(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:22:import javax.crypto.KeyGenerator;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:49:import fr.gouv.stopc.robert.crypto.grpc.server.client.service.ICryptoServerGrpcClient;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:50:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.GetIdFromStatusResponse;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:55:import fr.gouv.stopc.robert.server.crypto.service.CryptoService;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:56:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoHMACSHA256;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:57:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoSkinny64;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:110:    private CryptoService cryptoService;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:113:    private ICryptoServerGrpcClient cryptoServerClient;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:211:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:212:        System.arraycopy(idA, 0, decryptedEbid, 3, 5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:213:        System.arraycopy(ByteUtils.intToBytes(oldEpoch), 1, decryptedEbid, 0, 3);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:220:                .setTuples(ByteString.copyFrom("EncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:222:        .when(this.cryptoServerClient).getIdFromStatus(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:257:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:259:        .when(this.cryptoServerClient).getIdFromStatus(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:505:        .when(this.cryptoServerClient).getIdFromStatus(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:574:    private byte[] generateHMAC(final CryptoHMACSHA256 cryptoHMACSHA256S, final byte[] argument, final DigestSaltEnum salt)
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:580:        byte[] generatedSHA256 = cryptoHMACSHA256S.encrypt(ByteUtils.addAll(prefix, argument));
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:595:            mac = this.generateHMAC(new CryptoHMACSHA256(ka), agg, DigestSaltEnum.STATUS);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:609:            res[0] = this.cryptoService.generateEBID(new CryptoSkinny64(this.serverKey),
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:664:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:665:        System.arraycopy(idA, 0, decryptedEbid, 3, 5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:666:        System.arraycopy(ByteUtils.intToBytes(currentEpoch), 1, decryptedEbid, 0, 3);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:673:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:675:        .when(this.cryptoServerClient).getIdFromStatus(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:718:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:719:        System.arraycopy(idA, 0, decryptedEbid, 3, 5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:720:        System.arraycopy(ByteUtils.intToBytes(currentEpoch), 1, decryptedEbid, 0, 3);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:727:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:729:        .when(this.cryptoServerClient).getIdFromStatus(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:782:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:783:        System.arraycopy(idA, 0, decryptedEbid, 3, 5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:784:        System.arraycopy(ByteUtils.intToBytes(currentEpoch), 1, decryptedEbid, 0, 3);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:791:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:793:        .when(this.cryptoServerClient).getIdFromStatus(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:854:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:855:        System.arraycopy(idA, 0, decryptedEbid, 3, 5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:856:        System.arraycopy(ByteUtils.intToBytes(currentEpoch), 1, decryptedEbid, 0, 3);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:863:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:865:        .when(this.cryptoServerClient).getIdFromStatus(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:920:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:921:        System.arraycopy(idA, 0, decryptedEbid, 3, 5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:922:        System.arraycopy(ByteUtils.intToBytes(currentEpoch), 1, decryptedEbid, 0, 3);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:929:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:931:        .when(this.cryptoServerClient).getIdFromStatus(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:987:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:988:        System.arraycopy(idA, 0, decryptedEbid, 3, 5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:989:        System.arraycopy(ByteUtils.intToBytes(currentEpoch), 1, decryptedEbid, 0, 3);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:996:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:998:        .when(this.cryptoServerClient).getIdFromStatus(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1038:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1039:        System.arraycopy(idA, 0, decryptedEbid, 3, 5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1040:        System.arraycopy(ByteUtils.intToBytes(currentEpoch), 1, decryptedEbid, 0, 3);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1047:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1049:        .when(this.cryptoServerClient).getIdFromStatus(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1099:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1100:        System.arraycopy(idA, 0, decryptedEbid, 3, 5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1101:        System.arraycopy(ByteUtils.intToBytes(currentEpoch), 1, decryptedEbid, 0, 3);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1108:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1110:        .when(this.cryptoServerClient).getIdFromStatus(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1170:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1171:        System.arraycopy(idA, 0, decryptedEbid, 3, 5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1172:        System.arraycopy(ByteUtils.intToBytes(currentEpoch), 1, decryptedEbid, 0, 3);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1179:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1181:        .when(this.cryptoServerClient).getIdFromStatus(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1230:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1231:        System.arraycopy(idA, 0, decryptedEbid, 3, 5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1232:        System.arraycopy(ByteUtils.intToBytes(currentEpoch), 1, decryptedEbid, 0, 3);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1239:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1241:        .when(this.cryptoServerClient).getIdFromStatus(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:18:import javax.crypto.KeyGenerator;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:46:import fr.gouv.stopc.robert.crypto.grpc.server.client.service.ICryptoServerGrpcClient;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:47:import fr.gouv.stopc.robert.crypto.grpc.server.messaging.DeleteIdResponse;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:52:import fr.gouv.stopc.robert.server.crypto.service.CryptoService;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:53:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoHMACSHA256;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:54:import fr.gouv.stopc.robert.server.crypto.structure.impl.CryptoSkinny64;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:97:    private CryptoService cryptoService;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:100:    private ICryptoServerGrpcClient cryptoServerClient;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:198:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:199:        System.arraycopy(idA, 0, decryptedEbid, 3, idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:200:        System.arraycopy(ByteUtils.intToBytes(currentEpoch - 10), 1, decryptedEbid, 0, decryptedEbid.length - idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:207:        .when(this.cryptoServerClient).deleteId(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:224:        verify(this.cryptoServerClient, times(1)).deleteId(ArgumentMatchers.any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:344:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:345:        System.arraycopy(idA, 0, decryptedEbid, 3, idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:346:        System.arraycopy(ByteUtils.intToBytes(currentEpoch), 1, decryptedEbid, 0, decryptedEbid.length - idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:351:        .when(this.cryptoServerClient).deleteId(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:367:        verify(this.cryptoServerClient, times(1)).deleteId(ArgumentMatchers.any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:412:    private byte[] generateHMAC(final CryptoHMACSHA256 cryptoHMACSHA256S, final byte[] argument, final DigestSaltEnum salt)
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:418:        byte[] generatedSHA256 = cryptoHMACSHA256S.encrypt(ByteUtils.addAll(prefix, argument));
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:430:            mac = this.generateHMAC(new CryptoHMACSHA256(ka), agg, DigestSaltEnum.UNREGISTER);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:444:            res[0] = this.cryptoService.generateEBID(new CryptoSkinny64(this.serverKey),
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:466:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:467:        System.arraycopy(idA, 0, decryptedEbid, 3, idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:468:        System.arraycopy(ByteUtils.intToBytes(currentEpoch), 1, decryptedEbid, 0, decryptedEbid.length - idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:475:        .when(this.cryptoServerClient).deleteId(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:490:        verify(this.cryptoServerClient, times(1)).deleteId(ArgumentMatchers.any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:505:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:506:        System.arraycopy(idA, 0, decryptedEbid, 3, idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:507:        System.arraycopy(ByteUtils.intToBytes(currentEpoch), 1, decryptedEbid, 0, decryptedEbid.length - idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:512:        .when(this.cryptoServerClient).deleteId(any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:530:        verify(this.cryptoServerClient, times(1)).deleteId(ArgumentMatchers.any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:550:        verify(this.cryptoServerClient, times(1)).deleteId(ArgumentMatchers.any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:571:        verify(this.cryptoServerClient, times(1)).deleteId(ArgumentMatchers.any());
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:587:        byte[] decryptedEbid = new byte[8];
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:588:        System.arraycopy(idA, 0, decryptedEbid, 3, idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:589:        System.arraycopy(ByteUtils.intToBytes(currentEpoch), 1, decryptedEbid, 0, decryptedEbid.length - idA.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:596:        .when(this.cryptoServerClient).deleteId(any());
./robert-server-develop/robert-server-ws-rest/src/test/resources/application.properties:26:# The hostname of the crypto server
./robert-server-develop/robert-server-ws-rest/src/test/resources/application.properties:27:robert.crypto.server.host=localhost
./robert-server-develop/robert-server-ws-rest/src/test/resources/application.properties:29:# The port of the crypto server
./robert-server-develop/robert-server-ws-rest/src/test/resources/application.properties:30:robert.crypto.server.port=9090
