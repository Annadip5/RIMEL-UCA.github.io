./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:43:    internal_static_robert_server_crypto_EncryptCountryCodeRequest_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:46:    internal_static_robert_server_crypto_EncryptCountryCodeRequest_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:48:    internal_static_robert_server_crypto_EncryptCountryCodeResponse_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:51:    internal_static_robert_server_crypto_EncryptCountryCodeResponse_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:103:    internal_static_robert_server_crypto_EncryptedEphemeralTupleRequest_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:106:    internal_static_robert_server_crypto_EncryptedEphemeralTupleRequest_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:108:    internal_static_robert_server_crypto_EncryptedEphemeralTupleResponse_descriptor;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:111:    internal_static_robert_server_crypto_EncryptedEphemeralTupleResponse_fieldAccessorTable;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:131:                        "ntryCode\030\002 \001(\014\":\n\032EncryptCountryCodeResp" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:132:                        "onse\022\034\n\024encryptedCountryCode\030\001 \001(\014\"G\n\031De" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:134:                        "\024encryptedCountryCode\030\002 \001(\014\"1\n\032DecryptCo" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:150:                        "rKey\030\003 \001(\014\"\225\001\n\036EncryptedEphemeralTupleRe" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:154:                        "(\014\"R\n\037EncryptedEphemeralTupleResponse\022\016\n" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:164:                        "ver.crypto.EBIDResponse\"\000\022y\n\022encryptCoun" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:165:                        "tryCode\022/.robert.server.crypto.EncryptCo" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:167:                        "EncryptCountryCodeResponse\"\000\022y\n\022decryptC" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:185:                        "dentityResponse\"\000\022\220\001\n\037generateEncryptedE" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:188:                        "ver.crypto.EncryptedEphemeralTupleRespon" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:227:        internal_static_robert_server_crypto_EncryptCountryCodeRequest_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:229:        internal_static_robert_server_crypto_EncryptCountryCodeRequest_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:231:                        internal_static_robert_server_crypto_EncryptCountryCodeRequest_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:233:        internal_static_robert_server_crypto_EncryptCountryCodeResponse_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:235:        internal_static_robert_server_crypto_EncryptCountryCodeResponse_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:237:                        internal_static_robert_server_crypto_EncryptCountryCodeResponse_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:238:                        new java.lang.String[] { "EncryptedCountryCode", });
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:244:                        new java.lang.String[] { "Ebid", "EncryptedCountryCode", });
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:298:                        new java.lang.String[] { "IdA", "EncryptedSharedKey", "ServerPublicKeyForKey", });
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:299:        internal_static_robert_server_crypto_EncryptedEphemeralTupleRequest_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:301:        internal_static_robert_server_crypto_EncryptedEphemeralTupleRequest_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:303:                        internal_static_robert_server_crypto_EncryptedEphemeralTupleRequest_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:305:        internal_static_robert_server_crypto_EncryptedEphemeralTupleResponse_descriptor =
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:307:        internal_static_robert_server_crypto_EncryptedEphemeralTupleResponse_fieldAccessorTable = new
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:309:                        internal_static_robert_server_crypto_EncryptedEphemeralTupleResponse_descriptor,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:204://                .setEncryptedCountryCode(ByteString.copyFrom(generate(1)))
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:242://                .setEncryptedSharedKey(ByteString.copyFrom(generate(32)))
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:269://    public void testGenerateEncryptedEphemeralTuple() {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:272://        EncryptedEphemeralTupleBundleRequest request = EncryptedEphemeralTupleBundleRequest.newBuilder()
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:280://        EncryptedEphemeralTupleBundleResponse response = EncryptedEphemeralTupleBundleResponse.newBuilder()
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:281://                .setEncryptedTuples(ByteString.copyFrom(generate(52)))
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:287://            public void generateEncryptedEphemeralTuple(EncryptedEphemeralTupleBundleRequest request,
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:288://                    StreamObserver<EncryptedEphemeralTupleBundleResponse> responseObserver) {
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:298://        Optional<EncryptedEphemeralTupleBundleResponse> expectedResponse = this.client.generateEncryptedEphemeralTuple(request);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:31:    Key getKeyForEncryptingClientKeys();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:32:    //Key getKeyForEncryptingServerKeys();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:51:    //private static final String ALIAS_SERVER_KEK = "server-key-encryption-key;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:52:    private static final String ALIAS_CLIENT_KEK = "key-encryption-key"; // KEK
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:176:    public Key getKeyForEncryptingClientKeys() {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:177:        return getKeyForEncryptingKeys(ALIAS_CLIENT_KEK,
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:178:                "Unable to retrieve key for encrypting keys (KEK) for client from HSM");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:181:    private Key getKeyForEncryptingKeys(String alias, String errorMessage) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:280:                            // Copy key content in new key to prevent any delegation to HSM and perform encryption in Java
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:327:        log.info("Caching key encryption key");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:328:        this.getKeyForEncryptingClientKeys();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:365:            aliases.addAll(this.kekCache.keySet().stream().map(elt -> String.format("Key Encryption Key '%s'", elt)).collect(Collectors.toList()));
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:144:          byte[] encryptedKeyForMac = this.encryptKeyWithAES256GCMAndKek(
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:146:                  this.cryptographicStorageService.getKeyForEncryptingClientKeys());
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:148:          if (Objects.isNull(encryptedKeyForMac)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:149:              log.error("The encrypted key for mac is null");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:153:          byte[] encryptedKeyForTuples = this.encryptKeyWithAES256GCMAndKek(
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:155:                  this.cryptographicStorageService.getKeyForEncryptingClientKeys());
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:157:          if (Objects.isNull(encryptedKeyForTuples)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:158:              log.error("The encrypted key for tuples is null");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:164:                  .keyForMac(Base64.encode(encryptedKeyForMac))
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:165:                  .keyForTuples(Base64.encode(encryptedKeyForTuples))
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:186:                    Key clientKek = this.cryptographicStorageService.getKeyForEncryptingClientKeys();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:224:    private static final String AES_ENCRYPTION_CIPHER_SCHEME = "AES/GCM/NoPadding";
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:234:            cipher = Cipher.getInstance(AES_ENCRYPTION_CIPHER_SCHEME);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:240:            log.error(String.format("Algorithm %s is not available", AES_ENCRYPTION_CIPHER_SCHEME));
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:245:    public byte[] encryptKeyWithAES256GCMAndKek(byte[] keyToEncrypt, Key kek) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:249:            // Create cipher with AES encryption scheme.
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:250:            Cipher cipher = Cipher.getInstance(AES_ENCRYPTION_CIPHER_SCHEME);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:251:            cipher.init(Cipher.ENCRYPT_MODE, kek);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:252:            cipherText = cipher.doFinal(keyToEncrypt);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:257:            log.error(String.format("Algorithm %s is not available", AES_ENCRYPTION_CIPHER_SCHEME));
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:48:        when(this.cryptographicStorageService.getKeyForEncryptingClientKeys()).thenReturn(new SecretKeySpec(generateKey(), "AES"));
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:71:        ClientIdentifier encryptedClientIdentifierWithEncryptedKeys1 = this.mockClientIdentifierRepository.getLastSavedClientIdentifier();
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:76:        ClientIdentifier encryptedClientIdentifier2 = this.mockClientIdentifierRepository.getLastSavedClientIdentifier();
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:78:        assertNotEquals(encryptedClientIdentifierWithEncryptedKeys1.getIdA(), encryptedClientIdentifier2.getIdA());
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:79:        assertNotEquals(encryptedClientIdentifierWithEncryptedKeys1.getKeyForMac(), encryptedClientIdentifier2.getKeyForMac());
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:80:        assertNotEquals(encryptedClientIdentifierWithEncryptedKeys1.getKeyForTuples(), encryptedClientIdentifier2.getKeyForTuples());
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:155:            Optional<TuplesGenerationResult> encryptedTuples = generateEncryptedTuples(
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:162:            if (!encryptedTuples.isPresent()) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:179:                    .setTuples(ByteString.copyFrom(encryptedTuples.get().getEncryptedTuples()))
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:309:        Optional<TuplesGenerationResult> encryptedTuples = generateEncryptedTuples(
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:316:        if (!encryptedTuples.isPresent()) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:332:                .setTuples(ByteString.copyFrom(encryptedTuples.get().getEncryptedTuples()))
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:491:    private Optional<AuthRequestValidationResult> validateAuthRequest(byte[] encryptedEbid,
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:497:            EbidContent ebidContent = decryptEBIDAndCheckEpoch(encryptedEbid, epochId);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:525:                                addEbidComponents(encryptedEbid, epochId, time),
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:570:        byte[] encryptedTuples;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:729:    private byte[] decryptECC(byte[] ebid, byte encryptedCountryCode) throws RobertServerCryptoException {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:731:                new CryptoAESECB(this.cryptographicStorageService.getFederationKey()), ebid, encryptedCountryCode);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:746:    private byte[] addEbidComponents(byte[] encryptedEbid, int epochId, long time) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:747:        byte[] all = new byte[encryptedEbid.length + Integer.BYTES + Integer.BYTES];
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:748:        System.arraycopy(encryptedEbid, 0, all, 0, encryptedEbid.length);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:749:        System.arraycopy(ByteUtils.intToBytes(epochId), 0, all, encryptedEbid.length, Integer.BYTES);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:754:                encryptedEbid.length + Integer.BYTES,
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:767:                            .ecc(tuple.getEncryptedCountryCode())
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:774:    private Optional<TuplesGenerationResult> generateEncryptedTuples(byte[] tuplesEncryptionKey,
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:839:                CryptoAESGCM cryptoAESGCM = new CryptoAESGCM(tuplesEncryptionKey);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:840:                return Optional.of(TuplesGenerationResult.builder().encryptedTuples(cryptoAESGCM.encrypt(tuplesAsBytes)).build());
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:844:            log.warn("Error serializing tuples to encrypted JSON");
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:43:        return sha256Mac.encrypt(HASH_MAC.getBytes());
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:48:        return sha256Mac.encrypt(HASH_TUPLES.getBytes());
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:163:        when(this.cryptographicStorageService.getKeyForEncryptingClientKeys()).thenReturn(secretKey);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:178:        this.federationKey = new SecretKeySpec(CryptoTestUtils.generateKey(32), CryptoAES.AES_ENCRYPTION_KEY_SCHEME);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:400:            return hmacsha256.encrypt(toHash);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:413:        byte[] encryptedEbid = null;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:416:            encryptedEbid = cryptoSkinny64.encrypt(decryptedEbid);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:421:        return encryptedEbid;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:447:        byte[] ksToUseToEncryptEBID;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:450:                ksToUseToEncryptEBID = ksPrevious;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:453:                ksToUseToEncryptEBID = ksNext;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:457:                ksToUseToEncryptEBID = ks;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:461:        byte[] ebid = generateEbid(id, epochId, ksToUseToEncryptEBID);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1526:            ecc = this.cryptoService.encryptCountryCode(
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:119:		this.federationKey = new SecretKeySpec(this.generateKey(32), CryptoAES.AES_ENCRYPTION_KEY_SCHEME);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:137:	public void testProcessContactWithABadEncryptedCountryCodeFails() {
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:147:			// Create a fake Encrypted Country Code (ECC)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:148:			byte[] encryptedCountryCode = new byte[] { (byte) 0xff };
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:151:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:152:					.messageDetails(generateHelloMessagesFor(ebid, encryptedCountryCode, currentEpochId))
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:183:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:186:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:221:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:232:			System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:233:			System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:234:			System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:240:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:241:					.messageDetails(generateHelloMessagesFor(ebid, encryptedCountryCode, currentEpochId))
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:296:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:308:			messages.add(generateHelloMessageFor(ebid, encryptedCountryCode, t, -78));
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:309:			messages.add(generateHelloMessageFor(ebid, encryptedCountryCode, t + 165L, -50));
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:310:			messages.add(generateHelloMessageFor(ebid, encryptedCountryCode, t + 300L, -35));
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:314:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:372:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:384:			messages.add(generateHelloMessageFor(ebid, encryptedCountryCode, t, -78));
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:385:			messages.add(generateHelloMessageFor(ebid, encryptedCountryCode, t + 165L, -50));
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:389:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:437:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:453:			System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:454:			System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:455:			System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:478:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:527:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:548:			System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:549:			System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:550:			System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:573:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:613:            byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:644:            System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:645:            System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:646:            System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:676:                    .ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:725:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:747:			System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:748:			System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:749:			System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:765:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:823:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:845:			System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:846:			System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:847:			System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:861:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:917:            byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:943:            System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:944:            System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:945:            System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:983:                    .ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1043:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1062:			System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1063:			System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1064:			System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1087:					.ecc(encryptedCountryCode)
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1124:	private HelloMessageDetail generateHelloMessageFor(byte[] ebid, byte[] encryptedCountryCode, long t, int rssi) throws Exception {
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1144:		System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1145:		System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1146:		System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1163:	private List<HelloMessageDetail> generateHelloMessagesFor(byte[] ebid, byte[] encryptedCountryCode, int currentEpoch) throws Exception {
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1173:			messages.add(generateHelloMessageFor(ebid, encryptedCountryCode, t, rssi));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:11: * Callable to create encrypted key using #CryptoService
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:53:     * keysToEncrypt is corresponding to the key that would be encrypted by {@link #cryptoService}
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:81:     * @return the encrypted keys made by {@link #cryptoService} applied on {@link #idA}
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/model/EphemeralTuple.java:11:    private byte[] encryptedCountryCode;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/model/EphemeralTuple.java:17:     * @param encryptedCountryCode Encrypted Country Code used by UA for the given epoch
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/model/EphemeralTuple.java:19:    public EphemeralTuple(int epochId, byte[] ebid, byte[] encryptedCountryCode) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/model/EphemeralTuple.java:22:        this.encryptedCountryCode = encryptedCountryCode;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/model/EphemeralTuple.java:36:    public void setEncryptedCountryCode(byte[] encryptedCountryCode) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/model/EphemeralTuple.java:37:        this.encryptedCountryCode = encryptedCountryCode;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/model/EphemeralTuple.java:48:    public byte[] getEncryptedCountryCode() {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/model/EphemeralTuple.java:49:        return encryptedCountryCode;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:15:     * Generating Tuple ECC EBID and epoch performing encryption with cryptoForEBID and cryptoForECC
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:17:     * ECC -> {@link #encryptCountryCode(CryptoCipherStructureAbstract, byte[], byte)}
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:24:     * @return return encrypted EphemeralTuple fed with ECC EBDI and epoch
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:34:     * @param cryptoForEBID instance of Crypto algo to encrypt EBID with, using KS (server key)
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:37:     * @return return encrypted epochId idA as encrypted EBID
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:52:     * @param cryptoForECC instance of Crypto algo to encrypt ECC with, using KG (federation key)
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:53:     * @param ebid      Result of encryption of IDa and i as EBID - 64-bits
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:55:     * @return return encrypted countryCode and EBID as ECC with MSB method specified in ROBert documentation.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:58:    byte[] encryptCountryCode(CryptoCipherStructureAbstract cryptoForECC, byte[] ebid, byte countryCode) throws RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:61:     * Decrypt an encrypted country code
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:64:     * @param encryptedCountryCode
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:68:     byte[] decryptCountryCode(CryptoCipherStructureAbstract cryptoForECC, byte[] ebid, byte encryptedCountryCode) throws RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:72:     * @param cryptoHMACSHA256S CryptoStructure used to encrypt HMAC-SHA256
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:74:     * @return the HMACSH256 encrypted, truncate value.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:88:     * @param cryptoHMACSHA256S CryptoStructure used to encrypt HMAC-SHA256
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:89:     * @param toBeEncrypted is concat(EBID | Time) respectively 32-bits + 64-bits
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:90:     * @param macToVerify the mac to compare the encrypted payload against
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:95:                             byte[] toBeEncrypted,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:101:     * @param toBeEncrypted Payload to be encrypted (with the additional prefixByte parameter)
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:108:                                 final byte[] toBeEncrypted,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:43:        byte[] encryptedCountryCode = this.encryptCountryCode(cryptoForECC, ebid, countryCode);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:45:        return  new EphemeralTuple(epochId, ebid, encryptedCountryCode);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:55:        byte[] bytesToEncrypt = ByteUtils.addAll(truncatedEpoch, idA);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:57:        return cryptoForEBID.encrypt(bytesToEncrypt);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:68:    public byte[] encryptCountryCode(final CryptoCipherStructureAbstract cryptoForECC, final byte[] ebid, final byte countryCode) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:73:        byte[] payloadToEncrypt = Arrays.copyOf(ebid, 128 / 8);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:75:        // AES Encryption of the payload to encrypt
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:76:        byte[] encryptedPayload = cryptoForECC.encrypt(payloadToEncrypt);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:80:        byte truncatedEncryptedPayload = encryptedPayload[0];
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:82:        return new byte[] { (byte) (truncatedEncryptedPayload ^ countryCode) };
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:86:    public byte[] decryptCountryCode(final CryptoCipherStructureAbstract cryptoForECC, final byte[] ebid, final byte encryptedCountryCode) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:88:        this.assertLength("encrypted country code", 8, encryptedCountryCode);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:90:        // decrypt method is same as encrypt but take in third parameter ecc
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:91:        return this.encryptCountryCode(cryptoForECC, ebid, encryptedCountryCode);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:112:     * @param cryptoHMACSHA256S CryptoStructure uses to encrypt HMAC-SHA256
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:115:     * @return the HMAC-SHA256 encrypted, truncated value.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:124:        return cryptoHMACSHA256S.encrypt(ByteUtils.addAll(prefix, argument));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:142:            final byte[] toBeEncrypted,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:144:        return macValidationForType(cryptoHMACSHA256S, toBeEncrypted, macToVerify, DigestSaltEnum.STATUS);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:149:            final byte[] toBeEncrypted,
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:152:        this.assertLength("concat(EBID | Time)", 64+32+32, toBeEncrypted);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:153:        byte[] generatedMAC = this.generateHMAC(cryptoHMACSHA256S, toBeEncrypted, salt);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:39:     * Encrypt a input plain text
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:46:    void encrypt(final byte [] output, final byte [] input, final Skinny64Key ks);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:90:             * the 3rd and 4th rows are fixed and will be applied during encrypt/decrypt
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:267:    final public void encrypt(final byte[] output, final byte[] input, final Skinny64Key ks) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:274:            throw new IllegalArgumentException("Encrypt: Skinny64Key must be valid");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:277:            throw new IllegalArgumentException("Encrypt: Output buffer size not valid");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:280:            throw new IllegalArgumentException("Encrypt: Inputbuffer size not valid");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:290:        /* Perform all encryption rounds */
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:23:    public static final String AES_ENCRYPTION_KEY_SCHEME = "AES";
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:41:            // Generate encryption keySpec with server federate keySpec.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:42:            keySpec = new SecretKeySpec(key, AES_ENCRYPTION_KEY_SCHEME);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:44:            // Create cipher with AES encryption scheme.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:48://                cipher.init(Cipher.ENCRYPT_MODE, keySpec, this.getAlgorithmParameterSpec());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:52:                cipher.init(Cipher.ENCRYPT_MODE, keySpec);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:68:            // Create cipher with AES encryption scheme.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:72:                cipher.init(Cipher.ENCRYPT_MODE, key, this.getAlgorithmParameterSpec());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:75:                cipher.init(Cipher.ENCRYPT_MODE, key);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:24:    public byte[] encrypt(byte[] plainText) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:30:                this.getCipher().init(Cipher.ENCRYPT_MODE, this.getSecretKey(), algoSpec);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:33:                this.getCipher().init(Cipher.ENCRYPT_MODE, this.getSecretKey());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoMacStructureAbstract.java:12:     * @param payloadToEncrypt payload to encrypt
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoMacStructureAbstract.java:13:     * @return the arguments[0] encrypted with TripleDES algo
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoMacStructureAbstract.java:17:    public byte[] encrypt(byte[] payloadToEncrypt) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoMacStructureAbstract.java:21:            return this.getMac().doFinal(payloadToEncrypt);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:12: * Interface abstracting encryption algorithms
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:24:     * Encryption method TripleDES, AES, HMAC-SHA256
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:25:     * @param arguments are the keys to be encrypted
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:26:     * @return encrypted arguments
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:29:    byte[] encrypt(byte[] arguments) throws RobertServerCryptoException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:33:     * @param arguments are the keys to be encrypted
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:19: * Triple Data Encryption Algorithm -- TripleDES or 3DES
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:28:    private static final String DESEDE_ENCRYPTION_CIPHER_SCHEME = "DESede/CBC/Nopadding";
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:30:    private static final String DESEDE_ENCRYPTION_KEY_SCHEME = "DESede";
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:36:     * Cipher initialize with DESEDE_ENCRYPTION_CIPHER_SCHEME
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:42:     * Cipher SecretKey with DESEDE_ENCRYPTION_KEY_SCHEME
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:55:            // Generate encryption key with server key.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:57:            key = SecretKeyFactory.getInstance(DESEDE_ENCRYPTION_KEY_SCHEME).generateSecret(ks);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:59:            // Create cipher with DESEDE encryption scheme.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:60:            cipher = Cipher.getInstance(DESEDE_ENCRYPTION_CIPHER_SCHEME);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:63:            log.error(String.format("key %s is not available", DESEDE_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:65:            log.error(String.format("Algorithm %s is not available", DESEDE_ENCRYPTION_CIPHER_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:67:            log.error(String.format("key %s is not available", DESEDE_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:15:    private static final String AES_ENCRYPTION_CIPHER_SCHEME = "AES/ECB/NoPadding";
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:18:        super(AES_ENCRYPTION_CIPHER_SCHEME, new SecretKeySpec(key, CryptoAES.AES_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:22:        super(AES_ENCRYPTION_CIPHER_SCHEME, key);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:26:    public byte[] encrypt(byte[] plainText) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:27:        return super.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:14:    private static final String AES_ENCRYPTION_CIPHER_SCHEME = "AES/GCM/NoPadding";
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:22:        super(AES_ENCRYPTION_CIPHER_SCHEME, new SecretKeySpec(key, CryptoAES.AES_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:26:    public byte[] encrypt(byte[] plainText) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:27:        return super.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:18:    private static final String AES_ENCRYPTION_CIPHER_SCHEME = "AES/OFB/NoPadding";
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:21:        super(AES_ENCRYPTION_CIPHER_SCHEME, new SecretKeySpec(key, CryptoAES.AES_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:25:    public byte[] encrypt(byte[] plainText) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:27:        return super.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:28:            // Generate encryption key with server federate key.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:31:            // Create cipher with AES encryption scheme.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:20:	private static final String SKINNY_ENCRYPTION_KEY_SCHEME = "SKINNY64";
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:42:			log.error(String.format("Algorithm %s invalid Skinny64Key", SKINNY_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:67:	public byte[] encrypt(byte[] plainText) throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:75:			cipher.encrypt(output, plainText, ks);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:41:        // MOCKING ENCRYPTEDKEY
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:66:        final TupleGenerator tupleGenerator = new TupleGenerator(serverKey, new SecretKeySpec(federationKey, CryptoAES.AES_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:80:        System.out.println("ECC     size : " + referenceET.getEncryptedCountryCode().length * 8 + "-bits" + " " + Arrays.toString(referenceET.getEncryptedCountryCode()));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:90:        final byte[] fakeHello = ByteUtils.addAll(referenceET.getEncryptedCountryCode(), ByteUtils.addAll(referenceET.getEbid(), ByteUtils.addAll(referenceTime, referenceMAC)));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:100:        // MOCKING ENCRYPTEDKEY
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:125:        final TupleGenerator tupleGenerator = new TupleGenerator(serverKey, new SecretKeySpec(federationKey, CryptoAES.AES_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:137:        System.out.println("ECC     size : " + referenceET.getEncryptedCountryCode().length * 8 + "-bits" + " " + Arrays.toString(referenceET.getEncryptedCountryCode()));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:147:        final byte[] hello = ByteUtils.addAll(referenceET.getEncryptedCountryCode(), ByteUtils.addAll(referenceET.getEbid(), ByteUtils.addAll(referenceTime, referenceMAC)));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:157:        final byte[] encryptedCountryCode = Arrays.copyOfRange(hello, 0, 1);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:161:        assert encryptedCountryCode.length + ebid.length + time.length + mac.length == hello.length;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:162:        System.out.println(Arrays.toString(encryptedCountryCode) + Arrays.toString(ebid) + Arrays.toString(time) + Arrays.toString(mac));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:168:        final byte[] countryCode = this.cryptoService.decryptCountryCode(cryptoForECC, ebid, encryptedCountryCode[0]);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:194:   public void testPerformAESEncryption() {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:197:       byte [] toEncrypt = ByteUtils.generateRandom(16);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:200:       byte [] encrypted = cryptoService.performAESOperation(Cipher.ENCRYPT_MODE, toEncrypt, ByteUtils.generateRandom(32));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:203:       assertNotNull(encrypted);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:204:       assertEquals(32, encrypted.length);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:205:       assertFalse(Arrays.equals(encrypted, toEncrypt));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:212:       byte [] toEncrypt = ByteUtils.generateRandom(16);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:214:       byte [] encrypted = cryptoService.performAESOperation(Cipher.ENCRYPT_MODE, toEncrypt, key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:215:       assertNotNull(encrypted);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:218:       byte [] decrypted = cryptoService.performAESOperation(Cipher.DECRYPT_MODE, encrypted, key  );
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:223:       assertTrue(Arrays.equals(decrypted, toEncrypt));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:22:    public void testCryptoAESECBEncryptDecryptSucceeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:27:        CryptoAESECB cryptoToEncrypt = new CryptoAESECB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:28:        byte[] cipherText = cryptoToEncrypt.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:37:    public void testCryptoAESECBCompareEncryptedSamples() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:43:        CryptoAESECB cryptoToEncrypt = new CryptoAESECB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:44:        byte[] cipherText = cryptoToEncrypt.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:47:        CryptoAESECB cryptoToEncryptModified = new CryptoAESECB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:48:        byte[] cipherTextModified = cryptoToEncryptModified.encrypt(plainTextModified);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:20:    public void testCryptoAESGCMEncryptDecryptSucceeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:22:        byte[] plainText = "plaintexttoencrypt".getBytes();
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:24:        CryptoAESGCM cryptoToEncrypt = new CryptoAESGCM(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:25:        byte[] cipherText = cryptoToEncrypt.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:35:    public void testCryptoAESGCMEncryptDecryptBadIVFails() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:37:        byte[] plainText = "plaintexttoencrypt".getBytes();
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:39:        CryptoAESGCM cryptoToEncrypt = new CryptoAESGCM(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:40:        byte[] cipherText = cryptoToEncrypt.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:52:    public void testCryptoAESGCMEncryptDecryptBadTagFails() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:54:        byte[] plainText = "plaintexttoencrypt".getBytes();
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:56:        CryptoAESGCM cryptoToEncrypt = new CryptoAESGCM(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:57:        byte[] cipherText = cryptoToEncrypt.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:19:    public void testCryptoAESOFBEncryptDecryptSucceeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:24:        CryptoAESOFB cryptoToEncrypt = new CryptoAESOFB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:25:        byte[] cipherText = cryptoToEncrypt.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:35:    public void testCryptoAESOFBEncryptDecryptBadIvFails() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:40:        CryptoAESOFB cryptoToEncrypt = new CryptoAESOFB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:41:        byte[] cipherText = cryptoToEncrypt.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:35:	 * Payload to encrypt
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:42:	 * Pre-processed encryption result of plainText with key1
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:49:	 * Pre-processed encryption result of plainText with key2
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:81:	public void testEncryptKey1Succeeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:86:		byte[] result = crypto.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:93:	public void testEncryptKey2Succeeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:98:		byte[] result = crypto.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:105:	public void testEncryptDecryptBijectionSucceeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:107:		byte[] cipher = crypto.encrypt(plainText);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:114:	public void testEncryptNullPlainTextFails() {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:119:				() -> crypto.encrypt(null),
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:120:				"Expected Skinny64 encrypt to throw, but it didn't"
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:33:    private static final String AES_ENCRYPTION_CIPHER_SCHEME = "AES/GCM/NoPadding";
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:78:            Cipher cipher = Cipher.getInstance(AES_ENCRYPTION_CIPHER_SCHEME);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:84:            log.error(String.format("Algorithm %s is not available", AES_ENCRYPTION_CIPHER_SCHEME));
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:177:        Key clientKek = this.cryptographicStorageService.getKeyForEncryptingClientKeys();
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:193:        byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:198:        messages.add(generateHelloMessageFor(decryptedKeyForMac, ebid, encryptedCountryCode, t, -78));
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:199:        messages.add(generateHelloMessageFor(decryptedKeyForMac, ebid, encryptedCountryCode, t + 165L, -50));
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:200:        messages.add(generateHelloMessageFor(decryptedKeyForMac, ebid, encryptedCountryCode, t + 300L, -35));
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:204:                .ecc(encryptedCountryCode)
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:209:    private HelloMessageDetail generateHelloMessageFor(byte[] decryptedKeyForMac, byte[] ebid, byte[] encryptedCountryCode, long t, int rssi) throws Exception {
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:229:        System.arraycopy(encryptedCountryCode, 0, helloMessage, 0, encryptedCountryCode.length);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:230:        System.arraycopy(ebid, 0, helloMessage, encryptedCountryCode.length, ebid.length);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:231:        System.arraycopy(time, 0, helloMessage, encryptedCountryCode.length + ebid.length, time.length);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:479:        byte[] generatedSHA256 = cryptoHMACSHA256S.encrypt(ByteUtils.addAll(prefix, argument));
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:258:                .setTuples(ByteString.copyFrom("EncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:325:                .setTuples(ByteString.copyFrom("EncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:370:                .setTuples(ByteString.copyFrom("EncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:220:                .setTuples(ByteString.copyFrom("EncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:257:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:580:        byte[] generatedSHA256 = cryptoHMACSHA256S.encrypt(ByteUtils.addAll(prefix, argument));
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:673:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:727:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:791:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:863:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:929:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:996:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1047:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1108:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1179:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1239:                .setTuples(ByteString.copyFrom("Base64encodedEncryptedJSONStringWithTuples".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:418:        byte[] generatedSHA256 = cryptoHMACSHA256S.encrypt(ByteUtils.addAll(prefix, argument));
