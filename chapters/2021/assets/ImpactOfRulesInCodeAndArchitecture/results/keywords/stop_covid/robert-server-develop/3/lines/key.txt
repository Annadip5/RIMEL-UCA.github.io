./robert-server-develop/robert-crypto-grpc-server-messaging/mvnw:219:    while IFS="=" read key value; do
./robert-server-develop/robert-crypto-grpc-server-messaging/mvnw:220:      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
./robert-server-develop/robert-crypto-grpc-server-messaging/mvnw.cmd:29:@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:147:                        "quest\022\027\n\017clientPublicKey\030\001 \001(\014\"b\n\030Genera" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:149:                        "ptedSharedKey\030\002 \001(\014\022\035\n\025serverPublicKeyFo" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:150:                        "rKey\030\003 \001(\014\"\225\001\n\036EncryptedEphemeralTupleRe" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:153:                        "countryCode\030\004 \001(\014\022\027\n\017clientPublicKey\030\005 \001" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:155:                        "\006tuples\030\001 \001(\014\022\037\n\027serverPublicKeyForTuple" +
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:292:                        new java.lang.String[] { "ClientPublicKey", });
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:298:                        new java.lang.String[] { "IdA", "EncryptedSharedKey", "ServerPublicKeyForKey", });
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:304:                        new java.lang.String[] { "IdA", "CurrentEpochID", "NumberOfEpochsToGenerate", "CountryCode", "ClientPublicKey", });
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/CryptoGrpcService.java:310:                        new java.lang.String[] { "Tuples", "ServerPublicKeyForTuple", });
./robert-server-develop/robert-crypto-grpc-server-messaging/src/main/proto/crypto_service.proto:55:	bytes clientPublicKey = 1;
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:237://                .setClientPublicKey(ByteString.copyFrom(generate(91)))
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:242://                .setEncryptedSharedKey(ByteString.copyFrom(generate(32)))
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:243://                .setServerPublicKeyForKey(ByteString.copyFrom(generate(32)))
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:273://                .setClientPublicKey(ByteString.copyFrom(generate(32)))
./robert-server-develop/robert-crypto-grpc-server-messaging/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/client/CryptoServerGrpcClientTest.java:282://                .setServerPublicKeyForTuples(ByteString.copyFrom(generate(32)))
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:3:import java.security.Key;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:4:import java.security.KeyPair;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:16:    byte[] getServerKey(int epochId, long serviceTimeStart, boolean takePreviousDaysKey);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:18:    byte[][] getServerKeys(int epochId, long serviceTimeStart, int nbDays);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:20:    Key getFederationKey();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:24://    void addECDHKeys(String serverPublicKey, String serverPrivateKey);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:25://    void addKekKeysIfNotExist(byte[] kekForKa, byte[] kekForKs);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:27:    Optional<KeyPair> getServerKeyPair();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:31:    Key getKeyForEncryptingClientKeys();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:32:    //Key getKeyForEncryptingServerKeys();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:35:     * Reload the HSM to be able to access the keys added daily
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/ICryptographicStorageService.java:41:     * Gets the complete list of keys cached from the HSM
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:4:import java.security.Key;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:5:import java.security.KeyPair;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:6:import java.security.KeyStore;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:7:import java.security.KeyStoreException;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:9:import java.security.PrivateKey;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:12:import java.security.PublicKey;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:14:import java.security.UnrecoverableKeyException;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:28:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:44:    private static final int SERVER_KEY_SIZE = 24;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:47:    private static final String KEYSTORE_KG_ALGONAME = "AES";
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:49:    //private static final String ALIAS_SERVER_ECDH_PUBLIC_KEY = "server-ecdh-key";
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:50:    private static final String ALIAS_SERVER_ECDH_PRIVATE_KEY = "register-key"; // ECDH
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:51:    //private static final String ALIAS_SERVER_KEK = "server-key-encryption-key;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:52:    private static final String ALIAS_CLIENT_KEK = "key-encryption-key"; // KEK
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:53:    private static final String ALIAS_FEDERATION_KEY = "federation-key"; // K_G
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:54:    private static final String ALIAS_SERVER_KEY_PREFIX = "server-key-"; // K_S
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:56:    private static final String KEYSTORE_TYPE = "PKCS11";
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:58:    private KeyPair keyPair;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:60:    // Cache for K_S keys
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:61:    private Map<String, byte[]> serverKeyCache;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:63:    // Cache for KEK keys
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:64:    private Map<String, Key> kekCache;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:67:    private KeyStore keyStore;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:69:    private Key federationKeyCached;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:83:        serverKeyCache = new HashMap<>();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:99:            char[] keyStorePassword = password.toCharArray();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:100:            this.keyStore = KeyStore.getInstance(KEYSTORE_TYPE, this.provider);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:101:            this.keyStore.load(null, keyStorePassword);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:102:        } catch (KeyStoreException | NoSuchAlgorithmException | CertificateException | IOException | ProviderException  e) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:104:            log.error("An expected error occurred when trying to initialize the keyStore {} due to {}", e.getClass(), e.getMessage());
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:115:                return this.keyStore.containsAlias(alias);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:116:            } catch (KeyStoreException e) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:117:                log.info("An expected error occurred when trying to check if keystore contains the alias {} due to {}", alias, e.getMessage());
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:124:     * Register key
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:128:    public Optional<KeyPair> getServerKeyPair() {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:130:        // Cache the keypair
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:131:        if (this.keyPair != null) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:132:            return Optional.of(this.keyPair);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:135:                if (this.keyPair == null) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:137:                        PrivateKey privateKey = (PrivateKey) this.keyStore.getKey(ALIAS_SERVER_ECDH_PRIVATE_KEY, null);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:138:                        PublicKey publicKey = this.keyStore.getCertificate(ALIAS_SERVER_ECDH_PRIVATE_KEY).getPublicKey();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:140:                        this.keyPair = new KeyPair(publicKey, privateKey);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:141:                        return Optional.ofNullable(this.keyPair);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:142:                    } catch (KeyStoreException | UnrecoverableKeyException | NoSuchAlgorithmException e) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:143:                        log.error("Unable to retrieve the server key pair due to {}", e.getMessage());
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:146:                    return Optional.of(this.keyPair);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:160:                    return this.keyStore.getKey(alias, null).getEncoded();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:162:            } catch (KeyStoreException | UnrecoverableKeyException | NoSuchAlgorithmException e) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:176:    public Key getKeyForEncryptingClientKeys() {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:177:        return getKeyForEncryptingKeys(ALIAS_CLIENT_KEK,
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:178:                "Unable to retrieve key for encrypting keys (KEK) for client from HSM");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:181:    private Key getKeyForEncryptingKeys(String alias, String errorMessage) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:183:        if (this.kekCache.containsKey(alias)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:187:                if (!this.kekCache.containsKey(alias)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:190:                        Key key = this.keyStore.getKey(alias, null);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:191:                        this.kekCache.put(alias, key);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:192:                        return key;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:193:                    } catch (KeyStoreException | NoSuchAlgorithmException | UnrecoverableKeyException | IllegalStateException e) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:206:    public byte[] getServerKey(int epochId, long serviceTimeStart, boolean takePreviousDaysKey) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:214:        if (takePreviousDaysKey) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:218:        return getServerKey(dateFromEpoch);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:221:    private byte[] getServerKey(LocalDate dateFromEpoch) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:222:        byte[] serverKey = null;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:226:            String alias = String.format("%s%s", ALIAS_SERVER_KEY_PREFIX, dateFromEpoch.format(dateFormatter));
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:227:            if (this.serverKeyCache.containsKey(alias)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:228:                serverKey = this.serverKeyCache.get(alias);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:232:                    if (!this.serverKeyCache.containsKey(alias)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:233:                        if (!this.keyStore.containsAlias(alias)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:234:                            log.error("Key store does not contain key for alias {}", alias);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:236:                            Key key = this.keyStore.getKey(alias, null);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:237:                            serverKey = key.getEncoded();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:238:                            this.serverKeyCache.put(alias, serverKey);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:241:                        serverKey = this.serverKeyCache.get(alias);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:249:        return serverKey;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:253:    public byte[][] getServerKeys(int epochId, long timeStart, int nbDays) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:261:        byte[][] keyMap = new byte[nbDays][SERVER_KEY_SIZE];
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:263:            keyMap[i] = this.getServerKey(dateFromEpoch.plusDays(i));
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:265:        return keyMap;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:270:    public Key getFederationKey() {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:272:            if (this.federationKeyCached == null) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:274:                    if (this.federationKeyCached == null) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:275:                        if (this.keyStore.containsAlias(ALIAS_FEDERATION_KEY)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:276:                            log.info("Fetching and caching federation key from keystore");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:277:                            Key federationKeyFromHSM = this.keyStore.getKey(ALIAS_FEDERATION_KEY, null);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:280:                            // Copy key content in new key to prevent any delegation to HSM and perform encryption in Java
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:281:                            this.federationKeyCached = new SecretKeySpec(federationKeyFromHSM.getEncoded(), KEYSTORE_KG_ALGONAME);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:286:        } catch (KeyStoreException | NoSuchAlgorithmException | UnrecoverableKeyException e) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:287:            log.error("Could not retrieve federation key from keystore");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:289:        return this.federationKeyCached;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:301:            // Flush keys
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:302:            this.serverKeyCache.clear();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:303:            this.keyPair = null;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:305:            log.info("Flushed cached keys");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:324:        log.info("Caching federation key");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:325:        this.getFederationKey();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:327:        log.info("Caching key encryption key");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:328:        this.getKeyForEncryptingClientKeys();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:330:        log.info("Caching server key pair");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:331:        this.getServerKeyPair();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:333:        // Cache current and future keys
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:334:        LocalDate dateForCachedServerKey = LocalDate.now(ZoneId.of("UTC"));
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:337:            log.info("Caching future server key for {}", dateForCachedServerKey);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:338:            res = this.getServerKey(dateForCachedServerKey);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:339:            dateForCachedServerKey = dateForCachedServerKey.plusDays(1);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:342:        // Cache previous keys
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:343:        dateForCachedServerKey = LocalDate.now(ZoneId.of("UTC")).minusDays(1);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:345:            log.info("Caching past server key for {}", dateForCachedServerKey);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:346:            res = this.getServerKey(dateForCachedServerKey);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:347:            dateForCachedServerKey = dateForCachedServerKey.minusDays(1);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:355:        if (!Objects.isNull(this.keyPair)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:356:            if (!Objects.isNull(this.keyPair.getPublic())) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:357:                aliases.add(String.format("Server Public ECDH Key '%s'", ALIAS_SERVER_ECDH_PRIVATE_KEY));
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:359:            if (!Objects.isNull(this.keyPair.getPrivate())) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:360:                aliases.add(String.format("Server Private ECDH Key '%s'", ALIAS_SERVER_ECDH_PRIVATE_KEY));
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:365:            aliases.addAll(this.kekCache.keySet().stream().map(elt -> String.format("Key Encryption Key '%s'", elt)).collect(Collectors.toList()));
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:368:        if (!Objects.isNull(this.federationKeyCached)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:369:            aliases.add(String.format("Federation Key '%s'", ALIAS_FEDERATION_KEY));
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:372:        if (!CollectionUtils.isEmpty(this.serverKeyCache)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:373:            aliases.addAll(this.serverKeyCache.keySet().stream().map(elt -> String.format("Server Key '%s'", elt)).collect(Collectors.toList()));
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:377:            log.warn("HSM Cache Status yielded 0 keys");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:379:            log.info("HSM Cache Status yielded {} keys ", aliases.size());
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/database/model/ClientIdentifier.java:36:    @Column(name = "key_for_mac", updatable = false, nullable = false)
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/database/model/ClientIdentifier.java:37:    private String keyForMac;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/database/model/ClientIdentifier.java:40:    @Column(name = "key_for_tuples", updatable = false, nullable = false)
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/database/model/ClientIdentifier.java:41:    private String keyForTuples;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/model/ClientIdentifierBundle.java:8:import java.security.PublicKey;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/model/ClientIdentifierBundle.java:17:    private byte[] keyForMac;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/model/ClientIdentifierBundle.java:18:    private byte[] keyForTuples;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/IClientKeyStorageService.java:8:public interface IClientKeyStorageService {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/IClientKeyStorageService.java:11:     * Create a random identifier to associated with provided keys
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/IClientKeyStorageService.java:15:    Optional<ClientIdentifierBundle> createClientIdUsingKeys(byte[] keyForMac, byte[] keyForTuples);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/IClientKeyStorageService.java:18:     * Get the key corresponding to the provided id
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/IClientKeyStorageService.java:22:    Optional<ClientIdentifierBundle> findKeyById(byte[] id);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/IClientKeyStorageService.java:26:     * Delete the record corresponding to the provided id, effectively destroying the key
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:4:import java.security.InvalidKeyException;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:5:import java.security.Key;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:16:import javax.crypto.KeyGenerator;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:29:import fr.gouv.stopc.robert.crypto.grpc.server.storage.service.IClientKeyStorageService;
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:35:public class ClientKeyStorageServiceImpl implements IClientKeyStorageService {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:44:    public ClientKeyStorageServiceImpl(final ICryptographicStorageService cryptographicStorageService,
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:52:                .idA(Base64.encode(generateKey(5)))
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:53:                .keyForMac(Base64.encode(generateRandomKey()))
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:54:                .keyForTuples(Base64.encode(generateRandomKey()))
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:64:            id = generateKey(5);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:76:    public byte [] generateRandomKey() {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:80:            KeyGenerator keyGen = KeyGenerator.getInstance("HmacSHA256");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:85:            //Initializing the KeyGenerator
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:86:            keyGen.init(secRandom);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:88:            //Creating/Generating a key
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:89:            Key key = keyGen.generateKey();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:90:            ka = key.getEncoded();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:92:            log.error("Could not generate 256-bit key");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:97:    private byte[] generateKey(final int nbOfbytes) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:105:    public Optional<ClientIdentifierBundle> createClientIdUsingKeys(byte[] keyForMac, byte[] keyForTuples) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:111:            id = generateKey(5);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:124:            clientIdentifierBundle = createClientKeysForIdentifier(id, keyForMac, keyForTuples);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:131:    private Optional<ClientIdentifierBundle> createClientKeysForIdentifier(byte[] id, byte[] keyForMac, byte[] keyForTuples) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:134:          if (Objects.isNull(keyForMac)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:135:              log.error("Provided key for mac is null");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:139:          if (Objects.isNull(keyForTuples)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:140:              log.error("Provided key for tuples is null");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:144:          byte[] encryptedKeyForMac = this.encryptKeyWithAES256GCMAndKek(
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:145:                  keyForMac,
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:146:                  this.cryptographicStorageService.getKeyForEncryptingClientKeys());
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:148:          if (Objects.isNull(encryptedKeyForMac)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:149:              log.error("The encrypted key for mac is null");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:153:          byte[] encryptedKeyForTuples = this.encryptKeyWithAES256GCMAndKek(
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:154:                  keyForTuples,
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:155:                  this.cryptographicStorageService.getKeyForEncryptingClientKeys());
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:157:          if (Objects.isNull(encryptedKeyForTuples)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:158:              log.error("The encrypted key for tuples is null");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:164:                  .keyForMac(Base64.encode(encryptedKeyForMac))
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:165:                  .keyForTuples(Base64.encode(encryptedKeyForTuples))
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:172:                  .keyForMac(keyForMac)
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:173:                  .keyForTuples(keyForTuples)
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:182:    public Optional<ClientIdentifierBundle> findKeyById(byte[] id) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:186:                    Key clientKek = this.cryptographicStorageService.getKeyForEncryptingClientKeys();
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:188:                        log.error("The clientKek to decrypt the client keys is null.");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:192:                    byte[] decryptedKeyForMac = this.decryptStoredKeyWithAES256GCMAndKek(
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:193:                            Base64.decode(client.getKeyForMac()),
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:196:                    if(Objects.isNull(decryptedKeyForMac)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:197:                        log.error("The decrypted client key is null.");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:201:                    byte[] decryptedKeyForTuples = this.decryptStoredKeyWithAES256GCMAndKek(
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:202:                            Base64.decode(client.getKeyForTuples()),
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:205:                    if(Objects.isNull(decryptedKeyForTuples)) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:206:                        log.error("The decrypted client key for tuples is null.");
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:212:                            .keyForMac(Arrays.copyOf(decryptedKeyForMac, decryptedKeyForMac.length))
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:213:                            .keyForTuples(Arrays.copyOf(decryptedKeyForTuples, decryptedKeyForTuples.length))
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:227:    public byte[] decryptStoredKeyWithAES256GCMAndKek(byte[] storedKey, Key kek) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:228:        AlgorithmParameterSpec algorithmParameterSpec = new GCMParameterSpec(128, storedKey, 0, IV_LENGTH);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:229:        byte[] toDecrypt = new byte[storedKey.length - IV_LENGTH];
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:230:        System.arraycopy(storedKey, IV_LENGTH, toDecrypt, 0, storedKey.length - IV_LENGTH);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:238:                | InvalidKeyException | InvalidAlgorithmParameterException | IllegalBlockSizeException
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:245:    public byte[] encryptKeyWithAES256GCMAndKek(byte[] keyToEncrypt, Key kek) {
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:252:            cipherText = cipher.doFinal(keyToEncrypt);
./robert-server-develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageServiceImpl.java:255:                | InvalidKeyException | IllegalBlockSizeException
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:7:import fr.gouv.stopc.robert.crypto.grpc.server.storage.service.impl.ClientKeyStorageServiceImpl;
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:19:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:32:public class ClientKeyStorageImplTest {
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:37:    ClientKeyStorageServiceImpl clientKeyStorageService;
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:45:        this.clientKeyStorageService = new ClientKeyStorageServiceImpl(cryptographicStorageService, mockClientIdentifierRepository);
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:48:        when(this.cryptographicStorageService.getKeyForEncryptingClientKeys()).thenReturn(new SecretKeySpec(generateKey(), "AES"));
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:51:    private byte[] generateKey() {
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:52:        byte[] key = new byte[32];
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:53:        new SecureRandom().nextBytes(key);
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:54:        return key;
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:58:    void testCreateClientIdUsingKeysSucceeds() {
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:59:        Optional<ClientIdentifierBundle> clientIdentifierBundle = this.clientKeyStorageService.createClientIdUsingKeys(generateKey(), generateKey());
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:63:        Optional<ClientIdentifierBundle> clientIdentifierBundle1 = this.clientKeyStorageService.findKeyById(clientIdentifierBundle.get().getId());
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:64:        assertTrue(Arrays.equals(clientIdentifierBundle1.get().getKeyForMac(), clientIdentifierBundle.get().getKeyForMac()));
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:68:    void testCreateTwoClientIdsAndKeysDifferSucceeds() {
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:69:        Optional<ClientIdentifierBundle> clientIdentifierBundleWithDecryptedKeys1 = this.clientKeyStorageService.createClientIdUsingKeys(generateKey(), generateKey());
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:70:        assertTrue(clientIdentifierBundleWithDecryptedKeys1.isPresent());
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:71:        ClientIdentifier encryptedClientIdentifierWithEncryptedKeys1 = this.mockClientIdentifierRepository.getLastSavedClientIdentifier();
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:74:        Optional<ClientIdentifierBundle> clientIdentifierBundle2 = this.clientKeyStorageService.createClientIdUsingKeys(generateKey(), generateKey());
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:78:        assertNotEquals(encryptedClientIdentifierWithEncryptedKeys1.getIdA(), encryptedClientIdentifier2.getIdA());
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:79:        assertNotEquals(encryptedClientIdentifierWithEncryptedKeys1.getKeyForMac(), encryptedClientIdentifier2.getKeyForMac());
./robert-server-develop/robert-crypto-grpc-server-storage/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/storage/service/impl/ClientKeyStorageImplTest.java:80:        assertNotEquals(encryptedClientIdentifierWithEncryptedKeys1.getKeyForTuples(), encryptedClientIdentifier2.getKeyForTuples());
./robert-server-develop/robert-crypto-grpc-server/mvnw:219:    while IFS="=" read key value; do
./robert-server-develop/robert-crypto-grpc-server/mvnw:220:      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
./robert-server-develop/robert-crypto-grpc-server/mvnw.cmd:29:@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceConfiguration.java:22:        cryptoStorageService.init(propertyLoader.getKeyStorePassword(), propertyLoader.getKeyStoreConfigFile());
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/IECDHKeyService.java:8:public interface IECDHKeyService {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/IECDHKeyService.java:9:    Optional<ClientIdentifierBundle> deriveKeysFromClientPublicKey(byte[] clientPublicKey) throws RobertServerCryptoException;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:3:import java.security.Key;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:42:import fr.gouv.stopc.robert.crypto.grpc.server.service.IECDHKeyService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:45:import fr.gouv.stopc.robert.crypto.grpc.server.storage.service.IClientKeyStorageService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:72:    private final IECDHKeyService keyService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:73:    private final IClientKeyStorageService clientStorageService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:80:                                     final IECDHKeyService keyService,
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:81:                                     final IClientKeyStorageService clientStorageService,
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:87:        this.keyService = keyService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:109:        List<String> cachedKeys = this.cryptographicStorageService.getHSMCacheStatus();
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:112:                .addAllAliases(cachedKeys)
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:122:            // Derive K_A and K_A_Tuples from client public key for the new registration
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:123:            Optional<ClientIdentifierBundle> clientIdentifierBundleWithPublicKey = this.keyService.deriveKeysFromClientPublicKey(request.getClientPublicKey().toByteArray());
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:125:            if (!clientIdentifierBundleWithPublicKey.isPresent()) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:126:                String errorMessage = "Unable to derive keys from provided client public key for client registration";
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:138:            Optional<ClientIdentifierBundle> clientIdentifierBundleFromDb = this.clientStorageService.createClientIdUsingKeys(
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:139:                    clientIdentifierBundleWithPublicKey.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:140:                    clientIdentifierBundleWithPublicKey.get().getKeyForTuples());
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:156:                    clientIdentifierBundleFromDb.get().getKeyForTuples(),
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:295:        Optional<ClientIdentifierBundle> clientIdentifierBundle = this.clientStorageService.findKeyById(validationResult.get().getId());
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:310:                clientIdentifierBundle.get().getKeyForTuples(),
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:402:            Optional<ClientIdentifierBundle> clientIdentifierBundle = this.clientStorageService.findKeyById(idA);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:404:                String errorMessage = "Could not find keys for id";
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:416:            boolean macValid = this.cryptoService.macHelloValidation(new CryptoHMACSHA256(clientIdentifierBundle.get().getKeyForMac()),
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:510:            Optional<ClientIdentifierBundle> clientIdentifierBundle = this.clientStorageService.findKeyById(ebidContent.getIdA());
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:524:                                new CryptoHMACSHA256(clientIdentifierBundle.get().getKeyForMac()),
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:581:        private EphemeralTupleEbidEccJson key;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:613:                                                 boolean mustCheckWithPreviousDayKey,
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:619:        byte[] serverKey = this.cryptographicStorageService.getServerKey(
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:622:                mustCheckWithPreviousDayKey);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:624:        if (Objects.isNull(serverKey)) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:625:            log.warn("Cannot retrieve server key for {}", authRequestEpoch);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:629:        byte[] decryptedEbid = this.cryptoService.decryptEBID(new CryptoSkinny64(serverKey), ebid);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:638:            } else if (ksAdjustment && !mustCheckWithPreviousDayKey) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:731:                new CryptoAESECB(this.cryptographicStorageService.getFederationKey()), ebid, encryptedCountryCode);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:765:                    .key(EphemeralTupleEbidEccJson.builder()
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:774:    private Optional<TuplesGenerationResult> generateEncryptedTuples(byte[] tuplesEncryptionKey,
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:788:        final byte[][] serverKeys = this.cryptographicStorageService.getServerKeys(
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:793:        if (Objects.isNull(serverKeys)) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:794:            log.warn("Could not retrieve server keys for epoch span starting with: {}", epochId);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:797:        int[] nbOfEpochsToGeneratePerDay = new int[serverKeys.length];
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:804:        final Key federationKey = this.cryptographicStorageService.getFederationKey();
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:807:            if (serverKeys[i] != null) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:808:                final TupleGenerator tupleGenerator = new TupleGenerator(serverKeys[i], federationKey);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:823:                log.warn("Cannot generating tuples for day {}, missing key", i);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/CryptoGrpcServiceBaseImpl.java:839:                CryptoAESGCM cryptoAESGCM = new CryptoAESGCM(tuplesEncryptionKey);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:3:import java.security.InvalidKeyException;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:4:import java.security.KeyFactory;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:5:import java.security.KeyPair;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:7:import java.security.PrivateKey;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:9:import java.security.PublicKey;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:10:import java.security.spec.InvalidKeySpecException;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:11:import java.security.spec.X509EncodedKeySpec;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:15:import javax.crypto.KeyAgreement;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:20:import fr.gouv.stopc.robert.crypto.grpc.server.service.IECDHKeyService;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:29:public class ECDHKeyServiceImpl implements IECDHKeyService {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:37:    public ECDHKeyServiceImpl(ICryptographicStorageService cryptographicStorageService) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:41:    private byte[] deriveKeyForMacFromClientPublicKey(byte[] sharedSecret) throws RobertServerCryptoException {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:46:    private byte[] deriveKeyForTuplesFromClientPublicKey(byte[] sharedSecret) throws RobertServerCryptoException {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:52:    private byte[] generateSharedSecret(byte[] clientPublicKey) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:53:        Optional<KeyPair> serverKeyPair = this.cryptographicStorageService.getServerKeyPair();
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:55:        if (!serverKeyPair.isPresent()) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:56:            log.error("Could not retrieve server key pair");
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:60:        PrivateKey serverPrivateKey = serverKeyPair.get().getPrivate();
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:63:            KeyAgreement keyAgreement = KeyAgreement.getInstance("ECDH");
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:64:            keyAgreement.init(serverPrivateKey);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:65:            X509EncodedKeySpec pkSpec = new X509EncodedKeySpec(clientPublicKey);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:66:            KeyFactory kf = KeyFactory.getInstance("EC");
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:67:            PublicKey clientPublicKeyAsKey = kf.generatePublic(pkSpec);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:68:            keyAgreement.doPhase(clientPublicKeyAsKey, true);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:69:            return keyAgreement.generateSecret();
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:70:        } catch (NoSuchAlgorithmException | InvalidKeySpecException
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:71:                | InvalidKeyException | IllegalStateException | ProviderException e) {
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:72:            log.error("Unable to generate ECDH Keys due to {}", e.getMessage());
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:79:     * @param clientPublicKey
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:80:     * @return keys generated from shared secret and the server public key
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:84:    public Optional<ClientIdentifierBundle> deriveKeysFromClientPublicKey(byte[] clientPublicKey)
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:86:        byte[] sharedSecret = this.generateSharedSecret(clientPublicKey);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:92:        byte[] kaMac = deriveKeyForMacFromClientPublicKey(sharedSecret);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:93:        byte[] kaTuples = deriveKeyForTuplesFromClientPublicKey(sharedSecret);
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:100:                .keyForMac(kaMac)
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImpl.java:101:                .keyForTuples(kaTuples)
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/utils/PropertyLoader.java:16:    @Value("${robert.crypto.server.keystore.password}")
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/utils/PropertyLoader.java:17:    private String keyStorePassword;
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/utils/PropertyLoader.java:19:    @Value("${robert.crypto.server.keystore.config.file}")
./robert-server-develop/robert-crypto-grpc-server/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/utils/PropertyLoader.java:20:    private String keyStoreConfigFile;
./robert-server-develop/robert-crypto-grpc-server/src/main/resources/application.properties:12:# The pin of the keystore
./robert-server-develop/robert-crypto-grpc-server/src/main/resources/application.properties:13:robert.crypto.server.keystore.password=${ROBERT_CRYPTO_SERVER_KEYSTORE_PASSWORD:1234}
./robert-server-develop/robert-crypto-grpc-server/src/main/resources/application.properties:15:# The pin of the keystore
./robert-server-develop/robert-crypto-grpc-server/src/main/resources/application.properties:16:robert.crypto.server.keystore.config.file=${ROBERT_CRYPTO_SERVER_CONFIG_FILE:/config/SoftHSMv2/softhsm2.cfg}
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:10:import java.security.Key;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:28:import javax.crypto.KeyGenerator;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:29:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:60:import fr.gouv.stopc.robert.crypto.grpc.server.service.impl.ECDHKeyServiceImpl;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:63:import fr.gouv.stopc.robert.crypto.grpc.server.storage.service.IClientKeyStorageService;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:114:    private ECDHKeyServiceImpl keyService;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:116:    private IClientKeyStorageService clientStorageService;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:126:    private Key federationKey;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:145:        clientStorageService = new MockClientKeyStorageService();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:149:                keyService,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:154:        when(this.cryptographicStorageService.getServerKeyPair())
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:155:        .thenReturn(Optional.ofNullable(CryptoTestUtils.generateECDHKeyPair()));
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:160:        byte[] keyToEncodeKeys = new byte[32];
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:161:        new SecureRandom().nextBytes(keyToEncodeKeys);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:162:        SecretKeySpec secretKey = new SecretKeySpec(keyToEncodeKeys, "AES");
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:163:        when(this.cryptographicStorageService.getKeyForEncryptingClientKeys()).thenReturn(secretKey);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:178:        this.federationKey = new SecretKeySpec(CryptoTestUtils.generateKey(32), CryptoAES.AES_ENCRYPTION_KEY_SCHEME);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:180:        when(this.cryptographicStorageService.getFederationKey()).thenReturn(this.federationKey);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:193:                .setClientPublicKey(ByteString.copyFrom(CryptoTestUtils.generateECDHPublicKey()))
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:199:        byte[][] serverKeys = generateRandomServerKeys();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:201:        doReturn(serverKeys).when(this.cryptographicStorageService).getServerKeys(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:218:        assertTrue(checkTuples(createRegistrationResponse.getIdA().toByteArray(), tuples, this.currentEpochId, serverKeys));
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:233:    private boolean checkTuplesForDay(List<CryptoGrpcServiceBaseImpl.EphemeralTupleJson> tuples, byte[] key) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:239:                byte[] decryptedEbid = this.cryptoService.decryptEBID(new CryptoSkinny64(key), tuple.getKey().getEbid());
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:261:    private boolean checkTuplesContentMatchesKeysForDays(Collection<CryptoGrpcServiceBaseImpl.EphemeralTupleJson> decodedTuples,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:263:                                                      byte[][] serverKeys) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:270:        for (int i = 0; i < serverKeys.length; i++) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:273:            results.add(checkTuplesForDay(listToProcess, serverKeys[i]));
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:280:    private boolean checkTuples(byte[] id, byte[] tuples, int epochId, byte[][] serverKeys) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:281:        CryptoAESGCM aesGcm = new CryptoAESGCM(this.clientStorageService.findKeyById(id).get().getKeyForTuples());
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:290:            return sizeMatches && checkTuplesContentMatchesKeysForDays(decodedTuples, epochId, serverKeys);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:298:    void testCreateRegistrationFakeClientPublicKeyFails() {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:299:        byte[] fakeKey = new byte[32];
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:300:        new SecureRandom().nextBytes(fakeKey);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:304:                .setClientPublicKey(ByteString.copyFrom(fakeKey))
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:324:    void testCreateRegistrationClientPublicKeyNotECDHFails() {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:327:                .setClientPublicKey(ByteString.copyFrom(CryptoTestUtils.generateDHPublicKey()))
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:347:    void testCreateRegistrationClientPublicKeyImproperECFails() {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:348:        // Client public key generated with EC curve "secp256k1" instead of server's choice of "secp256*r*1"
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:351:                .setClientPublicKey(ByteString.copyFrom(CryptoTestUtils.generateECDHPublicKey("secp256k1")))
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:380:        private byte[] serverKey;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:384:        byte[] keyForMac = new byte[32];
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:385:        byte[] keyForTuples = new byte[32];
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:387:        return this.clientStorageService.createClientIdUsingKeys(keyForMac, keyForTuples);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:390:    private byte[] generateMac(byte[] ebid, int epochId, long time, byte[] keyForMac, DigestSaltEnum digestSalt) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:399:            CryptoHMACSHA256 hmacsha256 = new CryptoHMACSHA256(keyForMac);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:429:                                                                               byte[] keyForMac,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:463:                .when(this.cryptographicStorageService).getServerKey(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:468:                .when(this.cryptographicStorageService).getServerKey(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:477:                .mac(generateMac(ebid, epochId, time, keyForMac, digestSalt))
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:479:                .serverKey(ks)
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:483:    private AuthRequestBundle generateAuthRequestBundle(byte[] id, byte[] keyForMac, DigestSaltEnum digestSalt) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:484:        return generateAuthRequestBundleWithTimeDeltaAndOtherKS(id, keyForMac, digestSalt, 0L, OtherKSEnum.NONE);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:498:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:528:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:560:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:594:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:629:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:659:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:689:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:719:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:760:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:790:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:829:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:861:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:893:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:933:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:963:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:996:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1030:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1059:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1088:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1127:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1159:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1162:        byte[][] serverKeys = generateRandomServerKeys();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1164:        when(this.cryptographicStorageService.getServerKeys(this.currentEpochId,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1167:                .thenReturn(serverKeys);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1191:        assertTrue(checkTuples(response.getIdA().toByteArray(), response.getTuples().toByteArray(), this.currentEpochId, serverKeys));
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1194:    private byte[][] generateRandomServerKeys() {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1195:        byte[][] serverKeys = new byte[4][24];
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1196:        new SecureRandom().nextBytes(serverKeys[0]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1197:        new SecureRandom().nextBytes(serverKeys[1]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1198:        new SecureRandom().nextBytes(serverKeys[2]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1199:        new SecureRandom().nextBytes(serverKeys[3]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1200:        return serverKeys;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1208:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1213:        byte[][] serverKeys = generateRandomServerKeys();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1214:        when(this.cryptographicStorageService.getServerKeys(
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1217:                4)).thenReturn(serverKeys);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1248:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1280:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1314:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1343:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1372:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1384:        byte[][] serverKeys = generateRandomServerKeys();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1386:        when(this.cryptographicStorageService.getServerKeys(this.currentEpochId,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1389:                .thenReturn(serverKeys);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1413:        assertTrue(checkTuples(response.getIdA().toByteArray(), response.getTuples().toByteArray(), this.currentEpochId, serverKeys));
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1421:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1426:        byte[][] serverKeys = generateRandomServerKeys();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1428:        when(this.cryptographicStorageService.getServerKeys(this.currentEpochId,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1431:                .thenReturn(serverKeys);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1470:                                                    byte[][] serverKeys,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1471:                                                    byte[] keyForMac,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1488:                .getServerKey(epochId,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1492:                .getServerKey(epochId + 1,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1496:                .getServerKey(epochId - 1,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1500:                .getServerKey(epochId,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1504:        byte[] serverKey;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1507:                serverKey = ksPrevious;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1510:                serverKey = ksNext;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1514:                serverKey = ks;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1518:        byte[] ebid = generateEbid(id, epochId, serverKey);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1520:        when(this.cryptographicStorageService.getFederationKey()).thenReturn(this.federationKey);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1527:                    new CryptoAESECB(this.cryptographicStorageService.getFederationKey()),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1533:            mac = this.cryptoService.generateMACHello(new CryptoHMACSHA256(keyForMac), hello);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1550:        byte[][] serverKeys = new byte[4][24];
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1551:        new SecureRandom().nextBytes(serverKeys[0]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1552:        new SecureRandom().nextBytes(serverKeys[1]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1553:        new SecureRandom().nextBytes(serverKeys[2]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1554:        new SecureRandom().nextBytes(serverKeys[3]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1559:                serverKeys,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1560:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1591:        byte[][] serverKeys = new byte[1][24];
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1592:        new SecureRandom().nextBytes(serverKeys[0]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1597:                serverKeys,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1598:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1633:        byte[][] serverKeys = new byte[1][24];
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1634:        new SecureRandom().nextBytes(serverKeys[0]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1639:                serverKeys,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1640:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1674:        byte[][] serverKeys = new byte[4][24];
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1675:        new SecureRandom().nextBytes(serverKeys[0]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1676:        new SecureRandom().nextBytes(serverKeys[1]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1677:        new SecureRandom().nextBytes(serverKeys[2]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1678:        new SecureRandom().nextBytes(serverKeys[3]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1685:                serverKeys,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1686:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1732:        byte[][] serverKeys = new byte[4][24];
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1733:        new SecureRandom().nextBytes(serverKeys[0]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1734:        new SecureRandom().nextBytes(serverKeys[1]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1735:        new SecureRandom().nextBytes(serverKeys[2]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1736:        new SecureRandom().nextBytes(serverKeys[3]);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1741:                serverKeys,
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1742:                clientIdentifierBundle.get().getKeyForMac(),
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1833:    public class MockClientKeyStorageService implements IClientKeyStorageService {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1835:        private final HashMap<ByteArray, ClientIdentifierBundle> idKeyHashMap = new HashMap<>();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1843:                id = generateKey(5);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1845:            } while (this.idKeyHashMap.containsKey(id) && i < MAX_ID_CREATION_ATTEMPTS);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1849:        public byte [] generateRandomKey() {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1853:                KeyGenerator keyGen = KeyGenerator.getInstance("HmacSHA256");
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1858:                //Initializing the KeyGenerator
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1859:                keyGen.init(secRandom);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1861:                //Creating/Generating a key
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1862:                Key key = keyGen.generateKey();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1863:                ka = key.getEncoded();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1865:                log.error("Could not generate 256-bit key");
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1870:        private byte[] generateKey(final int nbOfbytes) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1878:        public Optional<ClientIdentifierBundle> createClientIdUsingKeys(byte[] kaMac, byte[] kaTuples) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1883:                    .keyForMac(kaMac)
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1884:                    .keyForTuples(kaTuples)
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1886:            this.idKeyHashMap.put(new ByteArray(id), clientBundle);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1891:        public Optional<ClientIdentifierBundle> findKeyById(byte[] id) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1892:            ClientIdentifierBundle bundle = this.idKeyHashMap.get(new ByteArray(id));
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/CryptoServiceGrpcServerTest.java:1902:            this.idKeyHashMap.remove(new ByteArray(id));
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:21:import fr.gouv.stopc.robert.crypto.grpc.server.service.impl.ECDHKeyServiceImpl;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:24:import javax.crypto.KeyAgreement;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:31:public class ECDHKeyServiceImplTest {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:34:    private ECDHKeyServiceImpl keyService;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:41:        assertNotNull(this.keyService);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:45:    void testKeyDerivationFromClientPublicKeySucceeds() {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:48:        byte [] clientPublicKey = CryptoTestUtils.generateECDHPublicKey();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:51:        when(this.cryptographicStorageService.getServerKeyPair())
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:52:                .thenReturn(Optional.ofNullable(CryptoTestUtils.generateECDHKeyPair()));
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:56:            clientIdentifierBundle = this.keyService.deriveKeysFromClientPublicKey(clientPublicKey);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:63:        assertNotNull(clientIdentifierBundle.get().getKeyForTuples());
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:64:        assertNotNull(clientIdentifierBundle.get().getKeyForMac());
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:71:    void testKeyDerivationECDHTest() {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:74:            KeyPairGenerator kpg = KeyPairGenerator.getInstance("EC");
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:76:            KeyPair serverECDHKey = kpg.generateKeyPair();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:78:            PrivateKey serverPrivateKey = serverECDHKey.getPrivate();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:79:            log.info("Server private key format: {}", serverPrivateKey.getFormat());
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:80:            log.info("Server private key algorithm: {}", serverPrivateKey.getAlgorithm());
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:81:            log.info("Server private key data as hex: {}", ByteUtils.toHexString(serverPrivateKey.getEncoded()));
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:82:            log.info("Server private key data as binary: {}", ByteUtils.toBinaryString(serverPrivateKey.getEncoded()));
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:83:            log.info(ToStringBuilder.reflectionToString(serverPrivateKey, ToStringStyle.MULTI_LINE_STYLE));
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:85:            // use server public key as client public key
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:86:            PublicKey clientPublicKey = serverECDHKey.getPublic();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:87:            log.info("Client public private key format: {}", clientPublicKey.getFormat());
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:88:            log.info("Client public key algorithm: {}", clientPublicKey.getAlgorithm());
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:89:            log.info("Client public key data as hex: {}", ByteUtils.toHexString(clientPublicKey.getEncoded()));
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:90:            log.info("Client public key data as binary: {}", ByteUtils.toBinaryString(clientPublicKey.getEncoded()));
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:91:            log.info(ToStringBuilder.reflectionToString(clientPublicKey, ToStringStyle.MULTI_LINE_STYLE));
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:93:            KeyAgreement ka = KeyAgreement.getInstance("ECDH");
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:94:            ka.init(serverPrivateKey);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:95:            ka.doPhase(clientPublicKey, true);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:102:                | InvalidKeyException | IllegalStateException | InvalidAlgorithmParameterException e) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/service/impl/ECDHKeyServiceImplTest.java:103:            log.error("Unable to generate ECDH Keys due to {}", e.getMessage());
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:4:import java.security.KeyPair;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:5:import java.security.KeyPairGenerator;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:19:    public static byte[] generateECDHPublicKey() {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:20:        return generateECDHPublicKey("secp256r1");
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:23:    public static byte[] generateECDHPublicKey(String ecSpec) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:24:        KeyPair keyPair = generateECDHKeyPair(ecSpec);
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:26:        return keyPair == null ? null : keyPair.getPublic().getEncoded();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:29:    public static KeyPair generateECDHKeyPair() {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:30:        return generateECDHKeyPair("secp256r1");
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:33:    public static KeyPair generateECDHKeyPair(String ecSpec) {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:35:            // Generate ephemeral ECDH keypair
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:36:            KeyPairGenerator kpg;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:37:            kpg = KeyPairGenerator.getInstance("EC");
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:39:            KeyPair keyPair = kpg.generateKeyPair();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:41:            return keyPair;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:44:            log.error("Unable to generate ECDH public key", e.getMessage());
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:50:    public static byte[] generateDHPublicKey() {
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:52:            KeyPairGenerator kpg;
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:53:            kpg = KeyPairGenerator.getInstance("DH");
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:55:            KeyPair keyPair = kpg.generateKeyPair();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:57:            return keyPair.getPublic().getEncoded();
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:60:            log.error("Unable to generate DH public key", e.getMessage());
./robert-server-develop/robert-crypto-grpc-server/src/test/java/test/fr/gouv/stopc/robert/crypto/grpc/server/utils/CryptoTestUtils.java:66:    public static byte[] generateKey(int sizeInBytes) {
./robert-server-develop/robert-server-batch/mvnw:219:    while IFS="=" read key value; do
./robert-server-develop/robert-server-batch/mvnw:220:      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
./robert-server-develop/robert-server-batch/mvnw.cmd:29:@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/configuration/ContactsProcessingConfiguration.java:64:    public static final String TOTAL_CONTACT_COUNT_KEY = "totalContactCount";
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/configuration/ContactsProcessingConfiguration.java:65:    public static final String TOTAL_REGISTRATION_COUNT_KEY = "totalRegistrationCount";
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/configuration/ContactsProcessingConfiguration.java:66:    public static final String TOTAL_REGISTRATION_FOR_PURGE_COUNT_KEY = "totalRegistrationForPurgeCount";
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/configuration/ContactsProcessingConfiguration.java:133:                    .listener(new ProcessingJobExecutionListener(TOTAL_REGISTRATION_COUNT_KEY,
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/configuration/ContactsProcessingConfiguration.java:141:                    .listener(new ProcessingJobExecutionListener(TOTAL_CONTACT_COUNT_KEY,
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/configuration/ContactsProcessingConfiguration.java:151:                    .listener(new ProcessingJobExecutionListener(TOTAL_REGISTRATION_FOR_PURGE_COUNT_KEY,
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/configuration/ContactsProcessingConfiguration.java:325:        return new RegistrationItemWriter(this.registrationService, TOTAL_REGISTRATION_COUNT_KEY);
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/configuration/ContactsProcessingConfiguration.java:329:        return new RegistrationItemWriter(this.registrationService, TOTAL_REGISTRATION_FOR_PURGE_COUNT_KEY);
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/listener/ProcessingJobExecutionListener.java:22:    private String totalItemCountKey;
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/listener/ProcessingJobExecutionListener.java:32:        jobExecution.getExecutionContext().putLong(totalItemCountKey, getTotalItemCount());
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/listener/ProcessingJobExecutionListener.java:43:        if (ContactsProcessingConfiguration.TOTAL_REGISTRATION_COUNT_KEY.equals(totalItemCountKey)){
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/listener/ProcessingJobExecutionListener.java:45:        } else if(ContactsProcessingConfiguration.TOTAL_CONTACT_COUNT_KEY.equals(totalItemCountKey)){
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/listener/ProcessingJobExecutionListener.java:47:        } else if(ContactsProcessingConfiguration.TOTAL_REGISTRATION_FOR_PURGE_COUNT_KEY.equals(totalItemCountKey)){
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/writer/ContactItemWriter.java:67:                    getLong(ContactsProcessingConfiguration.TOTAL_CONTACT_COUNT_KEY);
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/writer/RegistrationItemWriter.java:26:    private String totalItemCountKey;
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/writer/RegistrationItemWriter.java:28:    public RegistrationItemWriter(IRegistrationService registrationService, String totalItemCountKey){
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/writer/RegistrationItemWriter.java:30:        this.totalItemCountKey = totalItemCountKey;
./robert-server-develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/writer/RegistrationItemWriter.java:68:            totalRegistrationCount = stepExecution.getJobExecution().getExecutionContext().getLong(totalItemCountKey);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:16:import java.security.Key;
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:25:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:103:	private byte[] serverKey;
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:104:	private Key federationKey;
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:110:	private byte[] generateKey(int sizeInBytes) {
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:118:		this.serverKey = this.generateKey(24);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:119:		this.federationKey = new SecretKeySpec(this.generateKey(32), CryptoAES.AES_ENCRYPTION_KEY_SCHEME);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:145:			byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId, ProcessorTestUtils.generateIdA());
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:182:			byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId, ProcessorTestUtils.generateIdA());
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:183:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:220:			byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId, ProcessorTestUtils.generateIdA());
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:221:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:293:			byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId,
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:296:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:370:			byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId,
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:372:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:434:			byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId,
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:437:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:467:					.generateMACHello(new CryptoHMACSHA256(getKeyMacFor(this.registration.get().getPermanentIdentifier())), helloMessage);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:525:			byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId,
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:527:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:562:					.generateMACHello(new CryptoHMACSHA256(getKeyMacFor(this.registration.get().getPermanentIdentifier())), helloMessage);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:611:            byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId,
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:613:            byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:658:                    .generateMACHello(new CryptoHMACSHA256(getKeyMacFor(this.registration.get().getPermanentIdentifier())), helloMessage);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:722:					new CryptoSkinny64(serverKey),
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:726:					new CryptoAESECB(federationKey),
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:754:					.generateMACHello(new CryptoHMACSHA256(getKeyMacFor(this.registration.get().getPermanentIdentifier())), helloMessage);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:820:					new CryptoSkinny64(serverKey),
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:824:					new CryptoAESECB(federationKey),
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:850:					.generateMACHello(new CryptoHMACSHA256(getKeyMacFor(this.registration.get().getPermanentIdentifier())), helloMessage);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:914:            byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId,
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:917:            byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:958:                    .generateMACHello(new CryptoHMACSHA256(getKeyMacFor(this.registration.get().getPermanentIdentifier())), helloMessage);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1041:			byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId,
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1043:			byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1076:					.generateMACHello(new CryptoHMACSHA256(getKeyMacFor(this.registration.get().getPermanentIdentifier())), helloMessage);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1149:				.generateMACHello(new CryptoHMACSHA256(getKeyMacFor(this.registration.get().getPermanentIdentifier())), helloMessage);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/ContactProcessorTest.java:1159:	private byte[] getKeyMacFor(byte[] idA) {
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/PurgeOldEpochExpositionsProcessorTest.java:67:                ContactsProcessingConfiguration.TOTAL_REGISTRATION_FOR_PURGE_COUNT_KEY);
./robert-server-develop/robert-server-batch/src/test/java/test/fr/gouv/stopc/robertserver/batch/processor/RegistrationProcessorTest.java:80:        this.registrationItemWriter = new RegistrationItemWriter(registrationService, ContactsProcessingConfiguration.TOTAL_REGISTRATION_COUNT_KEY);
./robert-server-develop/robert-server-common/mvnw:219:    while IFS="=" read key value; do
./robert-server-develop/robert-server-common/mvnw:220:      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
./robert-server-develop/robert-server-common/mvnw.cmd:29:@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
./robert-server-develop/robert-server-common/src/main/java/fr/gouv/stopc/robert/server/common/service/impl/ServerConfigurationServiceImpl.java:17: * Facade for server configuration parameters and keys
./robert-server-develop/robert-server-crypto/mvnw:219:    while IFS="=" read key value; do
./robert-server-develop/robert-server-crypto/mvnw:220:      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
./robert-server-develop/robert-server-crypto/mvnw.cmd:29:@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/CryptoStructureConcurrentArray.java:35://        if (!this.cryptoStructureIndexByThread.containsKey(threadName)) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:11: * Callable to create encrypted key using #CryptoService
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:53:     * keysToEncrypt is corresponding to the key that would be encrypted by {@link #cryptoService}
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleCallable.java:81:     * @return the encrypted keys made by {@link #cryptoService} applied on {@link #idA}
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:3:import java.security.Key;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:24:    private final byte[] serverKey;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:26:    private final Key federationKey;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:34:    public TupleGenerator(byte[] serverKey, Key federationKey) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:35:        this.serverKey = serverKey;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:36:        this.federationKey = federationKey;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:37:        this.skinny64 =  new CryptoSkinny64(this.serverKey);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/callable/TupleGenerator.java:38:        this.aes = new CryptoAESECB(this.federationKey);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:19:     * @param cryptoForEBID instance of cryptoForEBID initialize with the KS key
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:20:     * @param cryptoForECC  instance of cryptoForECC initialize with the KS key
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:34:     * @param cryptoForEBID instance of Crypto algo to encrypt EBID with, using KS (server key)
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:52:     * @param cryptoForECC instance of Crypto algo to encrypt ECC with, using KG (federation key)
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/CryptoService.java:113:    byte[] performAESOperation(int mode, byte[] data, byte[] key);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:4:import java.security.InvalidKeyException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:13:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:173:    public byte[] performAESOperation(int mode, byte[] data, byte[] key) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:177:            SecretKeySpec skeySpec = new SecretKeySpec(key, "AES");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:180:            cipher.init(mode, skeySpec, ivspec);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImpl.java:185:                InvalidKeyException |
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/Skinny64Key.java:7: * Key schedule for Skinny64 block ciphers.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/Skinny64Key.java:10:public final class Skinny64Key {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/Skinny64Key.java:12:    /* All words of the key schedule */
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/Skinny64Key.java:19:    public Skinny64Key() {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:17:    int SKINNY64_KEY_SIZE = 3 * SKINNY64_BLOCK_SIZE;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:24:     * @param key      Key of cryption of size SKINNY64_KEY_SIZE bytes
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:27:    void setKey(final Skinny64Key ks, final byte[] key);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:35:    void clearKey(final Skinny64Key ks);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:46:    void encrypt(final byte [] output, final byte [] input, final Skinny64Key ks);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/SkinnyCipher192.java:56:    void decrypt(final byte [] output, final byte [] input, final Skinny64Key ks);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:6:import fr.gouv.stopc.robert.server.crypto.skinny64.Skinny64Key;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:10: * Skinny block cipher 'simplified' with key of 192 bits size implementation
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:50:     * @param tk Skinny64Key cells
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:52:    final private void permuteTk(final Skinny64Key.Cells tk) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:65:     * Initializes the key schedule with TK1
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:68:     * @param key      Key of cryption
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:71:    final private void setTk1(final Skinny64Key ks, final byte[] key, final int index) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:72:        final Skinny64Key.Cells tk = new Skinny64Key.Cells();
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:76:        /* Unpack the key */
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:77:        tk.setWord16(0, key, index);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:78:        tk.setWord16(1, key, index + 2);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:79:        tk.setWord16(2, key, index + 4);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:80:        tk.setWord16(3, key, index + 6);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:82:        /* Generate the key schedule words for all rounds */
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:84:            /* Determine the subkey to use at this point in the key schedule */
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:103:     * XOR the key schedule with TK2
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:106:     * @param key      Key of cryption
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:109:    final private void setTk2(final Skinny64Key ks, final byte[] key, final int index) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:110:        final Skinny64Key.Cells tk = new Skinny64Key.Cells();
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:113:        /* Unpack the key */
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:114:        tk.setWord16(0, key, index);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:115:        tk.setWord16(1, key, index + 2);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:116:        tk.setWord16(2, key, index + 4);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:117:        tk.setWord16(3, key, index + 6);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:119:        /* Generate the key schedule words for all rounds */
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:121:            /* Determine the subkey to use at this point in the key schedule */
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:133:     * XOR the key schedule with TK3
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:136:     * @param key      Key of cryption
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:139:    final private void setTk3(final Skinny64Key ks, final byte[] key, final int index) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:140:        final Skinny64Key.Cells tk = new Skinny64Key.Cells();
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:143:        /* Unpack the key */
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:144:        tk.setWord16(0, key, index);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:145:        tk.setWord16(1, key, index + 2);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:146:        tk.setWord16(2, key, index + 4);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:147:        tk.setWord16(3, key, index + 6);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:149:        /* Generate the key schedule words for all rounds */
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:151:            /* Determine the subkey to use at this point in the key schedule */
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:163:    final public void setKey(final Skinny64Key ks, final byte[] key) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:165:        if ( ( ks == null) || (key == null) ) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:166:            throw new IllegalArgumentException("setKey: Skinny64Key or key must be set");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:169:        if ( key.length != SKINNY64_KEY_SIZE ) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:170:            throw new IllegalArgumentException("setKey: key length is not valid");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:173:        setTk1(ks, key, 0);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:174:        setTk2(ks, key, SKINNY64_BLOCK_SIZE);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:175:        setTk3(ks, key, SKINNY64_BLOCK_SIZE * 2);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:179:    final public void clearKey(final Skinny64Key ks) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:182:            throw new IllegalArgumentException("clearKey: Skinny64Key must be set");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:267:    final public void encrypt(final byte[] output, final byte[] input, final Skinny64Key ks) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:268:        final Skinny64Key.Cells state = new Skinny64Key.Cells();
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:269:        Skinny64Key.Cells schedule = new Skinny64Key.Cells();
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:274:            throw new IllegalArgumentException("Encrypt: Skinny64Key must be valid");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:297:            /* Apply the subkey for this round */
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:324:    final public void decrypt(final byte[] output, final byte[] input, final Skinny64Key ks) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:325:        final Skinny64Key.Cells state = new Skinny64Key.Cells();
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:326:        Skinny64Key.Cells schedule = new Skinny64Key.Cells();
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:331:            throw new IllegalArgumentException("Decrypt: Skinny64Key must be valid");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/skinny64/impl/SkinnyCipher192Impl.java:364:            /* Apply the subkey for this round */
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:4:import java.security.InvalidKeyException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:5:import java.security.Key;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:12:import javax.crypto.SecretKey;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:14:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:23:    public static final String AES_ENCRYPTION_KEY_SCHEME = "AES";
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:31:    protected final Key keySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:34:     * @param key to be used for cipher
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:36:    public CryptoAES(byte[] key, String cipherScheme) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:38:        SecretKey keySpec = null;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:41:            // Generate encryption keySpec with server federate keySpec.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:42:            keySpec = new SecretKeySpec(key, AES_ENCRYPTION_KEY_SCHEME);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:48://                cipher.init(Cipher.ENCRYPT_MODE, keySpec, this.getAlgorithmParameterSpec());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:49:                decryptCypher.init(Cipher.DECRYPT_MODE, keySpec, this.getAlgorithmParameterSpec());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:52:                cipher.init(Cipher.ENCRYPT_MODE, keySpec);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:53:                decryptCypher.init(Cipher.DECRYPT_MODE, keySpec);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:56:        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | InvalidAlgorithmParameterException e) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:60:            this.keySpec = keySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:64:    public CryptoAES(String cipherScheme, Key key) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:66:        this.keySpec = key;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:72:                cipher.init(Cipher.ENCRYPT_MODE, key, this.getAlgorithmParameterSpec());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:75:                cipher.init(Cipher.ENCRYPT_MODE, key);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:78:        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | InvalidAlgorithmParameterException e) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:91:    public Key getSecretKey() {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoAES.java:92:        return this.keySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:4:import java.security.InvalidKeyException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:30:                this.getCipher().init(Cipher.ENCRYPT_MODE, this.getSecretKey(), algoSpec);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:33:                this.getCipher().init(Cipher.ENCRYPT_MODE, this.getSecretKey());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoCipherStructureAbstract.java:47:        } catch (IllegalBlockSizeException | BadPaddingException | InvalidKeyException | InvalidAlgorithmParameterException e) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoMacStructureAbstract.java:3:import java.security.InvalidKeyException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoMacStructureAbstract.java:19:            this.getMac().init(this.getSecretKey());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/CryptoMacStructureAbstract.java:22:        } catch (InvalidKeyException | IllegalStateException e) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:5:import javax.crypto.SecretKey;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:9:import java.security.Key;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:21:    Key getSecretKey();
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:25:     * @param arguments are the keys to be encrypted
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/ICryptoStructure.java:33:     * @param arguments are the keys to be encrypted
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:3:import java.security.InvalidKeyException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:5:import java.security.spec.InvalidKeySpecException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:6:import java.security.spec.KeySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:10:import javax.crypto.SecretKey;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:11:import javax.crypto.SecretKeyFactory;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:12:import javax.crypto.spec.DESedeKeySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:26:     * key to use to generate {@link #cipher} and {@link #key} in {@link #Crypto3DES(byte[])}
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:30:    private static final String DESEDE_ENCRYPTION_KEY_SCHEME = "DESede";
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:37:     * Should be used with the SecretKey key
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:42:     * Cipher SecretKey with DESEDE_ENCRYPTION_KEY_SCHEME
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:44:    private final SecretKey key;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:48:     * @param keyServer key generated by server at first ROBERT start.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:50:    public Crypto3DES(byte[] keyServer) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:52:        SecretKey key = null;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:55:            // Generate encryption key with server key.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:56:            KeySpec ks = new DESedeKeySpec(keyServer);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:57:            key = SecretKeyFactory.getInstance(DESEDE_ENCRYPTION_KEY_SCHEME).generateSecret(ks);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:62:        } catch (InvalidKeyException e) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:63:            log.error(String.format("key %s is not available", DESEDE_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:66:        } catch (InvalidKeySpecException | NoSuchPaddingException e2) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:67:            log.error(String.format("key %s is not available", DESEDE_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:70:            this.key = key;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:89:     * @see {@link #key}
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:93:    public SecretKey getSecretKey() {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/Crypto3DES.java:94:        return this.key;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:8:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:9:import java.security.InvalidKeyException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:10:import java.security.Key;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:17:    public CryptoAESECB(byte[] key) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:18:        super(AES_ENCRYPTION_CIPHER_SCHEME, new SecretKeySpec(key, CryptoAES.AES_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:21:    public CryptoAESECB(Key key) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:22:        super(AES_ENCRYPTION_CIPHER_SCHEME, key);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:33:            this.getDecryptCypher().init(Cipher.DECRYPT_MODE, this.getSecretKey());
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECB.java:34:        } catch (InvalidKeyException e ) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:5:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:18:     * @param key to be used for cipher
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:20:    public CryptoAESGCM(byte[] key) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:22:        super(AES_ENCRYPTION_CIPHER_SCHEME, new SecretKeySpec(key, CryptoAES.AES_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCM.java:36:            this.getDecryptCypher().init(Cipher.DECRYPT_MODE, this.getSecretKey(), this.algorithmParameterSpec);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:4:import java.security.InvalidKeyException;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:9:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:20:    public CryptoAESOFB(byte[] key) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:21:        super(AES_ENCRYPTION_CIPHER_SCHEME, new SecretKeySpec(key, CryptoAES.AES_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:36:            this.getDecryptCypher().init(Cipher.DECRYPT_MODE, this.getSecretKey(), this.algorithmParameterSpec);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFB.java:37:        } catch (InvalidKeyException | InvalidAlgorithmParameterException e ) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:6:import javax.crypto.SecretKey;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:7:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:18:    private final SecretKey key;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:22:     * @param applicationKey key shared between application and  server
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:24:    public CryptoHMACSHA256(byte[] applicationKey) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:26:        SecretKey key = null;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:28:            // Generate encryption key with server federate key.
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:29:            key = new SecretKeySpec(applicationKey, HMAC_SHA_256);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:38:            this.key = key;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:44:    public SecretKey getSecretKey() {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoHMACSHA256.java:45:        return this.key;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:4:import javax.crypto.SecretKey;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:9:import fr.gouv.stopc.robert.server.crypto.skinny64.Skinny64Key;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:20:	private static final String SKINNY_ENCRYPTION_KEY_SCHEME = "SKINNY64";
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:21:	private static final int KEY_SIZE_64 = 8;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:23:	private final Skinny64Key ks;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:27:	 * @param key key to use for cipher
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:29:	public CryptoSkinny64(byte[] key) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:30:		Skinny64Key ks = null;
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:33:		if (Objects.isNull(key)) {
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:34:			throw new IllegalArgumentException("Key may not be null");
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:38:			ks = new Skinny64Key();
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:40:			cipher.setKey(ks, key);
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:42:			log.error(String.format("Algorithm %s invalid Skinny64Key", SKINNY_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:52:		byte[] output = new byte[KEY_SIZE_64];
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:68:		byte[] output = new byte[KEY_SIZE_64];
./robert-server-develop/robert-server-crypto/src/main/java/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64.java:88:	public SecretKey getSecretKey() {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:14:import javax.crypto.spec.SecretKeySpec;
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:41:        // MOCKING ENCRYPTEDKEY
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:46:        // Application key should be 192-bits (3 x 64-bits) long because of the TripleDES key property
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:47:        final byte[] appKey = new byte[(3 * 64) / 8];
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:49:        // Server key should be 192-bits (3 x 64-bits) long because of the TripleDES key property
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:50:        final byte[] serverKey = new byte[(3 * 64) / 8];
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:52:        // Federation key should be 256-bits long.
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:53:        final byte[] federationKey = new byte[256 / 8];
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:55:        // Hazarding idA, serverKey and federationKey keys
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:58:        random.nextBytes(serverKey);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:59:        random.nextBytes(federationKey);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:60:        random.nextBytes(appKey);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:66:        final TupleGenerator tupleGenerator = new TupleGenerator(serverKey, new SecretKeySpec(federationKey, CryptoAES.AES_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:92:        final CryptoHMACSHA256 cryptoHMACSHA256 = new CryptoHMACSHA256(appKey);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:100:        // MOCKING ENCRYPTEDKEY
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:105:        // Application key should be 192-bits (3 x 64-bits) long because of the TripleDES key property
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:106:        final byte[] applicationKey = new byte[(3 * 64) / 8];
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:108:        // Server key should be 192-bits (3 x 64-bits) long because of the TripleDES key property
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:109:        final byte[] serverKey = new byte[(3 * 64) / 8];
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:111:        // Federation key should be 256-bits long.
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:112:        final byte[] federationKey = new byte[256 / 8];
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:114:        // Hazarding IDa, serverKey and federationKey keys
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:117:        random.nextBytes(serverKey);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:118:        random.nextBytes(federationKey);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:119:        random.nextBytes(applicationKey);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:125:        final TupleGenerator tupleGenerator = new TupleGenerator(serverKey, new SecretKeySpec(federationKey, CryptoAES.AES_ENCRYPTION_KEY_SCHEME));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:149:        final CryptoCipherStructureAbstract cryptoForEBID = new CryptoSkinny64(serverKey);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:150:        final CryptoCipherStructureAbstract cryptoForECC = new CryptoAESECB(federationKey);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:180:        boolean isValid = cryptoService.macHelloValidation(new CryptoHMACSHA256(applicationKey), hello);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:213:       byte [] key = ByteUtils.generateRandom(32);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:214:       byte [] encrypted = cryptoService.performAESOperation(Cipher.ENCRYPT_MODE, toEncrypt, key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/service/impl/CryptoServiceImplTest.java:218:       byte [] decrypted = cryptoService.performAESOperation(Cipher.DECRYPT_MODE, encrypted, key  );
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:23:        byte[] key = new byte[32];
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:25:        new SecureRandom().nextBytes(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:27:        CryptoAESECB cryptoToEncrypt = new CryptoAESECB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:31:        CryptoAESECB cryptoToDecrypt = new CryptoAESECB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:38:        byte[] key = new byte[32];
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:41:        new SecureRandom().nextBytes(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:43:        CryptoAESECB cryptoToEncrypt = new CryptoAESECB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESECBTest.java:47:        CryptoAESECB cryptoToEncryptModified = new CryptoAESECB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:21:        byte[] key = new byte[32];
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:23:        new SecureRandom().nextBytes(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:24:        CryptoAESGCM cryptoToEncrypt = new CryptoAESGCM(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:29:        CryptoAESGCM cryptoToDecrypt = new CryptoAESGCM(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:36:        byte[] key = new byte[32];
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:38:        new SecureRandom().nextBytes(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:39:        CryptoAESGCM cryptoToEncrypt = new CryptoAESGCM(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:47:        CryptoAESGCM cryptoToDecrypt = new CryptoAESGCM(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:53:        byte[] key = new byte[32];
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:55:        new SecureRandom().nextBytes(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:56:        CryptoAESGCM cryptoToEncrypt = new CryptoAESGCM(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESGCMTest.java:65:        CryptoAESGCM cryptoToDecrypt = new CryptoAESGCM(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:20:        byte[] key = new byte[32];
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:22:        new SecureRandom().nextBytes(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:24:        CryptoAESOFB cryptoToEncrypt = new CryptoAESOFB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:28:        CryptoAESOFB cryptoToDecrypt = new CryptoAESOFB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:36:        byte[] key = new byte[32];
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:38:        new SecureRandom().nextBytes(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:40:        CryptoAESOFB cryptoToEncrypt = new CryptoAESOFB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoAESOFBTest.java:44:        CryptoAESOFB cryptoToDecrypt = new CryptoAESOFB(key);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:16:public class CryptoSkinny64KeyTest {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:19:	 * 192-bit key
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:21:	private final byte[] key1 = {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:27:	 * 192-bit key
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:29:	private final byte[] key2 = {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:42:	 * Pre-processed encryption result of plainText with key1
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:44:	private final byte[] cipherTextWithKey1 = {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:49:	 * Pre-processed encryption result of plainText with key2
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:51:	private final byte[] cipherTextWithKey2 = {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:56:	public void testDecryptKey1Succeeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:59:		CryptoSkinny64 crypto = new CryptoSkinny64(key1);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:62:		byte[] result = crypto.decrypt(cipherTextWithKey1);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:69:	public void testDecryptKey2Succeeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:71:		CryptoSkinny64 crypto = new CryptoSkinny64(key2);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:74:		byte[] result = crypto.decrypt(cipherTextWithKey2);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:81:	public void testEncryptKey1Succeeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:83:		CryptoSkinny64 crypto = new CryptoSkinny64(key1);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:89:		assertTrue(Arrays.equals(cipherTextWithKey1, result));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:93:	public void testEncryptKey2Succeeds() throws RobertServerCryptoException {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:95:		CryptoSkinny64 crypto = new CryptoSkinny64(key2);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:101:		assertTrue(Arrays.equals(cipherTextWithKey2, result));
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:106:		CryptoSkinny64 crypto = new CryptoSkinny64(key1);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:115:		CryptoSkinny64 crypto = new CryptoSkinny64(key1);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:128:		CryptoSkinny64 crypto = new CryptoSkinny64(key1);
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:140:	public void testCipherInitNullKeyFails() {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:153:	public void testCipherInitImproperKeySizeFails() {
./robert-server-develop/robert-server-crypto/src/test/java/test/fr/gouv/stopc/robert/server/crypto/structure/impl/CryptoSkinny64KeyTest.java:157:					CryptoSkinny64 crypto = new CryptoSkinny64(Arrays.copyOf(key1, key1.length - 1));
./robert-server-develop/robert-server-database/mvnw:219:    while IFS="=" read key value; do
./robert-server-develop/robert-server-database/mvnw:220:      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
./robert-server-develop/robert-server-database/mvnw.cmd:29:@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
./robert-server-develop/robert-server-database/src/test/java/test/fr/gouv/stopc/robertserver/database/service/RegistrationServiceImplTest.java:14:import javax.crypto.KeyGenerator;
./robert-server-develop/robert-server-database/src/test/java/test/fr/gouv/stopc/robertserver/database/service/RegistrationServiceImplTest.java:15:import java.security.Key;
./robert-server-develop/robert-server-database/src/test/java/test/fr/gouv/stopc/robertserver/database/service/RegistrationServiceImplTest.java:37:		byte[] id = generateKey(5);
./robert-server-develop/robert-server-database/src/test/java/test/fr/gouv/stopc/robertserver/database/service/RegistrationServiceImplTest.java:39:			id = generateKey(5);
./robert-server-develop/robert-server-database/src/test/java/test/fr/gouv/stopc/robertserver/database/service/RegistrationServiceImplTest.java:48:			KeyGenerator keyGen = KeyGenerator.getInstance("HmacSHA256");
./robert-server-develop/robert-server-database/src/test/java/test/fr/gouv/stopc/robertserver/database/service/RegistrationServiceImplTest.java:53:			//Initializing the KeyGenerator
./robert-server-develop/robert-server-database/src/test/java/test/fr/gouv/stopc/robertserver/database/service/RegistrationServiceImplTest.java:54:			keyGen.init(secRandom);
./robert-server-develop/robert-server-database/src/test/java/test/fr/gouv/stopc/robertserver/database/service/RegistrationServiceImplTest.java:56:			//Creating/Generating a key
./robert-server-develop/robert-server-database/src/test/java/test/fr/gouv/stopc/robertserver/database/service/RegistrationServiceImplTest.java:57:			Key key = keyGen.generateKey();
./robert-server-develop/robert-server-database/src/test/java/test/fr/gouv/stopc/robertserver/database/service/RegistrationServiceImplTest.java:58:			ka = key.getEncoded();
./robert-server-develop/robert-server-database/src/test/java/test/fr/gouv/stopc/robertserver/database/service/RegistrationServiceImplTest.java:60:			log.error("Could not generate 256-bit key");
./robert-server-develop/robert-server-database/src/test/java/test/fr/gouv/stopc/robertserver/database/service/RegistrationServiceImplTest.java:65:	public byte[] generateKey(final int nbOfbytes) {
./robert-server-develop/robert-server-dataset-injector/mvnw:219:    while IFS="=" read key value; do
./robert-server-develop/robert-server-dataset-injector/mvnw:220:      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
./robert-server-develop/robert-server-dataset-injector/mvnw.cmd:29:@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/GeneratorIdService.java:3:import java.security.Key;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/GeneratorIdService.java:9:    byte[] decryptStoredKeyWithAES256GCMAndKek(byte[] storedKey, Key kek);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:23:import java.security.InvalidKeyException;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:24:import java.security.Key;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:51:        byte[] clientPublicECDHKey = Base64.decode("MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEtLhNO6Ez2Gc6H+xHCKUgVAOYk5PzQbcoNPxVvsE8IIHLQIoMlj9sj3A4oEHv8Ke/9xm9h6phSDkmficc24gJ+Q==");
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:56:                .setClientPublicKey(ByteString.copyFrom(clientPublicECDHKey))
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:72:    public byte[] decryptStoredKeyWithAES256GCMAndKek(byte[] storedKey, Key kek) {
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:73:        AlgorithmParameterSpec algorithmParameterSpec = new GCMParameterSpec(128, storedKey, 0, IV_LENGTH);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:74:        byte[] toDecrypt = new byte[storedKey.length - IV_LENGTH];
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:75:        System.arraycopy(storedKey, IV_LENGTH, toDecrypt, 0, storedKey.length - IV_LENGTH);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/GeneratorIdServiceImpl.java:82:                | InvalidKeyException | InvalidAlgorithmParameterException | IllegalBlockSizeException
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:35:import java.security.InvalidKeyException;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:36:import java.security.Key;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:70:    private byte[] serverKey;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:71:    private Key federationKey;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:88:        cryptographicStorageService.init(propertyLoader.getKeyStorePassword(), propertyLoader.getKeyStoreConfigFile());
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:89:        serverKey = cryptographicStorageService.getServerKey(epochId,serverConfigurationService.getServiceTimeStart(), false);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:90:        federationKey = cryptographicStorageService.getFederationKey();
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:174:        // retrieve the key_for_mac from crypto server
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:177:        Key clientKek = this.cryptographicStorageService.getKeyForEncryptingClientKeys();
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:179:            log.error("The clientKek to decrypt the client keys is null.");
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:189:        byte[] decryptedKeyForMac = generatorIdService.decryptStoredKeyWithAES256GCMAndKek(Base64.decode(clientIdentifier.getKeyForMac()), clientKek);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:191:        byte[] ebid = this.cryptoService.generateEBID(new CryptoSkinny64(serverKey), currentEpochId, permanentIdentifier);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:193:        byte[] encryptedCountryCode = this.cryptoService.encryptCountryCode(new CryptoAESECB(federationKey), ebid, countryCode);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:198:        messages.add(generateHelloMessageFor(decryptedKeyForMac, ebid, encryptedCountryCode, t, -78));
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:199:        messages.add(generateHelloMessageFor(decryptedKeyForMac, ebid, encryptedCountryCode, t + 165L, -50));
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:200:        messages.add(generateHelloMessageFor(decryptedKeyForMac, ebid, encryptedCountryCode, t + 300L, -35));
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:209:    private HelloMessageDetail generateHelloMessageFor(byte[] decryptedKeyForMac, byte[] ebid, byte[] encryptedCountryCode, long t, int rssi) throws Exception {
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImpl.java:234:                .generateMACHello(new CryptoHMACSHA256(decryptedKeyForMac), helloMessage);
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/utils/PropertyLoader.java:10:    @Value("${robert.crypto.server.keystore.password}")
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/utils/PropertyLoader.java:11:    private String keyStorePassword;
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/utils/PropertyLoader.java:13:    @Value("${robert.crypto.server.keystore.config.file}")
./robert-server-develop/robert-server-dataset-injector/src/main/java/fr/gouv/stopc/robertserver/dataset/injector/utils/PropertyLoader.java:14:    private String keyStoreConfigFile;
./robert-server-develop/robert-server-dataset-injector/src/main/resources/application.properties:40:# The pin of the keystore
./robert-server-develop/robert-server-dataset-injector/src/main/resources/application.properties:41:robert.crypto.server.keystore.password=${ROBERT_CRYPTO_SERVER_KEYSTORE_PASSWORD:1234}
./robert-server-develop/robert-server-dataset-injector/src/main/resources/application.properties:43:# The pin of the keystore
./robert-server-develop/robert-server-dataset-injector/src/main/resources/application.properties:44:robert.crypto.server.keystore.config.file=${ROBERT_CRYPTO_SERVER_CONFIG_FILE:C:/works/SoftHSM2/softhsm2.cfg}
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:59:        byte[] keyMac1 = GenerateIdUtils.getKeyMacFor(idA1);
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:60:        byte[] keyMac2 = GenerateIdUtils.getKeyMacFor(idA2);
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:61:        byte[] keyMac3 = GenerateIdUtils.getKeyMacFor(idA3);
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:62:        byte[] keyMac4 = GenerateIdUtils.getKeyMacFor(idA4);
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:63:        byte[] keyMac5 = GenerateIdUtils.getKeyMacFor(idA5);
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:71:        when(generatorIdService.decryptStoredKeyWithAES256GCMAndKek(any(), any()))
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:72:                .thenReturn(GenerateIdUtils.generateRandomKey())
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:73:                .thenReturn(GenerateIdUtils.generateRandomKey())
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:74:                .thenReturn(GenerateIdUtils.generateRandomKey())
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:75:                .thenReturn(GenerateIdUtils.generateRandomKey())
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:76:                .thenReturn(GenerateIdUtils.generateRandomKey());
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:81:                                .keyForMac(Base64.encode(keyMac1))
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:82:                                .keyForTuples(Base64.encode(GenerateIdUtils.generateRandomKey()))
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:87:                                .keyForMac(Base64.encode(keyMac2))
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:88:                                .keyForTuples(Base64.encode(GenerateIdUtils.generateRandomKey()))
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:93:                                .keyForMac(Base64.encode(keyMac3))
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:94:                                .keyForTuples(Base64.encode(GenerateIdUtils.generateRandomKey()))
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:99:                                .keyForMac(Base64.encode(keyMac4))
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:100:                                .keyForTuples(Base64.encode(GenerateIdUtils.generateRandomKey()))
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:105:                                .keyForMac(Base64.encode(keyMac5))
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/service/impl/InjectorDataSetServiceImplTest.java:106:                                .keyForTuples(Base64.encode(GenerateIdUtils.generateRandomKey()))
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/utils/GenerateIdUtils.java:5:import javax.crypto.KeyGenerator;
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/utils/GenerateIdUtils.java:6:import java.security.Key;
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/utils/GenerateIdUtils.java:21:    public static byte[] getKeyMacFor(byte[] idA) {
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/utils/GenerateIdUtils.java:33:    public static byte [] generateRandomKey() {
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/utils/GenerateIdUtils.java:37:            KeyGenerator keyGen = KeyGenerator.getInstance("HmacSHA256");
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/utils/GenerateIdUtils.java:42:            //Initializing the KeyGenerator
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/utils/GenerateIdUtils.java:43:            keyGen.init(secRandom);
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/utils/GenerateIdUtils.java:45:            //Creating/Generating a key
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/utils/GenerateIdUtils.java:46:            Key key = keyGen.generateKey();
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/utils/GenerateIdUtils.java:47:            ka = key.getEncoded();
./robert-server-develop/robert-server-dataset-injector/src/test/java/test/fr/gouv/stopc/robertserver/dataset/injector/utils/GenerateIdUtils.java:49:            log.error("Could not generate 256-bit key");
./robert-server-develop/robert-server-dataset-injector/src/test/resources/application.properties:25:# The pin of the keystore
./robert-server-develop/robert-server-dataset-injector/src/test/resources/application.properties:26:robert.crypto.server.keystore.password=${ROBERT_CRYPTO_SERVER_KEYSTORE_PASSWORD:1234}
./robert-server-develop/robert-server-dataset-injector/src/test/resources/application.properties:28:# The pin of the keystore
./robert-server-develop/robert-server-dataset-injector/src/test/resources/application.properties:29:robert.crypto.server.keystore.config.file=${ROBERT_CRYPTO_SERVER_CONFIG_FILE:C:/works/SoftHSM2/softhsm2.cfg}
./robert-server-develop/robert-server-ws-rest/mvnw:219:    while IFS="=" read key value; do
./robert-server-develop/robert-server-ws-rest/mvnw:220:      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
./robert-server-develop/robert-server-ws-rest/mvnw.cmd:29:@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/config/WsServerConfiguration.java:25:    @Value("${robert.jwt.privatekey}")
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/config/WsServerConfiguration.java:26:    private String jwtPrivateKey;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/config/WsServerConfiguration.java:31:    @Value("${robert.jwt.use-transient-key}")
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/config/WsServerConfiguration.java:32:    private Boolean jwtUseTransientKey;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/RegisterControllerImpl.java:85:        byte[] clientPublicECDHKey = Base64.decode(registerVo.getClientPublicECDHKey());
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/RegisterControllerImpl.java:90:                .setClientPublicKey(ByteString.copyFrom(clientPublicECDHKey))
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:3:import java.security.KeyFactory;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:4:import java.security.KeyPair;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:6:import java.security.PrivateKey;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:7:import java.security.spec.InvalidKeySpecException;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:8:import java.security.spec.PKCS8EncodedKeySpec;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:24:import io.jsonwebtoken.security.Keys;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:39:    private PrivateKey jwtPrivateKey;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:77:                    .signWith(this.getJwtPrivateKey(), signatureAlgo)
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:88:    protected PrivateKey getJwtPrivateKey() throws NoSuchAlgorithmException, InvalidKeySpecException {
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:89:        if (this.jwtPrivateKey != null)
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:90:            return this.jwtPrivateKey;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:92:        if (this.wsServerConfiguration.getJwtUseTransientKey()) {
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:93:            // In test mode, we generate a transient key
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:94:            KeyPair keyPair = Keys.keyPairFor(signatureAlgo);
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:95:            this.jwtPrivateKey = keyPair.getPrivate();
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:97:            byte[] encoded = Decoders.BASE64.decode(this.wsServerConfiguration.getJwtPrivateKey());
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:98:            KeyFactory keyFactory = KeyFactory.getInstance(signatureAlgo.getFamilyName());
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:99:            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(encoded);
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:100:            this.jwtPrivateKey = keyFactory.generatePrivate(keySpec);
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/controller/impl/ReportControllerV4Impl.java:102:        return this.jwtPrivateKey;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/dto/EpochKeyBundleDto.java:16:public class EpochKeyBundleDto implements Serializable {
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/dto/EpochKeyBundleDto.java:22:	private EpochKeyDto key;
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/dto/EpochKeyDto.java:18:public class EpochKeyDto implements Serializable {
./robert-server-develop/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/vo/RegisterVo.java:35:  private String clientPublicECDHKey;
./robert-server-develop/robert-server-ws-rest/src/main/resources/application-dev.properties:69:robert.jwt.use-transient-key=false
./robert-server-develop/robert-server-ws-rest/src/main/resources/application-dev.properties:70:robert.jwt.privatekey=${ROBERT_JWT_PRIVATE_KEY}
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:11:import java.security.Key;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:20:import javax.crypto.KeyGenerator;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:113:    private byte[] serverKey;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:126:        this.serverKey = this.generateKey(24);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:146:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:198:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:245:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:280:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:297:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:334:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:350:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:366:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:381:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:398:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:432:            KeyGenerator keyGen = KeyGenerator.getInstance("HmacSHA256");
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:437:            // Initializing the KeyGenerator
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:438:            keyGen.init(secRandom);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:440:            // Creating/Generating a key
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:441:            Key key = keyGen.generateKey();
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:442:            ka = key.getEncoded();
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:450:    private byte[] generateKey(final int nbOfbytes) {
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/DeleteHistoryControllerWsRestTest.java:510:            res[0] = this.cryptoService.generateEBID(new CryptoSkinny64(this.serverKey),
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:168:                        RegisterVo.builder().captcha("").captchaId(captchaId).clientPublicECDHKey(Base64.encode("an12kmdpsd".getBytes())).build()
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:172:                        RegisterVo.builder().captchaId(captchaId).clientPublicECDHKey(Base64.encode("an12kmdpsd".getBytes())).build()
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:176:                        RegisterVo.builder().captcha("mycaptcha").captchaId("").clientPublicECDHKey(Base64.encode("an12kmdpsd".getBytes())).build()
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:180:                        RegisterVo.builder().captcha("mycaptcha").clientPublicECDHKey(Base64.encode("an12kmdpsd".getBytes())).build()
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:184:                        RegisterVo.builder().captcha("mycaptcha").captchaId(captchaId).clientPublicECDHKey("").build()
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:196:                .clientPublicECDHKey(Base64.encode("an12kmdpsd".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:220:                .clientPublicECDHKey(Base64.encode("an12kmdpsd".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:248:                .clientPublicECDHKey(Base64.encode("an12kmdpsd".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:308:                .clientPublicECDHKey(Base64.encode("an12kmdpsd".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/RegisterControllerWsRestTest.java:354:                .clientPublicECDHKey(Base64.encode("an12kmdpsd".getBytes()))
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:14:import java.security.Key;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:22:import javax.crypto.KeyGenerator;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:132:    private byte[] serverKey;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:146:        this.serverKey = this.generateKey(24);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:167:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:201:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:244:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:284:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:316:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:353:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:386:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:427:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:459:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:492:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:533:            KeyGenerator keyGen = KeyGenerator.getInstance("HmacSHA256");
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:538:            // Initializing the KeyGenerator
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:539:            keyGen.init(secRandom);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:541:            // Creating/Generating a key
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:542:            Key key = keyGen.generateKey();
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:543:            ka = key.getEncoded();
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:551:    public byte[] generateKey(final int nbOfbytes) {
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:609:            res[0] = this.cryptoService.generateEBID(new CryptoSkinny64(this.serverKey),
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:646:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:699:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:749:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:822:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:904:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:963:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1021:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1075:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1136:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/StatusControllerWsRestTest.java:1212:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:13:import java.security.Key;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:18:import javax.crypto.KeyGenerator;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:113:    private byte[] serverKey;
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:124:        this.serverKey = generateKey(24);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:144:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:188:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:231:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:259:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:286:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:309:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:334:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:376:            KeyGenerator keyGen = KeyGenerator.getInstance("HmacSHA256");
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:379:            keyGen.init(secRandom);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:380:            Key key = keyGen.generateKey();
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:381:            ka = key.getEncoded();
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:389:    public byte[] generateKey(final int nbOfbytes) {
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:444:            res[0] = this.cryptoService.generateEBID(new CryptoSkinny64(this.serverKey),
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:456:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:500:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:539:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/java/test/fr/gouv/stopc/robertserver/ws/UnregisterControllerWsRestTest.java:560:        byte[] idA = this.generateKey(5);
./robert-server-develop/robert-server-ws-rest/src/test/resources/application.properties:66:robert.jwt.use-transient-key=true
./robert-server-develop/robert-server-ws-rest/src/test/resources/application.properties:67:robert.jwt.privatekey=${ROBERT_JWT_PRIVATE_KEY:}
