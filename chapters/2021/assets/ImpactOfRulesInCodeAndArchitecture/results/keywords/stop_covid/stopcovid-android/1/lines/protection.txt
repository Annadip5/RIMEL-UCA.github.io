stopcovid-android/framework/src/androidTest/java/com/lunabeestudio/framework/local/datasource/KeystoreDataSourceTest.kt:32:        keystore.deleteEntry("aes_local_protection")
stopcovid-android/framework/src/androidTest/java/com/lunabeestudio/framework/local/datasource/KeystoreDataSourceTest.kt:33:        keystore.deleteEntry("rsa_wrap_local_protection")
stopcovid-android/framework/src/androidTest/java/com/lunabeestudio/framework/local/datasource/KeystoreDataSourceTest.kt:37:        context.getSharedPreferences("crypto_prefs", Context.MODE_PRIVATE).edit().remove("aes_wrapped_local_protection").commit()
stopcovid-android/framework/src/androidTest/java/com/lunabeestudio/framework/local/datasource/KeystoreDataSourceTest.kt:48:        keystore.deleteEntry("aes_local_protection")
stopcovid-android/framework/src/androidTest/java/com/lunabeestudio/framework/local/datasource/KeystoreDataSourceTest.kt:49:        keystore.deleteEntry("rsa_wrap_local_protection")
stopcovid-android/framework/src/androidTest/java/com/lunabeestudio/framework/local/datasource/KeystoreDataSourceTest.kt:53:        context.getSharedPreferences("crypto_prefs", Context.MODE_PRIVATE).edit().remove("aes_wrapped_local_protection").commit()
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:67:    private val localProtectionKey: SecretKey
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:69:        get() = getAesGcmLocalProtectionKey(appContext)
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:158:    private fun getAesGcmLocalProtectionKey(context: Context): SecretKey {
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:162:            secretKey = if (keyStore.containsAlias(AES_LOCAL_PROTECTION_KEY_ALIAS)) {
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:163:                keyStore.getKey(AES_LOCAL_PROTECTION_KEY_ALIAS, null) as SecretKey
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:171:                        AES_LOCAL_PROTECTION_KEY_ALIAS,
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:192:            val wrappedAesKeyString = sharedPreferences.getString(AES_WRAPPED_PROTECTION_KEY_SHARED_PREFERENCE, null)
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:193:            if (wrappedAesKeyString != null && keyStore.containsAlias(RSA_WRAP_LOCAL_PROTECTION_KEY_ALIAS)) {
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:194:                val privateKey: PrivateKey = keyStore.getKey(RSA_WRAP_LOCAL_PROTECTION_KEY_ALIAS, null) as PrivateKey
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:213:                        .setAlias(RSA_WRAP_LOCAL_PROTECTION_KEY_ALIAS)
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:228:                    .putString(AES_WRAPPED_PROTECTION_KEY_SHARED_PREFERENCE, Base64.encodeToString(wrappedAesKey, 0))
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:256:            cipher.init(Cipher.ENCRYPT_MODE, localProtectionKey)
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:261:            cipher.init(Cipher.ENCRYPT_MODE, localProtectionKey, IvParameterSpec(iv))
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:270:        return SelfDestroyCipherOutputStream(outputStream, cipher, localProtectionKey)
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:305:        cipher.init(Cipher.DECRYPT_MODE, localProtectionKey, spec)
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:307:        return SelfDestroyCipherInputStream(inputStream, cipher, localProtectionKey)
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:317:        private const val AES_LOCAL_PROTECTION_KEY_ALIAS = "aes_local_protection"
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:319:        private const val RSA_WRAP_LOCAL_PROTECTION_KEY_ALIAS = "rsa_wrap_local_protection"
stopcovid-android/framework/src/main/java/com/lunabeestudio/framework/local/LocalCryptoManager.kt:321:        private const val AES_WRAPPED_PROTECTION_KEY_SHARED_PREFERENCE = "aes_wrapped_local_protection"
stopcovid-android/stopcovid/src/androidTest/java/com/lunabeestudio/stopcovid/manager/IsolationManagerTest.kt:26:        keystore.deleteEntry("aes_local_protection")
stopcovid-android/stopcovid/src/androidTest/java/com/lunabeestudio/stopcovid/manager/IsolationManagerTest.kt:27:        keystore.deleteEntry("rsa_wrap_local_protection")
stopcovid-android/stopcovid/src/androidTest/java/com/lunabeestudio/stopcovid/manager/IsolationManagerTest.kt:37:        keystore.deleteEntry("aes_local_protection")
stopcovid-android/stopcovid/src/androidTest/java/com/lunabeestudio/stopcovid/manager/IsolationManagerTest.kt:38:        keystore.deleteEntry("rsa_wrap_local_protection")
stopcovid-android/stopcovid/src/androidTest/java/com/lunabeestudio/stopcovid/manager/VenuesManagerTest.kt:40:        keystore.deleteEntry("aes_local_protection")
stopcovid-android/stopcovid/src/androidTest/java/com/lunabeestudio/stopcovid/manager/VenuesManagerTest.kt:41:        keystore.deleteEntry("rsa_wrap_local_protection")
stopcovid-android/stopcovid/src/androidTest/java/com/lunabeestudio/stopcovid/manager/VenuesManagerTest.kt:55:        keystore.deleteEntry("aes_local_protection")
stopcovid-android/stopcovid/src/androidTest/java/com/lunabeestudio/stopcovid/manager/VenuesManagerTest.kt:56:        keystore.deleteEntry("rsa_wrap_local_protection")
stopcovid-android/stopcovid/src/main/assets/Privacy/privacy-en.json:4:        "description": "TousAntiCovid complies with the General Data Protection Regulation.",
stopcovid-android/stopcovid/src/main/assets/Privacy/privacy-en.json:18:        "description": "The data shared between two phones over their Bluetooth connections are temporary pseudo-identifiers.\nPseudo-identifiers are renewed automatically every 15 minutes. They can be a string of numbers, letters and symbols that cannot be used on their own to identify a person.\n\nThe application shares these data with the server managed by the Ministry for Solidarity and Health, only if you have been diagnosed as a COVID-19 case and only if you give your consent. If you do, then other users’ apps can connect to the server to find out if they have been close to your phone. If they have, the users will receive an alert that they have been exposed to a contamination risk and they will be encouraged to contact their doctors.\n\nThe users receiving the alert will have no information about the phone that triggered the alert or about the owner of the phone.\n\n The app does not take account of special circumstances, such as situations where specific protection measures are in place, including the use of personal protection equipment by healthcare personnel, or separation by a pane of glass. Users can deactivate the app temporarily at any time."
stopcovid-android/stopcovid/src/main/assets/Privacy/privacy-en.json:30:        "description": "In compliance with the General Data Protection Regulation (GDPR), you can delete the data stored on your phone, the data stored on the server and the data relating to your registration, and you can cancel your registration."
stopcovid-android/stopcovid/src/main/assets/Privacy/privacy-en.json:52:                "label": "Data protection policy",
stopcovid-android/stopcovid/src/main/assets/Privacy/privacy-fr.json:4:        "description": "TousAntiCovid est conforme à la réglementation qui garantit la protection de vos données.",
stopcovid-android/stopcovid/src/main/assets/Privacy/privacy-fr.json:18:        "description": "Les données échangées entre deux téléphones via Bluetooth sont des pseudo-identifiants.\nUn pseudo-identifiant est renouvelé automatiquement toutes les 15 minutes. C’est par exemple une suite de numéros, de lettres ou de signes, qui ne permet pas par elle-même d’identifier une personne.\n\nLes données sont partagées par votre application avec le serveur, géré par le Ministère des Solidarités et de la Santé, seulement si vous avez été diagnostiqué comme un cas de COVID-19 et avec votre accord. Cela permet alors aux applications des autres utilisateurs d’interroger le serveur pour savoir si elles ont été à proximité de votre application. Si c’est le cas, les utilisateurs seront alertés qu’ils ont été exposés à un risque de contamination. Il leur sera alors recommandé de prendre contact avec leur médecin.\n\nLes personnes alertées n’auront aucune information sur le téléphone portable à l’origine de l’alerte ni sur son propriétaire.\n\nL’application ne tient pas compte des contextes spécifiques et notamment des situations où une protection spécifique est mise en place (équipement des personnels de santé, séparation par une vitre par exemple). Il est toujours possible pour l’utilisateur de désactiver temporairement l’application."
stopcovid-android/stopcovid/src/main/assets/Privacy/privacy-fr.json:30:        "description": "Conformément au règlement général sur la protection des données (RGPD), vous pouvez supprimer : les données stockées sur votre téléphone, les données sur le serveur ainsi que les données liées à votre enregistrement (et vous désinscrire)."
stopcovid-android/stopcovid/src/main/assets/Privacy/privacy-fr.json:52:                "label": "Politique de protection des données",
