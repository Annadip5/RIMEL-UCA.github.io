issue_id,issue_title,issue_description,issue_labels52636,Wiki page per repository would be useful,,[]
52214,Android vulnerability management,Hello, 
is the activation of bluetooth permanent in the application? 
Do you plan to warn users or fill the gaps that are affected by this cve?

[CVE-2020-0022](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-0022)

If the client machines are not up to date at the operating system level, this could potentially open up perspectives for an attacker to compromise them.,['Security - privacy']
52048,Cryptographic key erasure,[SSUBuilder](https://gitlab.inria.fr/stopcovid19/stopcovid-robertsdk-android/-/blob/master/domain/src/main/java/com/lunabeestudio/domain/model/SSUBuilder.kt) and [HelloBuilder](https://gitlab.inria.fr/stopcovid19/stopcovid-robertsdk-android/-/blob/master/domain/src/main/java/com/lunabeestudio/domain/model/HelloBuilder.kt) hold a key created with SecretKeySpec. As stated in this documentation : [SecreyKeySpec constructor](https://docs.oracle.com/javase/8/docs/api/javax/crypto/spec/SecretKeySpec.html#SecretKeySpec-byte:A-java.lang.String-) the key given in parameter to the SecretKeySpec constructor is copied into the new object, so this object should be cleaned by a call to [destroy](https://docs.oracle.com/javase/8/docs/api/javax/security/auth/Destroyable.html#destroy--) when not used anymore. **NB IMPORTANT : a test (during the test stage) should be done to make sure that the original key, given in the constructor parameter, is not erased consistently with the java api documentation**. 

More broadly the arrays containing the shared key (or other secrets) should be overwritten as soon as they are not used anymore.,[]
issue_id,issue_title,issue_description,issue_labels52575,Call readRemoteRssi() on the main thread,Related to: https://gitlab.inria.fr/stopcovid19/stopcovid-blesdk-android/-/blob/master/library/src/main/java/com/orange/proximitynotification/ble/gatt/BleGattClientImpl.kt#L76

`readRemoteRssi()` works in a lot of different way across all the eligible Android devices. One of the way to avoid `onReadRemoteRssi()` returning the `133` status is to put every Gatt call (like this one) into the main thread.,[]
issue_id,issue_title,issue_description,issue_labelsissue_id,issue_title,issue_description,issue_labels55603,Limit bandwidth and increase performances with Protocol Buffer,By using Protobuf instead of JSON, bandwidth usage can be significantly decreased.
For example, bytes are stored as bytes, and not as Base64 string.
It also works fine for enum, which are not strings but enum.
And more.

Even with compression (ie. Gzip), Protobuf is better.

And, for energy consumption on devices, Protobuf offers better performances than JSON.,[]
52855,External users can contribute to the project?,Hello, 

Apparently new gitlab.inria susbcribers (externals)  can't fork a project (we haven't the permission to create a new project).
Is there a way we can make some merge request?
,[]
52208,Clear JSON?,Is there anything to encrypt JSON data?

Something more secure than HTTPS only? _(open to MitM via network or mobile VPN attacks)_

An end-to-end encryption based on:

* generated public keys for client and server via HKDF
* securely stored keys in the app (private client / public server)
* salt can be based on timestamp

JSON can be encrypted with these shared keys.

And, for a better security, in-app keys can be used only once for `/register`, by providing a client public key for future exchanges.

In `/register`, server can send its own public key.

And, after that, JSON can be encrypted using new keys.

Keys can rotate after each exchange.

It becomes really difficult, after cracking HTTPS, to understand what happened.

Because everything start on the first HTTPS connection, it's difficult to obtain dynamic keys.

[Themis](https://github.com/cossacklabs/themis) open-source framework is available for Swift, Java and more.,[]
52207,API Rate Limit,Is there an API Rate Limit by client? (to avoid overflow),[]
52206,`/register`: only captcha to obtain ids?,Google CAPTCHA is good to ensure a human use the app.

But it's not a really secured authentication process.

It can be cracked by "Mechanical Turk" API. (ie. [2CAPTCHA](https://2captcha.com))

_(and, on client side, the usage of web view is potentially dangerous for runtime security)_,[]
52204,Client authentication?,Client authentication don't appear. 

No `Authorization` header or things like this.

`ES256` JWT tokens generated by client with a shared rotating key and integrating path in signature can be a good starting point?,[]
issue_id,issue_title,issue_description,issue_labels52193,Google reCAPTCHA,When using `Google reCAPTCHA` _(as presented in server part...)_, app requires a `WKWebView` component.

And this part of the app can't use SSL Pinning due to external ownership.

So it's an exposure to many potential security breaches:

* JS injection via MitM
* exploit by using a WebKit security breach, especially if iOS is not updated with last update
* replace captcha code (by MitM attack) to solve external captcha.

And, if reCAPTCHA is used for authentication _(and not human detection, its primary goal)_, it can be solved by any "Mechanical Turk" API. (I use this to automate my unit tests...)

Benefits / risks balance is not clear.,[]
52186,Some code style remarks,Code looks clean overall but I want to point out a few things:

* why not use an uninhabited type like an empty enum (enum with no cases) in **RBConstants.swift** to prevent instantiations of the `RBConstants` type ?
* in **RBManager.swift** which seems to describe a singleton, why not clearly add a private initializer to make sure that only one instance will be created ?
* you seem to retrieve timestamps in a few places (in **RBManager.swift** or **Message/MessageManager.swift**) using a helper `timeIntervalSince1900` of `Date` which returns an `Int`, so why those are wrapped again in Int values like this: `Int(Date().timeIntervalSince1900)` ?,[]
52076,OWASP MSTG,It can be a good thing to follow [OWASP MSTG](https://github.com/OWASP/owasp-mstg) for mobile security.

Especially checklists for auto-diagnostic.,['Security - privacy']
52075,`CryptoKit` integration,`CryptoKit` is more performant, easier and secured than `CommonCrypto` since iOS 13.

And iOS 13 is used by large majority of users.

It's probably possible to use `CryptoKit` "if available".,['Security - privacy']
52074,Good job 😁,Code is well written.
Syntax is clear.,[]
52073,Bluetooth messages security for privacy,It doesn't appear in source code.

What about bluetooth tracking limitation for privacy?

Did you plan to ignore some messages to avoid sniffing?
Did you plan to apply a delta in epoch generation to avoid tracking?

Thanks.,['Security - privacy']
52072,Lots of `var` declarations for non-modified values,All is described in the title: `var` can probably be replaced by `let`.
Especially in models, for security reasons.

Perhaps it's due to "develop" phase.,[]
52071,`print()` everywhere,For security reasons, `print()` should disappear. (breakpoints are also good for debugging 😉),[]
52070,Integrate as a framework,Code looks like an extraction of the app project and not a code for a framework.
So, excuse me if it's already integrated as a framework.

For runtime security, it seems to be a minimum requirement to integrate the sensitive part of the code as an internal framework.

Like this, ACL can apply securely, by limiting the risk of security error.
Only `public` or `open` code will be visible inside the sandboxed environment at runtime.
And, for example, if a malware execute runtime in the app, this protection will ensure another level of security.,[]
issue_id,issue_title,issue_description,issue_labels54879,Any documtation for installing ROBERT Server locally ?,,[]
53357,Please re-open issues that were closed,Issues #23 and #27 for instance have been closed without addressing them. 

Please re-open these issues and others like them.,[]
53092,Null pointers should not be dereferenced,The following bug report has been received through the YesWeHack public bug bounty phase.

Acknowledgements: Vincent LOUIS - Linty Services


> The following report refers to this code:
> https://gitlab.inria.fr/stopcovid19/robert-server/-/blob/08db030b079c481b4e68c785466a953403dcd4e4/robert-server-common/src/main/java/fr/gouv/stopc/robert/server/common/utils/ByteUtils.java#L44
> 
> A reference to null should never be dereferenced/accessed. Doing so will cause a NullPointerException to be thrown. At best, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or it could allow an attacker to bypass security measures.

```java
 public static byte[] addAll(byte[] a, byte[] b) {
        if (a == null) {
            byte[] copy = new byte[b.length]; // ANSSI comment: maybe check "b" here as well
            System.arraycopy(b, 0, copy, 0, b.length); 
            return copy;
        } else if (b == null) {
            byte[] copy = new byte[a.length]; 
            System.arraycopy(a, 0, copy, 0, a.length); 
        }

        byte[] res = new byte[a.length + b.length]; // A "NullPointerException" could be thrown; "b" is nullable here
        System.arraycopy(a, 0, res, 0, a.length);
        System.arraycopy(b, 0, res, a.length, b.length);
        return res;
    }
```

**ANSSI comment:**

***A quick look at the same Utils file shows other helper functions might suffer from the same issue (`bytesToLong`, `bytesToInt`, `convertEpoch24bitsToInt`), depending on calling context / assumptions.***,['ANSSI']
52937,[Server] Normalize id model property names (minor correction),In [model files](https://gitlab.inria.fr/stopcovid19/robert-server/-/blob/develop/robert-server-database/src/main/java/fr/gouv/stopc/robertserver/database/model/Registration.java), one property is permanentIdentifier but all others ids are simply called id or somethingId (`epochId`). 

Why not simply call permanentIdentifier => permanentId ?

Change
```java
	private byte[] permanentIdentifier;

```
By

```java
	private byte[] permanentId;

```,[]
52936,RSSI calibration can be used to track users,I believe rawRSSI and calibratedRSSI are broadcast in clear. From what I understand this value is only of 8bits precision, however this can still be used to track a device since the calibration value for a device remains constant. A typical application would be a shopping center using it to track people walking around. These values should be encrypted.,[]
52931,Feature request : UI "signal control page",I think it would be interesting to implement a UI dynamic page showing for example the 1 to 3 closest current signal sources together with estimated distance.

It would improve the user "friendliness" of the app and allow every user to check :

- that the system is somehow functional working,
- the remarkable quality of the distance estimation that is provided by this app (currently based on RSSI strength measurements and accurate calibrations),[]
52831,REST server is leaking monitoring data,It's really cool that you started using Spring Boot Actuator to monitor your data (it wasn't the case a couple of days ago!), but as you don't use Spring Security, this means the monitoring endpoints are available to the outside world.

In your configuration file https://gitlab.inria.fr/stopcovid19/robert-server/-/blob/develop/robert-server-ws-rest/src/main/resources/application.properties#L42 we see that by default you expose the "health" and "metrics" endpoints. The first one isn't probably very dangerous, but I wouldn't expose the second one, you can have lots of things being exposed through it.

You should either add Spring Security, or block this endpoint (just block "/actuator/*") on your gateway/reverse proxy. Or do both, just in case :-),[]
52830,ClientIdentifier keys are not being deleted in the database,When a user unregisters, he sends a "deleteId" command to the GRPC server. This server then deletes this data from the PostgreSQL database.
However, when the ClientIdentifier keys gets deleted, it is in fact saved in an audit table, as you can see on this line:
https://gitlab.inria.fr/stopcovid19/robert-server/-/blob/develop/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/database/model/ClientIdentifier.java#L23

That's the "@EntityListeners(AuditingEntityListener.class)" annotation that saves everything that has been changed in the audit table, as well as a timestamp.

I believe that when a user wants his data deleted, you should delete all of it.,[]
52823,Please tag version before starting prod (shoud be duplicated for ios and android apps),Please tag the robert-server and ios / android mobile applications in order to allow checks between playstore released versions and source code.,[]
52821,ROBERT_PROTOCOL_CONTAGIOUS_PERIOD value,According to Article 2 point 6 in legal publication about stopcovid :
https://www.legifrance.gouv.fr/affichTexteArticle.do?cidTexte=JORFTEXT000041936881&idArticle=JORFARTI000041936888&categorieLien=cid

the value at

https://gitlab.inria.fr/stopcovid19/robert-server/-/blob/4f349d6922ae8bf26cf1ac395683faf3c8afd457/robert-server-ws-rest/src/main/resources/application.properties#L44

should rather be set to 15 than 14.,[]
52807,Compilation error in CryptographicStorageServiceImpl,Hi all, 
I checked-out the latest version of the branch 'develop' (https://gitlab.inria.fr/stopcovid19/robert-server/-/commit/97c49841b75b326c2fc35ef56d6215d908ca6ee0), ran 'mvn clean compile' and got the following error:

```
[INFO] -------------------------------------------------------------
[ERROR] COMPILATION ERROR : 
[INFO] -------------------------------------------------------------
[ERROR] /home/stephane/Documents/assembloo/engineering/repositories/stopcovid/robert-server/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:[78,43] incompatible types: java.lang.String cannot be converted to sun.security.pkcs11.Config
[INFO] 1 error
[INFO] -------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary for robert-server 1.0.0-SNAPSHOT:
[INFO] 
[INFO] robert-server ...................................... SUCCESS [  0.803 s]
[INFO] robert-crypto-grpc-server-messaging ................ SUCCESS [  3.913 s]
[INFO] robert-server-common ............................... SUCCESS [  0.567 s]
[INFO] robert-server-database ............................. SUCCESS [  0.787 s]
[INFO] robert-server-crypto ............................... SUCCESS [  0.559 s]
[INFO] robert-server-ws-rest .............................. SUCCESS [  1.295 s]
[INFO] robert-server-batch ................................ SUCCESS [  0.423 s]
[INFO] robert-crypto-grpc-server-storage .................. FAILURE [  0.638 s]
[INFO] robert-crypto-grpc-server .......................... SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  9.398 s
[INFO] Finished at: 2020-06-01T07:54:17+02:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile (default-compile) on project robert-crypto-grpc-server-storage: Compilation failure
[ERROR] /home/stephane/Documents/assembloo/engineering/repositories/stopcovid/robert-server/robert-crypto-grpc-server-storage/src/main/java/fr/gouv/stopc/robert/crypto/grpc/server/storage/cryptographic/service/impl/CryptographicStorageServiceImpl.java:[78,43] incompatible types: java.lang.String cannot be converted to sun.security.pkcs11.Config
[ERROR] 
```

For information I am using JDK11.
I believe that this issue is related to using SunPKCS11 directly. It seems that it preferable to use Security.getProvider("SunPKCS11") as specified in the doc: 
https://docs.oracle.com/javase/9/security/pkcs11-reference-guide1.htm#JSSEC-GUID-97F1E537-CB59-4C7F-AB6B-05D4DBD69AC0

This issue can be fixed by replacing line 78 with this one:

> this.provider = Security.getProvider("SunPKCS11").configure(configFile);
and removing the import SunPKCS11,['CODE - FIX']
52806,Compilation error when running mvn clean compile,Hi all, 
I checked-out the latest version of the branch 'develop', ran 'mvn clean compile' and got the following error:

```
[INFO] -------------------------------------------------------------
[ERROR] COMPILATION ERROR : 
[INFO] -------------------------------------------------------------
[ERROR] /home/stephane/Documents/assembloo/engineering/repositories/stopcovid/robert-server/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/service/impl/AuthRequestValidationServiceImpl.java:[10,20] package javax.xml.ws does not exist
[INFO] 1 error
[INFO] -------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary for robert-server 1.0.0-SNAPSHOT:
[INFO] 
[INFO] robert-server ...................................... SUCCESS [  0.890 s]
[INFO] robert-crypto-grpc-server-messaging ................ SUCCESS [  3.590 s]
[INFO] robert-server-common ............................... SUCCESS [  0.492 s]
[INFO] robert-server-database ............................. SUCCESS [  0.692 s]
[INFO] robert-server-crypto ............................... SUCCESS [  0.509 s]
[INFO] robert-server-ws-rest .............................. FAILURE [  1.079 s]
[INFO] robert-server-batch ................................ SKIPPED
[INFO] robert-crypto-grpc-server-storage .................. SKIPPED
[INFO] robert-crypto-grpc-server .......................... SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  7.780 s
[INFO] Finished at: 2020-06-01T07:14:43+02:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile (default-compile) on project robert-server-ws-rest: Compilation failure
[ERROR] /home/stephane/Documents/assembloo/engineering/repositories/stopcovid/robert-server/robert-server-ws-rest/src/main/java/fr/gouv/stopc/robertserver/ws/service/impl/AuthRequestValidationServiceImpl.java:[10,20] package javax.xml.ws does not exist
```


This is related to a missing entry in the pom file

Adding the following dependency to robert-server-ws-rest/pom.xml fixes the issue:
```
<dependency>
    <groupId>javax.xml.ws</groupId>
    <artifactId>jaxws-api</artifactId>
</dependency>
```

For information, I am running Ubuntu 20.04,[]
52799,Upload of risk scores,The [document referenced](https://hal.inria.fr/hal-02641630) in #22 states the following:

> Note that according to Robert protocol, Risk scores are kept on the phone, unless the user is tested positive.

(p. 3)

and

> The scores associated to the temporary received Ids are sent to the server by the mobile, when the owner is declared infected.

(p. 4)

Is it confirmed through an official source that the risk scores would be uploaded as well?

Thanks to user @_Matioupi_ for flagging the issue when discussing #22.,[]
52780,Mixnet missing (specification and implementation),It seems that mixnets will be used in order to prevent the server from learning the link betwen an element in the contact list (LocalProximityList) and the user (mobile app) that has recorded this contact. The statement of the CNIL (n° 2020-056 of May 25th 2020) relies precisely on the assumption that the server cannot know the contact list of an infected user (see point 41).

Mixnets are only vaguely mentionned in the ROBERT specification as one possible solution.
Some mixing seems envisionned in the implementation but is marked as todo:
"TODO: implement a multiplexing queue with random delays in order to mix the treatment of LocalProximityList elements."
https://gitlab.inria.fr/stopcovid19/accueil/-/blob/master/documentation/robertImplementationModalities.txt

Issue: the specification of mixnets is missing. Their implementation seems missing as well.

Questions:
- Will mixnets be implemented before the deployment of the application? If not, when it is planned?
- What kind of mixnets will be considered? What is the articulation with the "authentication" of the contact list through the code given by the doctor when Alice has a positive test? How the mixers will learn the valid codes and the already used code? What are the delays when mixing?
Mixnets actually form a real protocol, a specification is needed. When the specification of ROBERT will be updated with the specification of mixnet?
- What kind of infrastructure is planned? How many servers? Administrated by who? What independence?,['Security - privacy']
52757,Data collection surrounding the server application,To my best knowledge, there are no information regarding data which will be collected outside of the application : server logs, network logs, proxys, etc.

Such information include source IP and port, but may also include some technical details of the device in request headers.

Logging is a basic security practice and I would be surprised if there was no logging at all. If there is some logging, logging granularity/details must be revealed, as they could be in contradiction with announced privacy properties.

Logging IP, ports or even hashes of these data is not privacy-preserving, as many previous work of the scientific privacy community have shown. Details should thus be published for the overall transparency of the process surrounding the small part of the server application.,['ANSSI', 'Security - privacy']
52748,Sybil attack - Multiple accounts to identify infected people,In the risk analysis published by the Robert team ( https://github.com/ROBERT-proximity-tracing/documents/blob/master/Proximity-tracing-analysis-EN-v1_0.pdf ), risk IR1 is "Identify infected individuals". It is stated as one of the most important risks of proximity tracing and lowering this risk has been one of the most expected and revendicated benefits of Robert against decentralized approaches / DP3T.

In this document we can read "In the centralized approach, this de-anonymization attack [...] implies the need to register another account. The cost of this operation would depend on the adopted countermeasures (e.g., proof of work, or anonymous tokens delivered from an trusted party)"

In other words, if an attacker can create many accounts, authors recognize that the centralized approach looses this expected benefit. In other words too, preventing attackers from creating several accounts is required by the team which designed Robert.

In the current implementation, I could not find such protections :
* IP/Ports of users should probably not be logged, it would go against other requirements of the Robert team (to prevent re-identification)
* A captcha is not a solution to prevent multiple accounts creation. It is easy to solve a few tens of captchas manually (which is sufficient in this case) or to buy lots of captha resolution (dedicated mechanical turks)

Am I missing something ? As far as I understand, this critical issue (regarding the published privacy properties) is not yet addressed. How will it be addressed ?

Best regards,,['Security - privacy']
52742,Remove id from log,[This log.info](https://gitlab.inria.fr/stopcovid19/robert-server/-/blob/develop/robert-server-batch/src/main/java/fr/gouv/stopc/robert/server/batch/processor/ContactProcessor.java#L130) in ContactProcessor logs an `idA` when not found in the system. It would be better to not log the `idA` value for the case it was used previously as a valid id.,['ANSSI']
52634,Field trials results,In a spirit of scientific and engineering transparency, the field trial data and analysis should be published, in order for external scientists and engineers to review the efficiency and reliability of the application in identifying contacts.,['OPEN-DATA']
52632,Field trials method,In a spirit of scientific and engineering transparency, the field trial(s) methodology described in the stopcovid communication should be published.

This includes: 
- Goals (and hypotheses) of the trials
- Physical context (Subway, supermarkets, offices...), ideally with maps/diagrams of the layout 
- Apparatus (devices, os, software and hardware configuration, e.g. which radio emitting chips were active)
- Participants (how many)
- Scenarios
- Data collection procedure
- Analysis scripts
,['OPEN-DATA']
52497,Out-of-date dependencies,[pom.xml](https://gitlab.inria.fr/stopcovid19/robert-server/-/blob/develop/pom.xml) declares out-of-date dependencies usage:
*  [protobuf](https://gitlab.inria.fr/stopcovid19/robert-server/-/blob/develop/pom.xml#L46): `3.11.0 -> 3.12.1`,
*  [spring-boot](https://gitlab.inria.fr/stopcovid19/robert-server/-/blob/develop/pom.xml#L18): `2.2.6.RELEASE -> 2.3.0.RELEASE`. Note that this newer version contains several bug fixes and security fixes.,['ANSSI']
issue_id,issue_title,issue_description,issue_labels66867,BUG DE SURFACE,Ce bug de surface n’impacte pas directement la finalité opérationnelle de l’application. (envoyer autant de notifications pertinentes que possible).
Toutefois il importe d’apporter une correction très rapidement afin d’éviter l’accélération d'un rejet par la population. Donc un effet indirect délétère, mesurable en pertes humaines.
![Bug_AntiCovid_seventies](/uploads/f1e49e5f2295f239fca91e6d7d73a74c/Bug_AntiCovid_seventies.jpg)

![BugAntiCovid_STOP](/uploads/8d4542ea6056d04af9180938b4eb416f/BugAntiCovid_STOP.jpg),[]
66124,(Problèmes de) sécurité du protocole TAC-WARNING,D'après le [décret n°2021-157 du 12 février 2021](https://www.legifrance.gouv.fr/jorf/id/JORFTEXT000043131033), TousAntiCovid va intégrer un système de QR-codes dans les lieux publics, pour alerter les personnes co-exposées, c'est-à-dire les personnes s'étant trouvée dans le même lieu qu'un malade.  D'après [l'avis de la CNIL sur le décret](https://www.legifrance.gouv.fr/jorf/id/JORFTEXT000043131271), le protocole utilisé s'appelle TAC-WARNING, mais je ne trouve pas la description du protocole ni son analyse de sécurité, malgré les promesses de transparence de l'Équipe-Projet StopCovid/TousAntiCovid, et les appels répétés de la CNIL à interagir avec la communauté scientifique.

Cependant, l'application intègre cette fonctionnalité (pour l'instant désactivée) depuis la version 2.2.0 du 16 décembre, et l'avis de la CNIL contient une description succincte du fonctionnement du système.  À partir de ces éléments, j'ai essayé de reconstruire le protocole TAC-WARNING, et d'analyser son impact sur la protection des données personnelles.  Sauf erreur, ce protocole révèle au serveur énormément d'information sur la vie privée des utilisateurs, même s'ils ne sont pas co-exposés.  Cela ne correspond pas du tout à la [promesse de départ](https://www.inria.fr/fr/contact-tracing-bruno-sportisse-pdg-dinria-donne-quelques-elements-pour-mieux-comprendre-les-enjeux): «sa conception permet que PERSONNE, pas même l’Etat, n’ait accès à la liste des personnes diagnostiquées positives ou à la liste des interactions sociales entre les personnes».

# Description du protocole

Le protocole semble fonctionner ainsi:

0. Le responsable d'un lieu public génère un QR-code avec un identifiant aléatoire (UUID);
1. L'utilisateur qui entre dans un lieu public scanne le QR-code, et l'appli enregistre l'UUID avec un timestamp (horodatage).  Il calcule aussi une version masquée de l'UUID (SHA256(sel+UUID) avec un sel aléatoire);
2. Si un utilisateur est malade, il envoie au serveur central sa liste de UUID + timestamp;
3. Régulièrement, les utilisateurs envoient les UUID masqués + timestamp de leur liste.  Le serveur vérifie si un des UUID est à risque pendant la période correspondante (pour chaque UUID envoyé par un malade, il calcule SHA256(sel+UUID) avec tous les sels possibles).

Grace au masquage des UUID avec un sel, ce protocole permet de ne pas révéler les UUID visités par les personnes qui ne sont pas à risque.

# Contexte général

Les données de traçage, même non-nominatives, sont des données personnelles au sens du RGPD.  Il faut donc mettre en place des protocoles qui permettent de minimiser la collecte de ces données.  Le status de malade de la COVID-19 n'est pas une information très sensible en général, mais plusieurs exemples montrent que cette information peux avoir un impact important:
- au début de l'épidémie, certains soignants ont [reçus des menaces](https://www.huffingtonpost.fr/entry/des-soignants-menaces-par-leurs-voisins-la-police-lance-un-appel-a-signalement_fr_5e89e0ddc5b6cbaf282ae7c9) de la part de leurs voisins;
- en Corée du Sud, un [cluster dans un club gay](https://www.franceculture.fr/emissions/revue-de-presse-internationale/la-revue-de-presse-internationale-emission-du-lundi-11-mai-2020) a déclenché une vague d'homophobie.

Comme avec le protocole ROBERT utilisé pour la partie Bluetooth de TousAntiCovid, il y a deux [risques principaux](https://risques-tracage.fr/): traçage des utilisateurs, et injection de fausses alertes.  Ces systèmes ne collectent pas l'identité des utilisateurs, mais certains utilisateurs peuvent être identifiés en utilisant des données en dehors du protocole.  En particulier, le serveur connait leurs adresses IP, et pourrait les réidentifier avec l'aide des fournisseurs d'accès Internet.  

Même si on considère l'État comme un tiers de confiance, les données peuvent être détournées:
- Singapour a changé sa législation pour [donner à la police accès aux données de traçage](https://www.numerama.com/tech/679961-les-donnees-du-tousanticovid-singapourien-peuvent-etre-utilisees-par-la-police.html);
- il peut y avoir une fuite de la base de données, comme [aux Pays-Bas](https://www.latribune.fr/economie/union-europeenne/aux-pays-bas-les-donnees-de-personnes-testees-au-covid-19-revendues-sur-internet-875546.html).

# Risque 1: le serveur connaît les horodatages des QR-codes

Même si les UUID sont masqués, le serveur central reçoit les timestamp (horodatages) en clair: il sait combien de QR-codes un utilisateur a scanné et quand.  Il peut par exemple repérer tous les QR-codes scannés après le couvre-feu.

# Risque 2: le serveur apprend les interactions sociales

Si le serveur central arrive à déterminer quels UUID masqués correspondent au même UUID en clair, il peut en déduire quel utilisateurs étaient au même endroit au même moment, même si aucun d'entre eux n'est malade.  Il y a au moins deux façons de reconstruire ces interactions par le serveur.

## A. Le masquage est trop faible

Dans la version actuelle, le sel utilisé pour masquer les UUID [fait seulement 1 bit](https://gitlab.inria.fr/stopcovid19/stopcovid-android/-/blob/2203d3366eea8f0ddc9ad9471073a85b36369f6c/stopcovid/src/main/assets/Config/config.json#L97).  Cela signifie que si deux utilisateurs scannent le même QR-code, dans 50% des cas l'UUID sera masqué de la même façon, et le serveur apprend que les deux personnes étaient dans le même lieux.

## B. Fuite d'UUID

Le système suppose que les UUID restent inconnus du serveur tant qu'il n'y a pas de malade dans le lieu public correspondant.  Quand il apprend un UUID, le serveur peux retrouver tous les utilisateurs qui l'ont visité, même si le masquage est suffisamment fort (c'est nécessaire pour alerter les personnes à risques).  Le serveur peux connaître des UUID de plusieurs manières:

- Les QR-codes encodent une URL de la forme https://tac.gouv.fr/UUID.  Si un utilisateur scanne le QR-code et suit le lien avec un navigateur web au lieu de scanner le code dans l'application, l'UUID correspondant est envoyée au serveur tac.gouv.fr.

- Un UUID est envoyé au serveur dès qu'une personne l'ayant scannée est malade.  Avec le taux d'incidence actuel (200/100000/semaine), c'est le cas s'il est scanné par environ 500 utilisateurs TAC pendant sa durée de vie (parce qu'un utilisateur envoie environ 1 semaine d'historique quand il est testé positif).  Donc si le système est assez utilisé pour être utile, une grande partie des UUID seront envoyés au serveur (à moins que les QR-codes ne soient renouvelés assez fréquemment).

- Comme indiqué au risque 3 ci-dessous, des agents de l'État pourraient facilement scanner les QR-code dans les lieux publics et envoyer les UUID au serveur.

# Risque 3: le serveur peux reconstruire les trajets des utilisateurs

L'État pourrait facilement construire une base de données de QR-codes dans les lieux publics (restaurants, cinémas, gares, ...), avec la localisation correspondante et l'UUID.  Une fois cette base de donnée construite, le serveur central peux reconstruire les déplacements de tous les utilisateurs du système (même s'il n'y a pas de malades).  Cela permettra aussi d'identifier certains utilisateurs (en identifiant leur lieu de travail, par exemple).

# Risque 4: les utilisateurs peuvent identifier les lieux à risque

L'architecture centralisée de ce protocole permet d'éviter de publier une liste des lieux à risques (c'est son principal avantage par rapport au système décentralisé).  Cependant, il est facile d'interroger le serveur pour demander si un lieu est à risque.  Des utilisateurs peuvent ainsi créer une application alternative qui calcule le niveau de risque avant de rentrer dans un lieu public.  Il suffit de scanner le QR-code à l'entrée, puis d'envoyer des requêtes de calcul d'exposition au risque avec cet UUID et différents timestamps.  Si le QR-code n'est pas changé régulièrement, cela révèle les horaires auquel le lieu a été visité par des malades.

# Utilisation du protocole

Ces risques sont plus ou moins grave suivant les contextes dans lesquels ce système est déployé, mais on ne sait pas encore quelle est l'utilisation envisagée.  Les QR-codes serviront peut-être d'alternative aux cahiers de rappel dans les restaurants ou les cinémas, ou de complément au traçage Bluetooth dans des lieux de passage (centre commerciaux, transports en communs).  On ne sait pas non plus quelle sera la durée de vie des QR-codes.  Les risques (notamment 2B, 3 et 4) sont réduits si les QR-codes sont renouvelés fréquemment, mais cela demande d'installer des écrans (alors qu'un QR-code statique peut être imprimé sur une affiche).

En tout état de cause, les cahiers de rappel papier sont une solution plus respectueuse de la vie privée, car les informations restent locales et ne sont pas centralisées.  Des données centralisées permettent au serveur de faire des recoupements pour apprendre le graphe social, et augmentent énormément le risque de fuite de données.

Avant de déployer ce système, il faut débattre des avantages espérés et des risques possibles.  De façon générale, on demande une étude clinique avant de déployer tout ce qui touche à la santé, pour évaluer les effets positifs ou négatifs, et les utilisateurs sont informés des effets secondaires.  Ce type d'étude n'a toujours pas été publié pour le traçage Bluetooth de TousAntiCovid, et n'a probablement pas encore été fait pour le traçage par QR-code.  Il serait bon d'évaluer les outils déjà déployés avant d'en créer de nouveaux.,[]
66040,Actualisation du repository Version 2.2.5 #152 - code non publié.,Bonjour, Le code actualisé à la version 2.2.5 #152 ne semble pas être disponible ici. Nous souhaiterions que vous mettiez à jour le repository. Les contributeurs externes souhaitent exprimer leur solidarité constructive jusqu'au bout. Je les accompagne.
Merci.,[]
63143,Before update 2.2.1 #132 - No EphemeralBlueToothIdentifier found,Certains utilisateurs rencontrent un message d’erreur dont la signification peut échapper au non initié. Après avoir procédé à une mise à jour de TousANtiCovid, ce problème ne réapparaît pas. Il faut noter que la mise à jour a dû être appliquée manuellement. Ce n’est pas un cas isolé.
Les mises à jour ne sont pas automatiques.
https://twitter.com/Olive_Free/status/1353599998076841986
https://twitter.com/syst_mg/status/1353764381067272192
![PB_TousANtiCovid](/uploads/4f1ca1c4b52d88fa3ad11d67240666b2/PB_TousANtiCovid.jpg)
![image](/uploads/feb95ebbb2b2cae90e643c7419c4da23/image.png),[]
63140,Impossible de fournir de crypto-identifiant,Je ne sais pas les circonstances qui ont provoqué ça, mais c'est la deuxième fois que ça arrive:

![54c60430_qLZDcSxCRkapU0SGjWGChQ](/uploads/a15540f8a5bdc41b0a717c6f4c285caa/54c60430_qLZDcSxCRkapU0SGjWGChQ.jpg)

La première fois j'ai « résolu » le problème en vidant les données de l'application, mais j'imagine que ça rend le traçage des cas contact des jours passés inopérant.

J'ai la dernière version officielle de LineageOS pour mon Xiaomi Redmi Note 4 (mido), sans les services Google. Je veux bien aider à debugger le problème mais je n'y connais rien en dev Android, donc il faudra probablement m'aiguiller.,[]
62958,P20 Pro crash on startup, (android 10),Whenever I open the app, it closes right away.
I did not try to reinstall the app so we can investigate the issue.

Here is a filtered adb logcat which only includes lines with 'stopcovid'.

This is the output of logcat when i launch the app.

The issue seems to be around line 96

https://pastebin.com/tRbvBJ9L,[]
62889,CVE-2020-35693,Hi, I'd just like to point out a recent CVE (CVE-2020-35693) that may affect TousAntiCovid (Android version). It is a firmware bug (or 'feature', depending on who you ask) affecting Samsung mobile devices running Android 7.1.1 or earlier, allowing anyone to pair with a vulnerable device if the device is advertising a connectable GATT service (just like TousAntiCovid does). 

https://github.com/alwentiu/contact-tracing-research/blob/main/samsung.pdf

I am not sure if it's possible to mitigate this issue from within the app, but thought I should post it here so at least users will be aware of this potential issue. Since this affects only old Samsung devices, hopefully it will not have a significant impact (but note that I'm not knowledgeable of the market share of those devices in France).  

A bit of context of this bug: I discovered this while examining the Australian contact tracing app COVIDSafe (that's also affected). Only recently I thought of checking other related apps and discovered that TousAntiCovid suffered the same issue. For some reason I previously thought TousAntiCovid (or StopCovid) did not use a connectable advertisement (as it seems that the payload is embedded in the advertisement data -- why do you still need to make the advertisement connectable?). Samsung has said they have no plan to fix this bug.,[]
62828,QR-codes dans certains lieux publics,Bonjour,
Il y a apparemment un projet d'ajouter à TousAntiCovid un fonctionnalité de scan de QR-codes dans les lieux public.  Cette évolution est mentionnée dans l'[avis du CCL COVID-19](https://solidarites-sante.gouv.fr/IMG/pdf/avis_du_ccl_du_15.12.20.pdf), et l'info a été reprise par la presse [[1]](https://www.numerama.com/tech/682320-scanner-des-qr-codes-avec-tousanticovid-les-questions-que-souleve-cette-idee-du-gouvernement.html) [[2]](https://www.lemonde.fr/pixels/article/2021/01/19/tousanticovid-vers-des-qr-codes-dans-certains-lieux-publics-a-risque_6066804_4408996.html).

Y-a-t-il un protocole décrit quelque part?  Quel est l'impact en terme de vie privée?  Y aura-t-il une discussion au parlement pour parler de cette évolution?

Ce n'est probablement pas le bon endroit pour poser cette question, mais comme il n'y en a pas de meilleur, je la pose ici.  Au vu des autres bugs resté ouverts, je n'aurais probablement pas de réponse, mais je pense qu'il est quand même important de la poser... StopCovid a été vendu sur sa transparence et son respect de la vie privée au printemps, c'est dommage d'avoir autant reculé. D'ailleurs, le projet de décret supprimerait aussi l'obligation de publier un rapport sur le fonctionnement de l'application au 31 janvier.,[]
61764,Absence de passage automatique à la version 2.2.0#126,J'ai du appliquer une mise à jour manuelle. Jusqu'à présent, les mises à jour étaient automatiques. La plupart des utilisateurs ne penseront pas à regarder quel est le numéro de la version qu'ils ont sur leur appareil. Ils seront encore moins nombreux à effectuer une manipulation "technique".
Par sécurité, il serait tout indiqué de vérifier que l'application est à jour à chaque transaction avec le serveur.
Ce point important nécessite une communication publique sans tarder.,[]
58852,Tuning of the core parameters / requested clarification,On comprend que les constantes définies dans l’extrait ci-dessous ont une incidence significative sur la sensibilité et donc sur la performance de la solution #TousAntiCovid, 

`
const val BLE_FILTER_CONFIG: String = "{
\"a\":4.3429448190325175,
\"b\":0.1,\"deltas\":[39.0,27.0,23.0,21.0,20.0,19.0,18.0,17.0,16.0,15.0],
\"durationThreshold\":120,
\"p0\":-66.0,
\"rssiThreshold\":25,
\"timeOverlap\":60,
\"timeWindow\":120,
\"riskThreshold\":0.1}"
`


On observe que la valeur de la plupart de ces constantes est recopiée à de nombreux endroits dans le code. Il semblerait d’ailleurs que ces « réglages » n’aient pas évolué depuis plusieurs mois.
On doit s’interroger sur :
-	La possibilité d’optimiser ces valeurs
-	La méthode qui doit être employée pour procéder aux optimisations
-	La réactivité avec laquelle on sera capable de procéder à des mises à jour à effet immédiat.
-	L’opportunité d’envisager un mécanisme capable d’ajuster automatiquement certaines valeurs en fonction du contexte.,[]
58640,key-figures.json is broken (when "health" data not fetched correctly),
https://app.stopcovid.gouv.fr/infos/key-figures.json

=>

```
[
	{
		"labelKey" : "keyfigure.registered",
		"category" : "app",
		"valueGlobalToDisplay" : "5122034",
		"valueGlobal" : 5122034,
		"isFeatured" : false,
		"lastUpdate" : 1603994578
	},
	{
		"labelKey" : "keyfigure.notification",
		"category" : "app",
		"valueGlobalToDisplay" : "2006",
		"valueGlobal" : 2006,
		"isFeatured" : false,
		"lastUpdate" : 1603994578
	},
	{
		"labelKey" : "keyfigure.qrcodes",
		"category" : "app",
		"valueGlobalToDisplay" : "23751",
		"valueGlobal" : 23751,
		"isFeatured" : false,
		"lastUpdate" : 1603994578
	},
	{
		"labelKey" : "keyfigure.nombrecas",
		"category" : "health",
		"valueGlobalToDisplay" : "",
		"valueGlobal" : ,
		"valuesDepartments" : [],
		"isFeatured" : true,
		"lastUpdate" : ,
		"trend" : 
	},
	{
		"labelKey" : "keyfigure.reffectif",
		"category" : "health",
		"valueGlobalToDisplay" : "",
		"valueGlobal" : ,
		"valuesDepartments" : [

],
		"isFeatured" : false,
		"lastUpdate" : ,
		"trend" : 
	},
	{
		"labelKey" : "keyfigure.tauxincidence",
		"category" : "health",
		"valueGlobalToDisplay" : "",
		"valueGlobal" : ,
		"valuesDepartments" : [

],
		"isFeatured" : true,
		"lastUpdate" : ,
		"trend" : 
	},
	{
		"labelKey" : "keyfigure.tauxpositivite",
		"category" : "health",
		"valueGlobalToDisplay":"%",
		"valueGlobal": ,
		"valuesDepartments" : [

],
		"isFeatured" : false,
		"lastUpdate" : ,
		"trend" : 
	},
	{
		"labelKey" : "keyfigure.tauxoccupation",
		"category" : "health",
		"valueGlobalToDisplay" : "%",
		"valueGlobal" : ,
		"valuesDepartments" : [

],
		"isFeatured" : true,
		"lastUpdate" : ,
		"trend" : 
	}
]
```,[]
58637,Problem with data display on P20 pro,Hello
Even with an internet connection, sometimes data fails to display/refresh on the P20 Pro.

See the attached screenshots. 

Android version : 10
App version : 2.0.1 #74


![Screenshot_20201029_195104](/uploads/9becb0c658181e4b2a55b5ab9193fd4f/Screenshot_20201029_195104.jpg)![Screenshot_20201029_195038](/uploads/2d6298c1575e03f3835b125514390148/Screenshot_20201029_195038.jpg)![Screenshot_20201029_195015_fr.gouv.android.stopcovid](/uploads/d5aca43e7ec52e95c70c84d010d47c5d/Screenshot_20201029_195015_fr.gouv.android.stopcovid.jpg),[]
58632,Problem with the audio-captcha passing, when talkback is activated,In the current StopCovid version (2.0.1), there is a problem with activation by audio-captcha, if the Talkback is activated on the older versions of Android (6.0). 
Here is my small patch file to fix this issue. Should work well with all Talkback/Android versions.[stopcovid.diff](/uploads/f9826309fbcd6ac8ac625a45c93d4d17/stopcovid.diff),[]
58475,UX: 10 seconds of blank screen before actually starting,If I click on the app icon from scratch, I see a splash screen during about one second, then a blank white screen during about 10 seconds (sometimes up to 20 seconds), then the "normal" app screen ("désactivé" / "activer" / "infos"...)

Whatever is done in the init should be done async or at least the progress should be shown.
The way it is now is very discouraging for end users.,[]
58467,Commits in this project provides very little information,The latest commits in this project are only "bumps" in the version number and are not using properly the version control software.

As a user pointed it here: https://gitlab.inria.fr/stopcovid19/stopcovid-android/-/commit/c164508789d82695b2e0298c5d549f69c1e711b1#note_399567 — but it seems like the next commit didn't take in account this.

This is a problem because it makes it really hard to understand why is there even an update to the application, what does it address, etc.

Thanks.,[]
58466,Publish APK in F-Droid and enable deterministic builds,Currently, no APK is published over F-Droid which is another alternative store for Android.

Furthermore, it would be vital to provide a way to reproduce official builds and enable deterministic builds so that we can trust the provided binaries.

As far as I see it, StopCovid is trusting Google's app signing mechanism, which means that Google holds your signing key, right?

For a governement-backed application, it would be a shame to not, at least, provide a non-Google alternative on a store such as F-Droid. Even more when you would be able to offer reproductible builds and a transparency binary log.,[]
58374,APK install - Certificate issue?,Hello, I do not use the Google Play Store, instead I download the APK (last: 1.1.3) from https://bonjour.stopcovid.gouv.fr/ . Thanks for that!

Now I wanted to update to 2.0.1, but when downloading the APK, Android just says "App not installed" at the end of the installation process. "adb" gives a better message:

```
$ adb install ~/tousanticovid-release.apk 
adb: failed to install /home/vh/tousanticovid-release.apk: Failure [INSTALL_FAILED_UPDATE_INCOMPATIBLE: Package fr.gouv.android.stopcovid signatures do not match previously installed version; ignoring!]
```

This is on a Nokia 1.3 with Android 10.

Of course I can uninstall the old version and install the new one, but won't I lose my contact data from the last days?,[]
54394,Some ebids are used for over 45 minutes,Some version of StopCovid (unknown) advertises the same ebid for over 45 minutes.

Below is the proximity log I recorded today.  We were 3 stopcovid users in this restaurant: me, a partner and an unknown user.  The unknown user's phone has been advertising as G1h2+T until 12h32, then switched (likely) to Qv7cB6 and kept that ebid for over 45 minutes:
```
lun. 6 juil. 13:18:56, Qv7cB6
lun. 6 juil. 12:32:22, ... (492)     <= duration = 47 minutes
```

Log of proximity contacts:
```
lun. 6 juil. 13:22:56, NCs2FW
lun. 6 juil. 13:15:05, ... (77)
lun. 6 juil. 13:18:56, Qv7cB6        <= unknown user (likely) new ebid
lun. 6 juil. 12:32:22, ... (492)
lun. 6 juil. 13:14:55, HTv8/N
lun. 6 juil. 13:00:20, ... (182)
lun. 6 juil. 13:00:20, 5ijNTc
lun. 6 juil. 12:45:21, ... (173)
lun. 6 juil. 12:45:21, BbbIVz
lun. 6 juil. 12:30:05, ... (177)
lun. 6 juil. 12:32:17, G1h2+T        <= unknown user first ebid 
lun. 6 juil. 12:24:07, ... (91)
lun. 6 juil. 12:29:58, 7UrhaA
lun. 6 juil. 12:29:38, ... (4)
```

List of partner ebids:
```
lun. 6 juil. 13:15:00, NCs2FW
lun. 6 juil. 13:00:00, HTv8/N
lun. 6 juil. 12:45:00, 5ijNTc
lun. 6 juil. 12:30:00, BbbIVz
lun. 6 juil. 12:15:00, 7UrhaA
```,['CODE FIX', 'Security - privacy']
54383,Systematic crash on app start (OnePlus 5T [A5010] - Android 9),Reporting a crash issue on behalf of [@cdongieux](https://github.com/cdongieux):

https://github.com/ofa-/stopcovid-android/issues/3

----
Hi,

I installed StopCovid19 several weeks ago, all was fine until this morning when I wanted to start it when going outside: the app keeps crashing after I start it, whether BT is on or not, with the same stacktrace (see below).
The only solution to make the app run fine again was to clear the app data (clearing the cache was not enough).

The device is a OnePlus 5T (A5010) running on Android 9. All permissions required by the app were granted.
StopCovid version 1.1.0 # 38

Best regards,\
Christophe

[stopcovid_crash.txt](https://github.com/ofa-/stopcovid-android/files/4877283/stopcovid_crash.txt),['CODE FIX']
54339,No proximity stored when device sleeps (Logicom Le Smooth),on my Logicom Le Smooth (android-8.1) when the device goes into sleep mode, StopCovid behaves as follows:
- advertising works => other devices around get proximity info
- receiving does not work => no proximity info is stored on my device

Battery optimization parameters seems to be set correctly by the app, as opposed to #26.

Forcing a [scanner restart on notifyPayloadUpdated][fix] fixes the issue.

[fix]: https://github.com/ofa-/stopcovid-android/commit/ac5c454613d1f99df128194db53a7b8bf742cf4d,['BLE']
