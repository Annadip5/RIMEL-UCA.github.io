./results/git/covid_alert/issue_file_github.txt:104:- [ ] use the `getPeriodsSinceLastFetch`/`lastChecked` logic to request the mock data
./results/git/covid_alert/issue_file_github.txt:357:The download diagnosis file operation is executed periodically to retrieve the diagnosis keys from the server. It is possible for a malicious server to perform a denial of service attack by returning a large keys file which could potentially consume all of the memory available to the app and would eventually crash the application. Based on code review of the downloadDiagnosisKeysFile in CovidShieldModule.kt, we can confirm that the application isnâ€™t restricting the size of received payload and just blindly saves the diagnosis key files without any validation. We were able to send a diagnosis key file of size 100MB and confirm via the debugger that the data was getting saved to the keys.zip file.
./results/git/covid_alert/issue_file_github.txt:530: periodic processing of diagnosis file downloads and exposure matching via the performExposureStatusUpdate method and,
./results/git/covid_alert/issue_file_github.txt:577:(1) add a period at the end of "You've confirmed your email address."
./results/git/covid_alert/issue_file_github.txt:724:Ideally this task should be handled by a microservice and run periodically during the day, it does not need to occur in the go microservices.
