./results/git/covid_alert/commit_file_github.txt:21:* updated the qr flow to use the same toolbar as the datasharing flow
./results/git/covid_alert/commit_file_github.txt:360:* change how the check in data is stored, update components that use it
./results/git/covid_alert/commit_file_github.txt:362:* pass check in data directly to CheckInSuccessfulScreen, make cancel check in button navigate home
./results/git/covid_alert/commit_file_github.txt:610:Add a new table in the database to store aggregate OTK lifetimes by day,
./results/git/covid_alert/issue_comment_file_github.txt:281:https://api.github.com/repos/cds-snc/covid-alert-server/issues/52,Sorry for the necromancy comment, but thanks to your link to https://github.com/hashicorp/setup-terraform/issues/23, I've managed to solve the same [issue](https://github.com/hoprnet/hopr-devops/commit/cc6fadb889fd3013fb9d0844716b50128e987f8e). In a very random note, at [HOPR](https://hoprnet.org/) we are building an open-source privacy-oriented mixnet to communicate data and we might overlap with some of the work done in here. HMU here or at Twitter w/@jjperezaguinaga (or our founder @SCBuergel) in Twitter to chat ☺️ 
./results/git/covid_alert/issue_comment_file_github.txt:285:https://api.github.com/repos/cds-snc/covid-alert-server/issues/86,Data provider isnt available because the KMS needs to be created first, going to investigate the best way to ensure core services are available before application deployment
./results/git/covid_alert/issue_comment_file_github.txt:353:> If so, the diagnosis keys, which are just re-named Temporary Exposure keys (randomly generated 16-byte values), are stored in the national servers database without any linkage to other pieces of information.
./results/git/covid_alert/issue_comment_file_github.txt:358:You need to present a diagram of interactions in human-readable terms, describe what databases are used, where data is stored in general (i.e. mentioned databases, owner's device, other people's devices), as well as to assure people that there is no retention of data in any form, such as backups (I saw an issue here talking about one-day backups and a system like this shouldn't have any, but should only rely on redundant storage; there must be no backups).
./results/git/covid_alert/issue_comment_file_github.txt:362:* if any of the databases is compromised, what will attacker gain from that information?
./results/git/covid_alert/issue_comment_file_github.txt:373:That's security by obscurity and is irrelevant. You should assume that any user can hack their own device to gain full access to this data, so your narrative should be that this data, if obtained by the device holder, cannot be used to retrieve diagnosis data for these RPI's.
./results/git/covid_alert/issue_comment_file_github.txt:375:Lastly, if it is all anonymous, how would a health professional contact a person if they are sick? None of the descriptions are clear on that, which suggests that there's something in the database that tracks a person for this contact. You need to describe that a health professional contacts a person whether they have an app or not, gives them the diagnosis and *if* the person has the app, then they also get the one time code to notify others. Clarity is important.
./results/git/covid_alert/issue_comment_file_github.txt:391:You need to present a diagram of interactions in human-readable terms, describe what databases are used, where data is stored in general (i.e. mentioned databases, owner's device, other people's devices), as well as to assure people that there is no retention of data in any form, such as backups (I saw an issue here talking about one-day backups and a system like this shouldn't have any, but should only rely on redundant storage; there must be no backups).
./results/git/covid_alert/issue_comment_file_github.txt:395:  *   if any of the databases is compromised, what will attacker gain from that information?
./results/git/covid_alert/issue_comment_file_github.txt:406:That's security by obscurity and is irrelevant. You should assume that any user can hack their own device to gain full access to this data, so your narrative should be that this data, if obtained by the device holder, cannot be used to retrieve diagnosis data for these RPI's.
./results/git/covid_alert/issue_comment_file_github.txt:408:Lastly, if it is all anonymous, how would a health professional contact a person if they are sick? None of the descriptions are clear on that, which suggests that there's something in the database that tracks a person for this contact. You need to describe that a health professional contacts a person whether they have an app or not, gives them the diagnosis and if the person has the app, then they also get the one time code to notify others. Clarity is important.
./results/git/covid_alert/issue_comment_file_github.txt:421:* There are some AWS SNS alerts added without clear description of what is being sent and how this data is retained.
./results/git/covid_alert/issue_comment_file_github.txt:435:You need to come up with a good diagram that shows how the app interacts with other phones, how it receives diagnostic keys and matches them up against RPE's, whether a tracing key, which uniquely identifies the device, ever gets into the cloud database, what the device public key in the database is used for, and so on. This is just to show people what the app does.
./results/git/covid_alert/issue_comment_file_github.txt:437:On top of that, you need to describe how data can be exploited (or not) if a database gets compromised, if person's device gets compromised or if a remote device gets compromised with my keys on it. This description should be done by a security-aware person and not a developer. 
./results/git/covid_alert/issue_comment_file_github.txt:439:Lastly, you need to describe retention policies for logs, database backups, encryption at rest policy for AWS database, and any communication with AWS, like SNS messages. 
./results/git/covid_alert/issue_comment_file_github.txt:458:The preauthorized dialog is proposed as the mean to comply with the framework. Uploading exposure data remains only done if user is subsequently diagnosed positive. Yes the server or portal would now be notifying the app user of his own test result, which used to be done outside the app framework with the problems that we fully appreciate now. The proposed test result optimization would streamline the currently elusive final notifications to users having been in the proximity.
./results/git/covid_alert/issue_comment_file_github.txt:758:https://api.github.com/repos/cds-snc/covid-alert-server/issues/52,Sorry for the necromancy comment, but thanks to your link to https://github.com/hashicorp/setup-terraform/issues/23, I've managed to solve the same [issue](https://github.com/hoprnet/hopr-devops/commit/cc6fadb889fd3013fb9d0844716b50128e987f8e). In a very random note, at [HOPR](https://hoprnet.org/) we are building an open-source privacy-oriented mixnet to communicate data and we might overlap with some of the work done in here. HMU here or at Twitter w/@jjperezaguinaga (or our founder @SCBuergel) in Twitter to chat ☺️ 
./results/git/covid_alert/issue_comment_file_github.txt:762:https://api.github.com/repos/cds-snc/covid-alert-server/issues/86,Data provider isnt available because the KMS needs to be created first, going to investigate the best way to ensure core services are available before application deployment
./results/git/covid_alert/issue_comment_file_github.txt:830:> If so, the diagnosis keys, which are just re-named Temporary Exposure keys (randomly generated 16-byte values), are stored in the national servers database without any linkage to other pieces of information.
./results/git/covid_alert/issue_comment_file_github.txt:835:You need to present a diagram of interactions in human-readable terms, describe what databases are used, where data is stored in general (i.e. mentioned databases, owner's device, other people's devices), as well as to assure people that there is no retention of data in any form, such as backups (I saw an issue here talking about one-day backups and a system like this shouldn't have any, but should only rely on redundant storage; there must be no backups).
./results/git/covid_alert/issue_comment_file_github.txt:839:* if any of the databases is compromised, what will attacker gain from that information?
./results/git/covid_alert/issue_comment_file_github.txt:850:That's security by obscurity and is irrelevant. You should assume that any user can hack their own device to gain full access to this data, so your narrative should be that this data, if obtained by the device holder, cannot be used to retrieve diagnosis data for these RPI's.
./results/git/covid_alert/issue_comment_file_github.txt:852:Lastly, if it is all anonymous, how would a health professional contact a person if they are sick? None of the descriptions are clear on that, which suggests that there's something in the database that tracks a person for this contact. You need to describe that a health professional contacts a person whether they have an app or not, gives them the diagnosis and *if* the person has the app, then they also get the one time code to notify others. Clarity is important.
./results/git/covid_alert/issue_comment_file_github.txt:868:You need to present a diagram of interactions in human-readable terms, describe what databases are used, where data is stored in general (i.e. mentioned databases, owner's device, other people's devices), as well as to assure people that there is no retention of data in any form, such as backups (I saw an issue here talking about one-day backups and a system like this shouldn't have any, but should only rely on redundant storage; there must be no backups).
./results/git/covid_alert/issue_comment_file_github.txt:872:  *   if any of the databases is compromised, what will attacker gain from that information?
./results/git/covid_alert/issue_comment_file_github.txt:883:That's security by obscurity and is irrelevant. You should assume that any user can hack their own device to gain full access to this data, so your narrative should be that this data, if obtained by the device holder, cannot be used to retrieve diagnosis data for these RPI's.
./results/git/covid_alert/issue_comment_file_github.txt:885:Lastly, if it is all anonymous, how would a health professional contact a person if they are sick? None of the descriptions are clear on that, which suggests that there's something in the database that tracks a person for this contact. You need to describe that a health professional contacts a person whether they have an app or not, gives them the diagnosis and if the person has the app, then they also get the one time code to notify others. Clarity is important.
./results/git/covid_alert/issue_comment_file_github.txt:898:* There are some AWS SNS alerts added without clear description of what is being sent and how this data is retained.
./results/git/covid_alert/issue_comment_file_github.txt:912:You need to come up with a good diagram that shows how the app interacts with other phones, how it receives diagnostic keys and matches them up against RPE's, whether a tracing key, which uniquely identifies the device, ever gets into the cloud database, what the device public key in the database is used for, and so on. This is just to show people what the app does.
./results/git/covid_alert/issue_comment_file_github.txt:914:On top of that, you need to describe how data can be exploited (or not) if a database gets compromised, if person's device gets compromised or if a remote device gets compromised with my keys on it. This description should be done by a security-aware person and not a developer. 
./results/git/covid_alert/issue_comment_file_github.txt:916:Lastly, you need to describe retention policies for logs, database backups, encryption at rest policy for AWS database, and any communication with AWS, like SNS messages. 
./results/git/covid_alert/issue_comment_file_github.txt:935:The preauthorized dialog is proposed as the mean to comply with the framework. Uploading exposure data remains only done if user is subsequently diagnosed positive. Yes the server or portal would now be notifying the app user of his own test result, which used to be done outside the app framework with the problems that we fully appreciate now. The proposed test result optimization would streamline the currently elusive final notifications to users having been in the proximity.
./results/git/covid_alert/issue_file_github.txt:16:➜  covid-alert-app git:(update_async_storage) ✗ xcrun simctl get_app_container booted ca.gc.hcsc.canada.stopcovid data                                                                                                                       
./results/git/covid_alert/issue_file_github.txt:17:/Users/bob/Library/Developer/CoreSimulator/Devices/6A257592-8E43-450D-8317-D1A8EBA35E6F/data/Containers/Data/Application/7B50DF4D-AE2B-4026-8A82-C432FBD7F845
./results/git/covid_alert/issue_file_github.txt:18:➜  covid-alert-app git:(update_async_storage) ✗ cd /Users/bob/Library/Developer/CoreSimulator/Devices/6A257592-8E43-450D-8317-D1A8EBA35E6F/data/Containers/Data/Application/7B50DF4D-AE2B-4026-8A82-C432FBD7F845/Library/Application\ Support/ca.gc.hcsc.canada.stopcovid 
./results/git/covid_alert/issue_file_github.txt:22:com.apple.metadata:com_apple_backup_excludeItem: com.apple.MobileBackup
./results/git/covid_alert/issue_file_github.txt:25:{"Locale":"en","Region":"PE","UUID_KEY":"59OS9U9Z","UserStopped":"0","OnboardedDatetime":"2021-02-26T12:45:43.921Z","exposureStatus":"{\"type\":\"monitoring\"}","IsOnboarded":"1","navigationState":"{\"stale\":false,\"type\":\"stack\",\"key\":\"stack-eJEGE_vqv4vkDvyYVfAS4\",\"index\":0,\"routeNames\":[\"Landing\",\"Home\",\"OnboardingNavigator\",\"Tutorial\",\"DataSharing\",\"LanguageSelect\",\"RegionSelect\",\"RegionSelectExposedNoPT\",\"DismissAlert\",\"NoCode\",\"TestScreen\",\"ErrorScreen\",\"FrameworkUnavailableScreen\",\"QRCodeFlow\",\"CheckInHistoryScreen\",\"ClearOutbreakExposure\"],\"routes\":[{\"name\":\"Home\",\"key\":\"Home-WrrTMLnuVlu8SnQnYDrBs\"}]}"}%                                                                                                                                                                                                                                                ➜  RCTAsyncLocalStorage_V1 xattr manifest.json 
./results/git/covid_alert/issue_file_github.txt:35:Within `patches/@react-native-community+async-storage+1.9.0.patch` modifications are made to ensure that data is not backed up in iCloud storage.
./results/git/covid_alert/issue_file_github.txt:98:- [x] explore signing of the QR code data in the url
./results/git/covid_alert/issue_file_github.txt:102:- [x] convo with server team to get realistic outbreak data sent to the app (mock data for now) (we are now waiting on this PR: https://github.com/cds-snc/covid-alert-server/pull/438)
./results/git/covid_alert/issue_file_github.txt:103:- [ ] copy the data model from [here](https://github.com/cds-snc/covid-alert-server/blob/qr_submission/proto/covidshield.proto) and use this on top of our current mocked data in db.json
./results/git/covid_alert/issue_file_github.txt:104:- [ ] use the `getPeriodsSinceLastFetch`/`lastChecked` logic to request the mock data
./results/git/covid_alert/issue_file_github.txt:108:- [ ] performance test feature with large amounts of data
./results/git/covid_alert/issue_file_github.txt:348:This issue was easily demonstrated with an HTTP server that sends response data that contains 100 bytes of zeros data back to the client in response to the POST /claim-key request. The POST request is sent when the user enters the 8-digit number to initiate the uploading of TEKs, after being diagnosed.  Because the app thinks the response is valid, it displays the "Agree" screen to request user's permission to download the TEKs.  When the user selects Agree, an error message is returned, "Random codes could not be uploaded You did not give permission".  The application is not able to recover and is stuck in the "upload your random codes" state.
./results/git/covid_alert/issue_file_github.txt:357:The download diagnosis file operation is executed periodically to retrieve the diagnosis keys from the server. It is possible for a malicious server to perform a denial of service attack by returning a large keys file which could potentially consume all of the memory available to the app and would eventually crash the application. Based on code review of the downloadDiagnosisKeysFile in CovidShieldModule.kt, we can confirm that the application isn’t restricting the size of received payload and just blindly saves the diagnosis key files without any validation. We were able to send a diagnosis key file of size 100MB and confirm via the debugger that the data was getting saved to the keys.zip file.
./results/git/covid_alert/issue_file_github.txt:363: Not a great solution, but if (1) is not possible, the application should reject the response if the data > 16M or an appropriate maximum payload size as per https://developers.google.com/android/exposure-notifications/exposure-key-file-format#file-format and agreement with the server development team.,[{'id': 2180853016, 'node_id': 'MDU6TGFiZWwyMTgwODUzMDE2', 'url': 'https://api.github.com/repos/cds-snc/covid-alert-app/labels/CCCS', 'name': 'CCCS', 'color': '2ea011', 'default': False, 'description': ''}, {'id': 2102563387, 'node_id': 'MDU6TGFiZWwyMTAyNTYzMzg3', 'url': 'https://api.github.com/repos/cds-snc/covid-alert-app/labels/bug', 'name': 'bug', 'color': 'd73a4a', 'default': True, 'description': "Something isn't working"}, {'id': 2240139725, 'node_id': 'MDU6TGFiZWwyMjQwMTM5NzI1', 'url': 'https://api.github.com/repos/cds-snc/covid-alert-app/labels/inbox', 'name': 'inbox', 'color': '000000', 'default': False, 'description': 'for new issues coming in'}]
./results/git/covid_alert/issue_file_github.txt:364:1181,[BVC-108] Large invalid response data causes the app to crash with Out of Memory exception.,# Summary | Résumé
./results/git/covid_alert/issue_file_github.txt:366:Application should be robust enough to handle large invalid data from a server, possibly a malicious server (john: or faulty server response on our part). Sending large response data of around 100MB in response to the  GET exposure-configuration request caused the android mobile application to crash with the following message being displayed to the user:
./results/git/covid_alert/issue_file_github.txt:439:07-07 08:23:46.311  9334  9355 D SoLoader: libhermes-executor-debug.so found on /data/data/com.google.android.apps.exposurenotification/lib-main
./results/git/covid_alert/issue_file_github.txt:441:07-07 08:23:46.334  9334  9355 E SoLoader: couldn't find DSO to load: libhermes-executor-debug.so caused by: couldn't find DSO to load: libhermes-inspector.so caused by: dlopen failed: cannot locate symbol "_ZTIN8facebook6hermes8debugger13EventObserverE" referenced by "/data/data/com.google.android.apps.exposurenotification/lib-main/libhermes-inspector.so"...
./results/git/covid_alert/issue_file_github.txt:442:07-07 08:23:46.334  9334  9355 E SoLoader: couldn't find DSO to load: libhermes-executor-debug.so caused by: couldn't find DSO to load: libhermes-inspector.so caused by: dlopen failed: cannot locate symbol "_ZTIN8facebook6hermes8debugger13EventObserverE" referenced by "/data/data/com.google.android.apps.exposurenotification/lib-main/libhermes-inspector.so"...
./results/git/covid_alert/issue_file_github.txt:443:07-07 08:23:46.334  9334  9355 E SoLoader: couldn't find DSO to load: libhermes-executor-debug.so caused by: couldn't find DSO to load: libhermes-inspector.so caused by: dlopen failed: cannot locate symbol "_ZTIN8facebook6hermes8debugger13EventObserverE" referenced by "/data/data/com.google.android.apps.exposurenotification/lib-main/libhermes-inspector.so"...
./results/git/covid_alert/issue_file_github.txt:444:07-07 08:23:46.334  9334  9355 E SoLoader: couldn't find DSO to load: libhermes-executor-debug.so caused by: couldn't find DSO to load: libhermes-inspector.so caused by: dlopen failed: cannot locate symbol "_ZTIN8facebook6hermes8debugger13EventObserverE" referenced by "/data/data/com.google.android.apps.exposurenotification/lib-main/libhermes-inspector.so"...
./results/git/covid_alert/issue_file_github.txt:447:07-07 08:23:46.334  9334  9355 D SoLoader: libhermes-executor-release.so found on /data/data/com.google.android.apps.exposurenotification/lib-main
./results/git/covid_alert/issue_file_github.txt:523:896,BVC-143 Concurrency Control issue - Access to exposure status is not properly synchronized,Access to the exposure status in ExposureNotificationService class is not properly synchronized and could lead to data corruption issues where one thread may update this value while another thread is in the middle of executing a particular function that relies on the previous value of the variable.
./results/git/covid_alert/issue_file_github.txt:526:There are currently three possible states (refer to as types in the data structure): 'monitoring', 'exposed' and 'diagnosed'
./results/git/covid_alert/issue_file_github.txt:715: - Endpoint that takes an exposure event and stores it in the database,[]
./results/git/covid_alert/issue_file_github.txt:827: - The endpoint is able to be passed the date through the URL and this data will be returned as a JSON object containing all the aggregated events logged on that specific date. 
./results/git/covid_alert/issue_file_github.txt:917:  - [ ] The ability to stuff the database with data similar to production
./results/git/covid_alert/issue_file_github.txt:918:  To replace the following script: https://github.com/cds-snc/covid-alert-server/tree/master/bin/stuff-database
./results/git/covid_alert/issue_file_github.txt:980:339,Include requestor's IP address in logs,Logging can be improved by adding the requestor’s IP address in the log for the server’s response. This will make it a lot easier to see where bad requests are coming from, without having to combine data from multiple logs. 
