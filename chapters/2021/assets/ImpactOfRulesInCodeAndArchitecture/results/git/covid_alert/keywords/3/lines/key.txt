./results/git/covid_alert/commit_file_github.txt:8:* Add a new fastlane lane that checks to see that there is no NSAppTransportSecurity key in the final IPA
./results/git/covid_alert/commit_file_github.txt:11:* Remove the NSAppTransportSecurity key & dict from the Info.plist
./results/git/covid_alert/commit_file_github.txt:118:* Rename the storage key.
./results/git/covid_alert/commit_file_github.txt:200:See https://developer.apple.com/documentation/uikit/uiapplication/1622952-canopenurl & https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102207
./results/git/covid_alert/commit_file_github.txt:559:Adds a `revised_keys` field to the `TemporaryExposureKeyExport` message
./results/git/covid_alert/commit_file_github.txt:560:Adds a `report_type` field to the `TemporaryExposureKey` message and the
./results/git/covid_alert/commit_file_github.txt:586:- break out TestValidateKey
./results/git/covid_alert/issue_comment_file_github.txt:3:https://api.github.com/repos/cds-snc/covid-alert-app/issues/14,To note here is that the HMAC will need to match the one in the shared file if you want to retrieve exposure keys from the server. But we can adjust those locally
./results/git/covid_alert/issue_comment_file_github.txt:271:https://developers.google.com/android/exposure-notifications/exposure-key-file-format
./results/git/covid_alert/issue_comment_file_github.txt:351:https://api.github.com/repos/cds-snc/covid-alert-documentation/issues/10,It seems like you're curious about how Rolling Proximity Identifiers (aka 'random codes', or RPI's) and Diagnosis keys (aka: different 'random codes') are stored?
./results/git/covid_alert/issue_comment_file_github.txt:353:> If so, the diagnosis keys, which are just re-named Temporary Exposure keys (randomly generated 16-byte values), are stored in the national servers database without any linkage to other pieces of information.
./results/git/covid_alert/issue_comment_file_github.txt:354:> RPI's that your phone broadcast are stored by other phones in their exposure notification subsystem. This information is never presented to the application itself, and is only ever used by the subsystem to match against diagnosis keys that the app downloads from the national server itself.
./results/git/covid_alert/issue_comment_file_github.txt:356:https://api.github.com/repos/cds-snc/covid-alert-documentation/issues/10,The point is, the key for deploying this app is to gain some community trust and vague descriptions are not helping. If somebody doesn't understand how it works, they will not read Google's contact tracing scanning flow sequence diagrams, but simply will shrug off this app.
./results/git/covid_alert/issue_comment_file_github.txt:363:* if somebody gets their copy on random keys for other people on their own device, what can they gain?
./results/git/covid_alert/issue_comment_file_github.txt:367:As an example, you would describe that Rolling Proximity Identifier is generated every 15 minutes, so if somebody followed a person with the same device in Bluetooth signal proximity, they wouldn't track the person because RPI's are generated every 15 minutes. Same for all bits - daily tracing keys, diagnosis keys, etc.
./results/git/covid_alert/issue_comment_file_github.txt:377:- how does public health generate the secret key to provide to person infected with COVID, is it a pool of numbers
./results/git/covid_alert/issue_comment_file_github.txt:389:The point is, the key for deploying this app is to gain some community trust and vague descriptions are not helping. If somebody doesn't understand how it works, they will not read Google's contact tracing scanning flow sequence diagrams, but simply will shrug off this app.
./results/git/covid_alert/issue_comment_file_github.txt:396:  *   if somebody gets their copy on random keys for other people on their own device, what can they gain?
./results/git/covid_alert/issue_comment_file_github.txt:400:As an example, you would describe that Rolling Proximity Identifier is generated every 15 minutes, so if somebody followed a person with the same device in Bluetooth signal proximity, they wouldn't track the person because RPI's are generated every 15 minutes. Same for all bits - daily tracing keys, diagnosis keys, etc.
./results/git/covid_alert/issue_comment_file_github.txt:433:The app will be used only if people have confidence in privacy features of the app and so far statements like "random identifiers" are misleading because if they were random, you wouldn't be able to receive a diagnosis key, which is a daily key and match it up against rolling proximity identifiers.
./results/git/covid_alert/issue_comment_file_github.txt:435:You need to come up with a good diagram that shows how the app interacts with other phones, how it receives diagnostic keys and matches them up against RPE's, whether a tracing key, which uniquely identifies the device, ever gets into the cloud database, what the device public key in the database is used for, and so on. This is just to show people what the app does.
./results/git/covid_alert/issue_comment_file_github.txt:437:On top of that, you need to describe how data can be exploited (or not) if a database gets compromised, if person's device gets compromised or if a remote device gets compromised with my keys on it. This description should be done by a security-aware person and not a developer. 
./results/git/covid_alert/issue_comment_file_github.txt:450:But, if confirmation from the original designers of this protocol matters, consider this it: Ten minute expiry was my choice and I'm confident that bumping it to 24 hours alongside the substantial increase in keyspace size is an improvement.
./results/git/covid_alert/issue_comment_file_github.txt:480:https://api.github.com/repos/cds-snc/covid-alert-app/issues/14,To note here is that the HMAC will need to match the one in the shared file if you want to retrieve exposure keys from the server. But we can adjust those locally
./results/git/covid_alert/issue_comment_file_github.txt:748:https://developers.google.com/android/exposure-notifications/exposure-key-file-format
./results/git/covid_alert/issue_comment_file_github.txt:828:https://api.github.com/repos/cds-snc/covid-alert-documentation/issues/10,It seems like you're curious about how Rolling Proximity Identifiers (aka 'random codes', or RPI's) and Diagnosis keys (aka: different 'random codes') are stored?
./results/git/covid_alert/issue_comment_file_github.txt:830:> If so, the diagnosis keys, which are just re-named Temporary Exposure keys (randomly generated 16-byte values), are stored in the national servers database without any linkage to other pieces of information.
./results/git/covid_alert/issue_comment_file_github.txt:831:> RPI's that your phone broadcast are stored by other phones in their exposure notification subsystem. This information is never presented to the application itself, and is only ever used by the subsystem to match against diagnosis keys that the app downloads from the national server itself.
./results/git/covid_alert/issue_comment_file_github.txt:833:https://api.github.com/repos/cds-snc/covid-alert-documentation/issues/10,The point is, the key for deploying this app is to gain some community trust and vague descriptions are not helping. If somebody doesn't understand how it works, they will not read Google's contact tracing scanning flow sequence diagrams, but simply will shrug off this app.
./results/git/covid_alert/issue_comment_file_github.txt:840:* if somebody gets their copy on random keys for other people on their own device, what can they gain?
./results/git/covid_alert/issue_comment_file_github.txt:844:As an example, you would describe that Rolling Proximity Identifier is generated every 15 minutes, so if somebody followed a person with the same device in Bluetooth signal proximity, they wouldn't track the person because RPI's are generated every 15 minutes. Same for all bits - daily tracing keys, diagnosis keys, etc.
./results/git/covid_alert/issue_comment_file_github.txt:854:- how does public health generate the secret key to provide to person infected with COVID, is it a pool of numbers
./results/git/covid_alert/issue_comment_file_github.txt:866:The point is, the key for deploying this app is to gain some community trust and vague descriptions are not helping. If somebody doesn't understand how it works, they will not read Google's contact tracing scanning flow sequence diagrams, but simply will shrug off this app.
./results/git/covid_alert/issue_comment_file_github.txt:873:  *   if somebody gets their copy on random keys for other people on their own device, what can they gain?
./results/git/covid_alert/issue_comment_file_github.txt:877:As an example, you would describe that Rolling Proximity Identifier is generated every 15 minutes, so if somebody followed a person with the same device in Bluetooth signal proximity, they wouldn't track the person because RPI's are generated every 15 minutes. Same for all bits - daily tracing keys, diagnosis keys, etc.
./results/git/covid_alert/issue_comment_file_github.txt:910:The app will be used only if people have confidence in privacy features of the app and so far statements like "random identifiers" are misleading because if they were random, you wouldn't be able to receive a diagnosis key, which is a daily key and match it up against rolling proximity identifiers.
./results/git/covid_alert/issue_comment_file_github.txt:912:You need to come up with a good diagram that shows how the app interacts with other phones, how it receives diagnostic keys and matches them up against RPE's, whether a tracing key, which uniquely identifies the device, ever gets into the cloud database, what the device public key in the database is used for, and so on. This is just to show people what the app does.
./results/git/covid_alert/issue_comment_file_github.txt:914:On top of that, you need to describe how data can be exploited (or not) if a database gets compromised, if person's device gets compromised or if a remote device gets compromised with my keys on it. This description should be done by a security-aware person and not a developer. 
./results/git/covid_alert/issue_comment_file_github.txt:927:But, if confirmation from the original designers of this protocol matters, consider this it: Ten minute expiry was my choice and I'm confident that bumping it to 24 hours alongside the substantial increase in keyspace size is an improvement.
./results/git/covid_alert/issue_file_github.txt:25:{"Locale":"en","Region":"PE","UUID_KEY":"59OS9U9Z","UserStopped":"0","OnboardedDatetime":"2021-02-26T12:45:43.921Z","exposureStatus":"{\"type\":\"monitoring\"}","IsOnboarded":"1","navigationState":"{\"stale\":false,\"type\":\"stack\",\"key\":\"stack-eJEGE_vqv4vkDvyYVfAS4\",\"index\":0,\"routeNames\":[\"Landing\",\"Home\",\"OnboardingNavigator\",\"Tutorial\",\"DataSharing\",\"LanguageSelect\",\"RegionSelect\",\"RegionSelectExposedNoPT\",\"DismissAlert\",\"NoCode\",\"TestScreen\",\"ErrorScreen\",\"FrameworkUnavailableScreen\",\"QRCodeFlow\",\"CheckInHistoryScreen\",\"ClearOutbreakExposure\"],\"routes\":[{\"name\":\"Home\",\"key\":\"Home-WrrTMLnuVlu8SnQnYDrBs\"}]}"}%                                                                                                                                                                                                                                                ➜  RCTAsyncLocalStorage_V1 xattr manifest.json 
./results/git/covid_alert/issue_file_github.txt:106:- [ ] implement verifying the signature, add the public key as an env variable. Q: can we use `import nacl from 'tweetnacl';` for this? (again may want to wait until https://github.com/cds-snc/covid-alert-server/pull/438 is merged)
./results/git/covid_alert/issue_file_github.txt:166:1344,Deleting server and client keys from storage when transitioning from …,…diagnosed to monitoring state
./results/git/covid_alert/issue_file_github.txt:315:The [Material UX guidelines](https://material.io/components/app-bars-top#contextual-action-bar) suggest using an `x` at the top left. But, the enter exposure key flow has a close button at the top right:
./results/git/covid_alert/issue_file_github.txt:331:3. Tap `Enter your one-time key`
./results/git/covid_alert/issue_file_github.txt:344:1183,[BVC-120] Mobile app - Insufficient validation of KeyClaim response,# Summary | Résumé
./results/git/covid_alert/issue_file_github.txt:346:The application can be tricked into believing it has received a valid Key Claim Response by simply using invalid tags in the response message. Presumably, this will result in a failure later on, when the app tries to use the server’s Public Key. The relevant code is located in the KeyClaimResponse decode function in covidshield.js.
./results/git/covid_alert/issue_file_github.txt:348:This issue was easily demonstrated with an HTTP server that sends response data that contains 100 bytes of zeros data back to the client in response to the POST /claim-key request. The POST request is sent when the user enters the 8-digit number to initiate the uploading of TEKs, after being diagnosed.  Because the app thinks the response is valid, it displays the "Agree" screen to request user's permission to download the TEKs.  When the user selects Agree, an error message is returned, "Random codes could not be uploaded You did not give permission".  The application is not able to recover and is stuck in the "upload your random codes" state.
./results/git/covid_alert/issue_file_github.txt:355:1182,[BVC-117] Possible Denial of Service - Application accepts very large payload for diagnosis keys file,# Summary | Résumé
./results/git/covid_alert/issue_file_github.txt:357:The download diagnosis file operation is executed periodically to retrieve the diagnosis keys from the server. It is possible for a malicious server to perform a denial of service attack by returning a large keys file which could potentially consume all of the memory available to the app and would eventually crash the application. Based on code review of the downloadDiagnosisKeysFile in CovidShieldModule.kt, we can confirm that the application isn’t restricting the size of received payload and just blindly saves the diagnosis key files without any validation. We were able to send a diagnosis key file of size 100MB and confirm via the debugger that the data was getting saved to the keys.zip file.
./results/git/covid_alert/issue_file_github.txt:363: Not a great solution, but if (1) is not possible, the application should reject the response if the data > 16M or an appropriate maximum payload size as per https://developers.google.com/android/exposure-notifications/exposure-key-file-format#file-format and agreement with the server development team.,[{'id': 2180853016, 'node_id': 'MDU6TGFiZWwyMTgwODUzMDE2', 'url': 'https://api.github.com/repos/cds-snc/covid-alert-app/labels/CCCS', 'name': 'CCCS', 'color': '2ea011', 'default': False, 'description': ''}, {'id': 2102563387, 'node_id': 'MDU6TGFiZWwyMTAyNTYzMzg3', 'url': 'https://api.github.com/repos/cds-snc/covid-alert-app/labels/bug', 'name': 'bug', 'color': 'd73a4a', 'default': True, 'description': "Something isn't working"}, {'id': 2240139725, 'node_id': 'MDU6TGFiZWwyMjQwMTM5NzI1', 'url': 'https://api.github.com/repos/cds-snc/covid-alert-app/labels/inbox', 'name': 'inbox', 'color': '000000', 'default': False, 'description': 'for new issues coming in'}]
./results/git/covid_alert/issue_file_github.txt:513:1178,[BVC-158] Keys should be wiped after leaving diagnosed state.,# Summary | Résumé
./results/git/covid_alert/issue_file_github.txt:515:Keys created during the initial OTK exchange step are not removed from local storage after leaving the diagnosed state. As a matter of keeping things clean, would recommend wiping any artifacts related to previous diagnosis state.
./results/git/covid_alert/issue_file_github.txt:532: processing user initiated operation to submit the one time code and upload the user's TEKs via the startKeysSubmission and fetchAndSubmitKeys functions.
./results/git/covid_alert/issue_file_github.txt:534:The startKeysSubmission and fetchAndSubmitKeys run on a different thread from performExposureStatusUpdate and both threads can be executed in parallel.
./results/git/covid_alert/issue_file_github.txt:536:The startKeysSubmission and performExposureStatusUpdate functions are able to modify the shared ExposureStatus variable without any concurrency control in place. This could result in one function overwriting the value set by another function before either function completes. It can result in the state of 'exposed' getting overwritten to 'diagnosed' and vice versa and prematurely stopping further processing of a diagnosis file upload or exposure matching.
./results/git/covid_alert/issue_file_github.txt:729: - Write a lambda in chalice that will clean up the expired keys on a regular schedule
./results/git/covid_alert/issue_file_github.txt:914:  - [ ] Truncate the diagnosis_keys table. 
./results/git/covid_alert/issue_file_github.txt:916:  It needs to be moved out of the Keyclaim microservice 
./results/git/covid_alert/issue_file_github.txt:983:- [ ] whenever a key-claim request fails, the IP is logged with the error message.,[{'id': 2503924338, 'node_id': 'MDU6TGFiZWwyNTAzOTI0MzM4', 'url': 'https://api.github.com/repos/cds-snc/covid-alert-server/labels/S', 'name': 'S', 'color': '636e72', 'default': False, 'description': ''}, {'id': 2335884145, 'node_id': 'MDU6TGFiZWwyMzM1ODg0MTQ1', 'url': 'https://api.github.com/repos/cds-snc/covid-alert-server/labels/medium%20priority', 'name': 'medium priority', 'color': 'e99695', 'default': False, 'description': ''}]
